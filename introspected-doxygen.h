
/*!
\file
\ingroup utils
Doxygen docs generated from the TypeId database.
\note This file is automatically generated by \p print-introspected-doxygen.cc. Do not edit this file! Edit that file instead.
*/

/*!

\class ns3::AdrComponent

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ChangeTransmissionPower</b>: Whether to toggle the transmission power or not
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HistoryRange</b>: Number of packets to use for averaging
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:100</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MultipleGwCombiningMethod</b>: Whether to average the received power of gateways or to use the maximum
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns37lorawan12AdrComponent15CombiningMethodE></li>
    <li>Underlying type: \p avg|max|min</li>
    <li>Initial value: avg</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MultiplePacketsCombiningMethod</b>: Whether to average SNRs from multiple packets or to use the maximum
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns37lorawan12AdrComponent15CombiningMethodE></li>
    <li>Underlying type: \p avg|max|min</li>
    <li>Initial value: avg</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AlwaysLosChannelConditionModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Application

<h3>Config Paths</h3>

ns3::Application is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ApplicationPacketProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The packet plus its socket address that serve as the output for this probe<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
<li><b>OutputBytes</b>: The number of bytes in the packet<br>%Callback signature: ns3::Packet::SizeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ArpCache

<h3>Config Paths</h3>

ns3::ArpCache is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv4L3Protocol/InterfaceList/[i]/ArpCache"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/CacheList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AliveTimeout</b>: When this timeout expires, the matching cache entry needs refreshing
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.2e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DeadTimeout</b>: When this timeout expires, a new attempt to resolve the matching entry is made
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxRetries</b>: Number of retransmissions of ArpRequest before marking dead
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PendingQueueSize</b>: The size of the queue for packets pending an arp reply.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>WaitReplyTimeout</b>: When this timeout expires, the cache entries will be scanned and entries in WaitReply state will resend ArpRequest unless MaxRetries has been exceeded, in which case the entry is marked dead
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Packet dropped due to ArpCache entry in WaitReply expiring.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ArpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ArpL3Protocol

<h3>Config Paths</h3>

ns3::ArpL3Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CacheList</b>: The list of ARP caches
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ArpCache></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>RequestJitter</b>: The jitter in ms a node is allowed to wait before sending an ARP request.  Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and RequestJitter
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=10.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Packet dropped because not enough room in pending queue for a specific cache entry.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BasicEnergyHarvester

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>HarvestablePower</b>: The harvestable power [Watts] that the energy harvester is allowed to harvest. By default, the model will allow to harvest an amount of power defined by a uniformly distributed random variable in 0 and 2.0 Watts
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=2.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PeriodicHarvestedPowerUpdateInterval</b>: Time between two consecutive periodic updates of the harvested power. By default, the value is updated every 1 s
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>HarvestedPower</b>: Harvested power by the BasicEnergyHarvester.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
<li><b>TotalEnergyHarvested</b>: Total energy harvested by the harvester.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BasicEnergySource

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BasicEnergyHighBatteryThreshold</b>: High battery threshold for basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BasicEnergyLowBatteryThreshold</b>: Low battery threshold for basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BasicEnergySourceInitialEnergyJ</b>: Initial energy stored in basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BasicEnergySupplyVoltageV</b>: Initial supply voltage for basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy at BasicEnergySource.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BernoulliRandomVariable

<h3>Config Paths</h3>

ns3::BernoulliRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::BernoulliRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::BernoulliRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::BernoulliRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::BernoulliRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Probability</b>: The probability of the random variable returning a value of 1.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BinaryErrorModel

<h3>Config Paths</h3>

ns3::BinaryErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BinaryErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BinaryErrorModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BinomialRandomVariable

<h3>Config Paths</h3>

ns3::BinomialRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::BinomialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::BinomialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::BinomialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::BinomialRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Probability</b>: The probability of success in each trial.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Trials</b>: The number of trials.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BooleanProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The bool that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Bool
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BridgeChannel

<h3>Config Paths</h3>

ns3::BridgeChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/ChannelList/[i]/$ns3::BridgeChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BridgeNetDevice

<h3>Config Paths</h3>

ns3::BridgeNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BridgeNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EnableLearning</b>: Enable the learning mode of the Learning Bridge
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ExpirationTime</b>: Time it takes for learned MAC state entry to expire.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Building

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Boundaries</b>: The boundaries of this Building as a value of type ns3::Box
  <ul>
    <li>Set with class:  \ref ns3::BoxValue</li>
    <li>Underlying type: \p Box</li>
    <li>Initial value: 0|0|0|0|0|0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ExternalWallsType</b>: The type of material of which the external walls are made
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns38Building14ExtWallsType_tE></li>
    <li>Underlying type: \p Wood|ConcreteWithWindows|ConcreteWithoutWindows|StoneBlocks</li>
    <li>Initial value: ConcreteWithWindows</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Id</b>: The id (unique integer) of this Building.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>NFloors</b>: The number of floors of this building.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NRoomsX</b>: The number of rooms in the X axis.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NRoomsY</b>: The number of rooms in the Y axis.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Type</b>: The type of building
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns38Building14BuildingType_tE></li>
    <li>Underlying type: \p Residential|Office|Commercial</li>
    <li>Initial value: Residential</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BuildingListPriv

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BuildingList</b>: The list of all buildings created during the simulation.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Building></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BuildingPenetrationLoss

<h3>Config Paths</h3>

ns3::BuildingPenetrationLoss is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::BuildingPenetrationLoss"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::BuildingPenetrationLoss"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BuildingsChannelConditionModel

<h3>Config Paths</h3>

ns3::BuildingsChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::BuildingsChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::BuildingsChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BuildingsPropagationLossModel

<h3>Config Paths</h3>

ns3::BuildingsPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>InternalWallLoss</b>: Additional loss for each internal wall [dB]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaExtWalls</b>: Standard deviation of the normal distribution used to calculate the shadowing due to ext walls
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaIndoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for indoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaOutdoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for outdoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BulkSendApplication

<h3>Config Paths</h3>

ns3::BulkSendApplication is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::BulkSendApplication"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EnableSeqTsSizeHeader</b>: Add SeqTsSizeHeader to each packet
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Local</b>: The Address on which to bind the socket. If not set, it is generated automatically.
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxBytes</b>: The total number of bytes to send. Once these bytes are sent, no data  is sent again. The value zero means that there is no limit.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint64_t 0:18446744073709551615</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type of protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SendSize</b>: The amount of data to send each time.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 512</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxWithSeqTsSize</b>: A new packet is created with SeqTsSizeHeader<br>%Callback signature: ns3::PacketSink::SeqTsSizeCallback
</li>
</ul>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BurstErrorModel

<h3>Config Paths</h3>

ns3::BurstErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BurstSize</b>: The number of packets being corrupted at one drop.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=1|Max=4]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BurstStart</b>: The decision variable attached to this error model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErrorRate</b>: The burst error event.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CalendarScheduler

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Reverse</b>: Store events in reverse chronological order
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Channel

<h3>Config Paths</h3>

ns3::Channel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/ChannelList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ChannelCondition

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ChannelConditionModel

<h3>Config Paths</h3>

ns3::ChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ChannelListPriv

<h3>Config Paths</h3>

ns3::ChannelListPriv is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>""</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ChannelList</b>: The list of all channels created during the simulation.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Channel></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Chunk

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ClassAEndDeviceLorawanMac

<h3>Config Paths</h3>

ns3::ClassAEndDeviceLorawanMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Mac/$ns3::EndDeviceLorawanMac/$ns3::ClassAEndDeviceLorawanMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Mac/$ns3::ClassAEndDeviceLorawanMac"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::EndDeviceLorawanMac</h3>
<ul>
<li><b>DRControl</b>: Whether to request the NS to control this device's Data Rate
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataRate</b>: Data Rate currently employed by this end device
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableEDDataRateAdaptation</b>: Whether the End Device should up its Data Rate in case it doesn't get a reply from the NS.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MType</b>: Specify type of message will be sent by this ED.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns37lorawan16LorawanMacHeader5MTypeE></li>
    <li>Underlying type: \p Unconfirmed|Confirmed</li>
    <li>Initial value: Unconfirmed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxTransmissions</b>: Maximum number of transmissions for a packet
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::EndDeviceLorawanMac</h3>
<ul>
<li><b>AggregatedDutyCycle</b>: Aggregate duty cycle, in fraction form, this end device must respect<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
<li><b>DataRate</b>: Data Rate currently employed by this end device<br>%Callback signature: ns3::TracedValueCallback::uint8_t
</li>
<li><b>LastKnownGatewayCount</b>: Last known number of gateways able to listen to this end device<br>%Callback signature: ns3::TracedValueCallback::Int
</li>
<li><b>LastKnownLinkMargin</b>: Last known demodulation margin in communications between this end device and a gateway<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
<li><b>RequiredTransmissions</b>: Total number of transmissions required to deliver this packet<br>%Callback signature: ns3::TracedValueCallback::uint8_t
</li>
<li><b>TxPower</b>: Transmission power currently employed by this end device<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<h3>TraceSources defined in parent class ns3::LorawanMac</h3>
<ul>
<li><b>CannotSendBecauseDutyCycle</b>: Trace source indicating a packet could not be sent immediately because of duty cycle limitations<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>ReceivedPacket</b>: Trace source indicating a packet was correctly received at the MAC layer<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>SentNewPacket</b>: Trace source indicating a new packet arrived at the MAC layer<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 800 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CobaltQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BlueThreshold</b>: The Threshold after which Blue is enabled
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CeThreshold</b>: The CoDel CE threshold for marking packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Decrement</b>: Pdrop decrement Value
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.000244141</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Increment</b>: Pdrop increment value
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.00390625</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Interval</b>: The Cobalt algorithm interval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: 100ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets/bytes accepted by this queue disc.
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 1500000B</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Pdrop</b>: Marking Probability
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Target</b>: The Cobalt algorithm target queue delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: 5ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Count</b>: Cobalt count<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>DropNext</b>: Time until next packet drop<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>DropState</b>: Dropping state<br>%Callback signature: ns3::TracedValueCallback::Bool
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1776 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CoDelQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CeThreshold</b>: The CoDel CE threshold for marking packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Interval</b>: The CoDel algorithm interval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: 100ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets/bytes accepted by this queue disc.
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 1500000B</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinBytes</b>: The CoDel algorithm minbytes parameter.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Target</b>: The CoDel algorithm target queue delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: 5ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Count</b>: CoDel count<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>DropNext</b>: Time until next packet drop<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>DropState</b>: Dropping state<br>%Callback signature: ns3::TracedValueCallback::Bool
</li>
<li><b>LastCount</b>: CoDel lastcount<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1264 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantAccelerationMobilityModel

<h3>Config Paths</h3>

ns3::ConstantAccelerationMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::ConstantAccelerationMobilityModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantLoraTxCurrentModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>TxCurrent</b>: The radio Tx current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.028</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantPositionMobilityModel

<h3>Config Paths</h3>

ns3::ConstantPositionMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::ConstantPositionMobilityModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantRandomVariable

<h3>Config Paths</h3>

ns3::ConstantRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::ConstantRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ConstantRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Constant</b>: The constant value returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantSpeedPropagationDelayModel

<h3>Config Paths</h3>

ns3::ConstantSpeedPropagationDelayModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::ConstantSpeedPropagationDelayModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::ConstantSpeedPropagationDelayModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Speed</b>: The propagation speed (m/s) in the propagation medium being considered. The default value is the propagation speed of light in the vacuum.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.99792e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantVelocityMobilityModel

<h3>Config Paths</h3>

ns3::ConstantVelocityMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::ConstantVelocityMobilityModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CorrelatedShwodingPropagationLossModel

<h3>Config Paths</h3>

ns3::CorrelatedShwodingPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::CorrelatedShwodingPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::CorrelatedShwodingPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CorrelationDistance</b>: The distance at which the computed shadowing becomesuncorrelated
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 110</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Cost231PropagationLossModel

<h3>Config Paths</h3>

ns3::Cost231PropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BSAntennaHeight</b>: BS Antenna Height (default is 50m).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The Frequency  (default is 2.3 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.3e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Lambda</b>: The wavelength  (default is 2.3 GHz at 300 000 km/s).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.130435</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinDistance</b>: The distance under which the propagation model refuses to give results (m).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SSAntennaHeight</b>: SS Antenna Height (default is 3m).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CounterCalculator<uint32_t>

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DataCollectionObject

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DefaultSimulatorImpl

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DeterministicRandomVariable

<h3>Config Paths</h3>

ns3::DeterministicRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::DeterministicRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::DeterministicRandomVariable"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DeviceEnergyModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DeviceNameTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DoubleProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The double that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DropTailQueue<Packet>

<h3>Config Paths</h3>

ns3::DropTailQueue<Packet> is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/TxQueue/$ns3::DropTailQueue<Packet>"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/TxQueue/$ns3::DropTailQueue<Packet>"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 100p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::Queue<Packet></h3>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DropTailQueue<QueueDiscItem>

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 100p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::Queue<QueueDiscItem></h3>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DynamicQueueLimits

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>HoldTime</b>: The DQL algorithm hold time
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: 1s</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxLimit</b>: Maximum limit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:1879048192</li>
    <li>Initial value: 1879048192</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinLimit</b>: Minimum limit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Limit</b>: Limit value calculated by DQL<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EmpiricalRandomVariable

<h3>Config Paths</h3>

ns3::EmpiricalRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::EmpiricalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::EmpiricalRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Interpolate</b>: Treat the CDF as a smooth distribution and interpolate, default is to treat the CDF as a histogram and sample.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EndDeviceLoraPhy

<h3>Config Paths</h3>

ns3::EndDeviceLoraPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Phy/$ns3::EndDeviceLoraPhy"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>EndDeviceState</b>: The current state of the device<br>%Callback signature: ns3::TracedValueCallback::EndDeviceLoraPhy::State
</li>
<li><b>LostPacketBecauseWrongFrequency</b>: Trace source indicating a packet could not be correctly decoded becausethe ED was listening on a different frequency<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>LostPacketBecauseWrongSpreadingFactor</b>: Trace source indicating a packet could not be correctly decoded becausethe ED was listening for a different Spreading Factor<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::LoraPhy</h3>
<ul>
<li><b>LostPacketBecauseInterference</b>: Trace source indicating a packet could not be correctly decoded because of interferingsignals<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>LostPacketBecauseUnderSensitivity</b>: Trace source indicating a packet could not be correctly received becauseits received power is below the sensitivity of the receiver<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet is now being received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating the PHY has finished the reception process for a packet<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>ReceivedPacket</b>: Trace source indicating a packet was correctly received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>StartSending</b>: Trace source indicating the PHY layerhas begun the sending process for a packet<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 400 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EndDeviceLorawanMac

<h3>Config Paths</h3>

ns3::EndDeviceLorawanMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Mac/$ns3::EndDeviceLorawanMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DRControl</b>: Whether to request the NS to control this device's Data Rate
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataRate</b>: Data Rate currently employed by this end device
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableEDDataRateAdaptation</b>: Whether the End Device should up its Data Rate in case it doesn't get a reply from the NS.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MType</b>: Specify type of message will be sent by this ED.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns37lorawan16LorawanMacHeader5MTypeE></li>
    <li>Underlying type: \p Unconfirmed|Confirmed</li>
    <li>Initial value: Unconfirmed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxTransmissions</b>: Maximum number of transmissions for a packet
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>AggregatedDutyCycle</b>: Aggregate duty cycle, in fraction form, this end device must respect<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
<li><b>DataRate</b>: Data Rate currently employed by this end device<br>%Callback signature: ns3::TracedValueCallback::uint8_t
</li>
<li><b>LastKnownGatewayCount</b>: Last known number of gateways able to listen to this end device<br>%Callback signature: ns3::TracedValueCallback::Int
</li>
<li><b>LastKnownLinkMargin</b>: Last known demodulation margin in communications between this end device and a gateway<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
<li><b>RequiredTransmissions</b>: Total number of transmissions required to deliver this packet<br>%Callback signature: ns3::TracedValueCallback::uint8_t
</li>
<li><b>TxPower</b>: Transmission power currently employed by this end device<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<h3>TraceSources defined in parent class ns3::LorawanMac</h3>
<ul>
<li><b>CannotSendBecauseDutyCycle</b>: Trace source indicating a packet could not be sent immediately because of duty cycle limitations<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>ReceivedPacket</b>: Trace source indicating a packet was correctly received at the MAC layer<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>SentNewPacket</b>: Trace source indicating a new packet arrived at the MAC layer<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 696 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EnergyHarvester

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EnergyHarvesterContainer

<h3>Config Paths</h3>

ns3::EnergyHarvesterContainer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::EnergyHarvesterContainer"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EnergySource

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EnergySourceContainer

<h3>Config Paths</h3>

ns3::EnergySourceContainer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::EnergySourceContainer"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ErlangRandomVariable

<h3>Config Paths</h3>

ns3::ErlangRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::ErlangRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ErlangRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>K</b>: The k value for the Erlang distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Lambda</b>: The lambda value for the Erlang distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ErrorChannel

<h3>Config Paths</h3>

ns3::ErrorChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/ChannelList/[i]/$ns3::ErrorChannel"</li>
<li>"/ChannelList/[i]/$ns3::SimpleChannel/$ns3::ErrorChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::SimpleChannel</h3>
<ul>
<li><b>Delay</b>: Transmission delay through the channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ErrorModel

<h3>Config Paths</h3>

ns3::ErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EthernetHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EthernetTrailer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ExponentialRandomVariable

<h3>Config Paths</h3>

ns3::ExponentialRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::ExponentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ExponentialRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mean</b>: The mean of the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FifoQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 1000p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1096 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FileAggregator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1008 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FixedRoomPositionAllocator

<h3>Config Paths</h3>

ns3::FixedRoomPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::FixedRoomPositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FixedRssLossModel

<h3>Config Paths</h3>

ns3::FixedRssLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Rss</b>: The fixed receiver Rss.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -150</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FlowIdTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Forwarder

<h3>Config Paths</h3>

ns3::Forwarder is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::Forwarder"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqCobaltFlow

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueDiscClass</h3>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqCobaltQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BlueThreshold</b>: The Threshold after which Blue is enabled
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CeThreshold</b>: The FqCobalt CE threshold for marking packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Decrement</b>: Pdrop decrement Value
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.000244141</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSetAssociativeHash</b>: Enable/Disable Set Associative Hash
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Increment</b>: Pdrop increment value
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.00390625</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Interval</b>: The CoDel algorithm interval for each FqCobalt queue
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: 100ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 10240p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Pdrop</b>: Marking Probability
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SetWays</b>: The size of a set of queues (used by set associative hash)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Target</b>: The CoDel algorithm target queue delay for each FqCobalt queue
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: 5ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1440 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqCoDelFlow

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueDiscClass</h3>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqCoDelQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CeThreshold</b>: The FqCoDel CE threshold for marking packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSetAssociativeHash</b>: Enable/Disable Set Associative Hash
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Interval</b>: The CoDel algorithm interval for each FQCoDel queue
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: 100ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 10240p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SetWays</b>: The size of a set of queues (used by set associative hash)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Target</b>: The CoDel algorithm target queue delay for each FQCoDel queue
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: 5ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1416 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqPieFlow

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueDiscClass</h3>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqPieQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>A</b>: Value of alpha
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>B</b>: Value of beta
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CeThreshold</b>: The FqPie CE threshold for marking packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DequeueThreshold</b>: Minimum queue size in bytes before dequeue rate is measured
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16384</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSetAssociativeHash</b>: Enable/Disable Set Associative Hash
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MarkEcnThreshold</b>: ECN marking threshold (RFC 8033 suggests 0.1 (i.e., 10%) default)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxBurstAllowance</b>: Current max burst allowance before random drop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 10240p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanPktSize</b>: Average of packet size
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDelayReference</b>: Desired queue delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SetWays</b>: The size of a set of queues (used by set associative hash)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Supdate</b>: Start time of the update timer
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Tupdate</b>: Time period to calculate drop probability
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseCapDropAdjustment</b>: Enable/Disable Cap Drop Adjustment feature mentioned in RFC 8033
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseDequeueRateEstimator</b>: Enable/Disable usage of Dequeue Rate Estimator
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseDerandomization</b>: Enable/Disable Derandomization feature mentioned in RFC 8033
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1424 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FriisPropagationLossModel

<h3>Config Paths</h3>

ns3::FriisPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The carrier frequency (in Hz) at which propagation occurs (default is 5.15 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5.15e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinLoss</b>: The minimum value (dB) of the total loss, used at short ranges.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SystemLoss</b>: The system loss
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GammaRandomVariable

<h3>Config Paths</h3>

ns3::GammaRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::GammaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::GammaRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: The alpha value for the gamma distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Beta</b>: The beta value for the gamma distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GatewayLoraPhy

<h3>Config Paths</h3>

ns3::GatewayLoraPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Phy/$ns3::GatewayLoraPhy"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>LostPacketBecauseNoMoreReceivers</b>: Trace source indicating a packet could not be correctly received becausethere are no more demodulators available<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>NoReceptionBecauseTransmitting</b>: Trace source indicating a packet could not be correctly received becausethe GW is in transmission mode<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>OccupiedReceptionPaths</b>: Number of currently occupied reception paths<br>%Callback signature: ns3::TracedValueCallback::Int
</li>
</ul>
<h3>TraceSources defined in parent class ns3::LoraPhy</h3>
<ul>
<li><b>LostPacketBecauseInterference</b>: Trace source indicating a packet could not be correctly decoded because of interferingsignals<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>LostPacketBecauseUnderSensitivity</b>: Trace source indicating a packet could not be correctly received becauseits received power is below the sensitivity of the receiver<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet is now being received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating the PHY has finished the reception process for a packet<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>ReceivedPacket</b>: Trace source indicating a packet was correctly received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>StartSending</b>: Trace source indicating the PHY layerhas begun the sending process for a packet<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 416 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GatewayLorawanMac

<h3>Config Paths</h3>

ns3::GatewayLorawanMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Mac/$ns3::GatewayLorawanMac"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::LorawanMac</h3>
<ul>
<li><b>CannotSendBecauseDutyCycle</b>: Trace source indicating a packet could not be sent immediately because of duty cycle limitations<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>ReceivedPacket</b>: Trace source indicating a packet was correctly received at the MAC layer<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>SentNewPacket</b>: Trace source indicating a new packet arrived at the MAC layer<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 368 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GaussMarkovMobilityModel

<h3>Config Paths</h3>

ns3::GaussMarkovMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: A constant representing the tunable parameter in the Gauss-Markov model.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Bounds</b>: Bounds of the area to cruise.
  <ul>
    <li>Set with class:  \ref ns3::BoxValue</li>
    <li>Underlying type: \p Box</li>
    <li>Initial value: -100|100|-100|100|0|100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanDirection</b>: A random variable used to assign the average direction.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.283185307]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanPitch</b>: A random variable used to assign the average pitch.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=0.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanVelocity</b>: A random variable used to assign the average velocity.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NormalDirection</b>: A gaussian random variable used to calculate the next direction value.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NormalRandomVariable></li>
    <li>Initial value: ns3::NormalRandomVariable[Mean=0.0|Variance=1.0|Bound=10.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NormalPitch</b>: A gaussian random variable used to calculate the next pitch value.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NormalRandomVariable></li>
    <li>Initial value: ns3::NormalRandomVariable[Mean=0.0|Variance=1.0|Bound=10.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NormalVelocity</b>: A gaussian random variable used to calculate the next velocity value.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NormalRandomVariable></li>
    <li>Initial value: ns3::NormalRandomVariable[Mean=0.0|Variance=1.0|Bound=10.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TimeStep</b>: Change current direction and speed after moving for this time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GenericBatteryModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BatteryType</b>: Indicates the battery type used by the model
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns318GenericBatteryTypeE></li>
    <li>Underlying type: \p LION_LIPO|NIMH_NICD|LEADACID</li>
    <li>Initial value: LION_LIPO</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CutoffVoltage</b>: The voltage where the battery is considered depleted (V).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ExponentialCapacity</b>: (Q_exp) Cell Capacity at the end of the exponential zone (Ah).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.39</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ExponentialVoltage</b>: (V_exp) Cell voltage at the end of the exponential zone (V).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.75</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FullVoltage</b>: (Q_full) The voltage of the cell when fully charged (V).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4.18</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InternalResistance</b>: (R) Internal resistance of the cell (Ohms)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.083</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LowBatteryThreshold</b>: Low battery threshold for generic battery model.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxCapacity</b>: (Q) The maximum capacity of the cell (Ah).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.45</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NominalCapacity</b>: (Q_nom) Cell capacity at the end of the nominal zone (Ah)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NominalVoltage</b>: (V_nom) Nominal voltage of the cell (V).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.59</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TypicalDischargeCurrent</b>: Typical discharge current used in manufacters datasheets (A)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.33</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy of generic battery<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GlobalRouter

<h3>Config Paths</h3>

ns3::GlobalRouter is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::GlobalRouter"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GnuplotAggregator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 568 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GridBuildingAllocator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DeltaX</b>: The x space between buildings.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DeltaY</b>: The y space between buildings.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GridWidth</b>: The number of objects laid out on a line.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Height</b>: The height of the building (roof level)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LayoutType</b>: The type of layout.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns321GridPositionAllocator10LayoutTypeE></li>
    <li>Underlying type: \p RowFirst|ColumnFirst</li>
    <li>Initial value: RowFirst</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LengthX</b>: The length of the wall of each building along the X axis.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LengthY</b>: The length of the wall of each building along the X axis.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinX</b>: The x coordinate where the grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinY</b>: The y coordinate where the grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GridPositionAllocator

<h3>Config Paths</h3>

ns3::GridPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::GridPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DeltaX</b>: The x space between objects.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DeltaY</b>: The y space between objects.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GridWidth</b>: The number of objects laid out on a line.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LayoutType</b>: The type of layout.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns321GridPositionAllocator10LayoutTypeE></li>
    <li>Underlying type: \p RowFirst|ColumnFirst</li>
    <li>Initial value: RowFirst</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinX</b>: The x coordinate where the grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinY</b>: The y coordinate where the grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: The z coordinate of all the positions allocated.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HeapScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HexGridPositionAllocator

<h3>Config Paths</h3>

ns3::HexGridPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::HexGridPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Radius</b>: The radius of a single hexagon
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 6000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HierarchicalMobilityModel

<h3>Config Paths</h3>

ns3::HierarchicalMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::HierarchicalMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Child</b>: The child mobility model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::MobilityModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Parent</b>: The parent mobility model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::MobilityModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HybridBuildingsPropagationLossModel

<h3>Config Paths</h3>

ns3::HybridBuildingsPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CitySize</b>: Dimension of the city
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns38CitySizeE></li>
    <li>Underlying type: \p Small|Medium|Large</li>
    <li>Initial value: Large</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Environment</b>: Environment Scenario
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns315EnvironmentTypeE></li>
    <li>Underlying type: \p Urban|SubUrban|OpenAreas</li>
    <li>Initial value: Urban</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Los2NlosThr</b>:  Threshold from LoS to NLoS in ITU 1411 [m].
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 200</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RooftopLevel</b>: The height of the rooftop level in meters
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:90</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::BuildingsPropagationLossModel</h3>
<ul>
<li><b>InternalWallLoss</b>: Additional loss for each internal wall [dB]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaExtWalls</b>: Standard deviation of the normal distribution used to calculate the shadowing due to ext walls
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaIndoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for indoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaOutdoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for outdoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4DestinationUnreachable

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4Echo

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4L4Protocol

<h3>Config Paths</h3>

ns3::Icmpv4L4Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Icmpv4L4Protocol"</li>
<li>"/NodeList/[i]/$ns3::Icmpv4L4Protocol"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4TimeExceeded

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6DestinationUnreachable

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6Echo

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6L4Protocol

<h3>Config Paths</h3>

ns3::Icmpv6L4Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DAD</b>: Always do DAD check.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DadTimeout</b>: Duplicate Address Detection (DAD) timeout
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelayFirstProbe</b>: Neighbor Discovery node constants: delay for the first probe.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxMulticastSolicit</b>: Neighbor Discovery node constants: max multicast solicitations.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxUnicastSolicit</b>: Neighbor Discovery node constants: max unicast solicitations.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReachableTime</b>: Neighbor Discovery node constants: reachable time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RetransmissionTime</b>: Neighbor Discovery node constants: retransmission timer.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsInitialRetransmissionTime</b>: Multicast RS initial retransmission time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsMaxRetransmissionCount</b>: Multicast RS maximum retransmission count (0 means unbound). Note: RFC 7559 suggest a zero value (infinite). The default is 4 to avoid non-terminating simulations.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsMaxRetransmissionDuration</b>: Multicast RS maximum retransmission duration (0 means unbound).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsMaxRetransmissionTime</b>: Multicast RS maximum retransmission time (0 means unbound).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3.6e+12ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsRetransmissionJitter</b>: Multicast RS retransmission randomization quantity
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=-0.1|Max=0.1]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SolicitationJitter</b>: The jitter in ms a node is allowed to wait before sending any solicitation. Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and SolicitationJitter
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=10.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6NA

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6NS

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionLinkLayerAddress

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionMtu

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionPrefixInformation

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionRedirected

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6ParameterError

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6RA

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6Redirection

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6RS

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6TimeExceeded

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6TooBig

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::IpL4Protocol

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future Ipv4 devices.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StrongEndSystemModel</b>: Reject packets for an address not configured on the interface they're coming from (RFC1122, section 3.3.4.2).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>WeakEsModel</b>: RFC1122 term for whether host accepts datagram with a dest. address on another interface
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4GlobalRouting

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RandomEcmpRouting</b>: Set to true if packets are randomly routed among ECMP; set to false for using only one route consistently
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RespondToInterfaceEvents</b>: Set to true if you want to dynamically recompute the global routes upon Interface notification events (up/down, or add/remove address)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4Interface

<h3>Config Paths</h3>

ns3::Ipv4Interface is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv4L3Protocol/InterfaceList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ArpCache</b>: The arp cache for this ipv4 interface
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ArpCache></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4L3Protocol

<h3>Config Paths</h3>

ns3::Ipv4L3Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv4L3Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DefaultTtl</b>: The TTL value set by default on all outgoing packets generated on this node.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DuplicateExpire</b>: Expiration delay for duplicate cache entries
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableDuplicatePacketDetection</b>: Enable multicast duplicate packet detection based on RFC 6621
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InterfaceList</b>: The set of Ipv4 interfaces associated to this Ipv4 stack.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv4Interface></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PurgeExpiredPeriod</b>: Time between purges of expired duplicate packet entries, 0 means never purge
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Ipv4</h3>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future Ipv4 devices.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StrongEndSystemModel</b>: Reject packets for an address not configured on the interface they're coming from (RFC1122, section 3.3.4.2).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>WeakEsModel</b>: RFC1122 term for whether host accepts datagram with a dest. address on another interface
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop ipv4 packet<br>%Callback signature: ns3::Ipv4L3Protocol::DropTracedCallback
</li>
<li><b>LocalDeliver</b>: An IPv4 packet was received by/for this node, and it is being forward up the stack<br>%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback
</li>
<li><b>MulticastForward</b>: A multicast IPv4 packet was received by this node and is being forwarded to another node<br>%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback
</li>
<li><b>Rx</b>: Receive ipv4 packet from incoming interface.<br>%Callback signature: ns3::Ipv4L3Protocol::TxRxTracedCallback
</li>
<li><b>SendOutgoing</b>: A newly-generated packet by this node is about to be queued for transmission<br>%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback
</li>
<li><b>Tx</b>: Send ipv4 packet to outgoing interface.<br>%Callback signature: ns3::Ipv4L3Protocol::TxRxTracedCallback
</li>
<li><b>UnicastForward</b>: A unicast IPv4 packet was received by this node and is being forwarded to another node<br>%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback
</li>
</ul>
<b>Size</b> of this type is 648 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4ListRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4PacketFilter

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4PacketProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The packet plus its IPv4 object and interface that serve as the output for this probe<br>%Callback signature: ns3::Ipv4L3Protocol::TxRxTracedCallback
</li>
<li><b>OutputBytes</b>: The number of bytes in the packet<br>%Callback signature: ns3::Packet::SizeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4RawSocketFactory

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4RawSocketImpl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>IcmpFilter</b>: Any icmp header whose type field matches a bit in this filter is dropped. Type must be less than 32.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpHeaderInclude</b>: Include IP Header information (a.k.a setsockopt (IP_HDRINCL)).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: Protocol number to match.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 224 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4RoutingProtocol

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4StaticRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future IPv6 devices.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MtuDiscover</b>: If disabled, every interface will have its MTU set to 1280 bytes.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StrongEndSystemModel</b>: Reject packets for an address not configured on the interface they're coming from (RFC1122, section 3.3.4.2).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6Extension

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionAH

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionAHHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionDemux

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Extensions</b>: The set of IPv6 extensions registered with this demux.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv6Extension></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionDestination

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionDestinationHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionESP

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionESPHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionFragment

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionFragmentHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionHopByHop

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionHopByHopHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionLooseRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionLooseRoutingHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionRoutingDemux

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RoutingExtensions</b>: The set of IPv6 Routing extensions registered with this demux.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv6ExtensionRouting></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionRoutingHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6Interface

<h3>Config Paths</h3>

ns3::Ipv6Interface is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv6L3Protocol/InterfaceList/[i]"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6L3Protocol

<h3>Config Paths</h3>

ns3::Ipv6L3Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv6L3Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DefaultTclass</b>: The TCLASS value set by default on all outgoing packets generated on this node.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DefaultTtl</b>: The TTL value set by default on all outgoing packets generated on this node.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InterfaceList</b>: The set of IPv6 interfaces associated to this IPv6 stack.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv6Interface></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>SendIcmpv6Redirect</b>: Send the ICMPv6 Redirect when appropriate.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Ipv6</h3>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future IPv6 devices.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MtuDiscover</b>: If disabled, every interface will have its MTU set to 1280 bytes.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StrongEndSystemModel</b>: Reject packets for an address not configured on the interface they're coming from (RFC1122, section 3.3.4.2).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop IPv6 packet<br>%Callback signature: ns3::Ipv6L3Protocol::DropTracedCallback
</li>
<li><b>LocalDeliver</b>: An IPv6 packet was received by/for this node, and it is being forward up the stack<br>%Callback signature: ns3::Ipv6L3Protocol::SentTracedCallback
</li>
<li><b>Rx</b>: Receive IPv6 packet from incoming interface.<br>%Callback signature: ns3::Ipv6L3Protocol::TxRxTracedCallback
</li>
<li><b>SendOutgoing</b>: A newly-generated packet by this node is about to be queued for transmission<br>%Callback signature: ns3::Ipv6L3Protocol::SentTracedCallback
</li>
<li><b>Tx</b>: Send IPv6 packet to outgoing interface.<br>%Callback signature: ns3::Ipv6L3Protocol::TxRxTracedCallback
</li>
<li><b>UnicastForward</b>: A unicast IPv6 packet was received by this node and is being forwarded to another node<br>%Callback signature: ns3::Ipv6L3Protocol::SentTracedCallback
</li>
</ul>
<b>Size</b> of this type is 520 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ListRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6Option

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionDemux

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Options</b>: The set of IPv6 options registered with this demux.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv6Option></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionJumbogram

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Option</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionJumbogramHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionPad1

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Option</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionPad1Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionPadn

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Option</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionPadnHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionRouterAlert

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Option</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionRouterAlertHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6PacketFilter

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6PacketProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The packet plus its IPv6 object and interface that serve as the output for this probe<br>%Callback signature: ns3::Ipv6L3Protocol::TxRxTracedCallback
</li>
<li><b>OutputBytes</b>: The number of bytes in the packet<br>%Callback signature: ns3::Packet::SizeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6PmtuCache

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CacheExpiryTime</b>: Validity time for a Path MTU entry. Default is 10 minutes, minimum is 5 minutes.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +3e+11ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6RawSocketFactory

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6RawSocketImpl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Protocol</b>: Protocol number to match.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 264 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6RoutingProtocol

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6StaticRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItuR1238PropagationLossModel

<h3>Config Paths</h3>

ns3::ItuR1238PropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItuR1411LosPropagationLossModel

<h3>Config Paths</h3>

ns3::ItuR1411LosPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The propagation frequency in Hz
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItuR1411NlosOverRooftopPropagationLossModel

<h3>Config Paths</h3>

ns3::ItuR1411NlosOverRooftopPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BuildingSeparation</b>: The separation between buildings
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BuildingsExtend</b>: The distance over which the buildings extend
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CitySize</b>: Dimension of the city
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns38CitySizeE></li>
    <li>Underlying type: \p Small|Medium|Large</li>
    <li>Initial value: Large</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Environment</b>: Environment Scenario
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns315EnvironmentTypeE></li>
    <li>Underlying type: \p Urban|SubUrban|OpenAreas</li>
    <li>Initial value: Urban</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>RooftopLevel</b>: The height of the rooftop level in meters
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:90</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StreetsOrientation</b>: The orientation of streets in degrees [0,90] with respect to the direction of propagation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:90</li>
    <li>Initial value: 45</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StreetsWidth</b>: The width of streets
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1000</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::JakesProcess

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DopplerFrequencyHz</b>: Corresponding doppler frequency[Hz]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:10000</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NumberOfOscillators</b>: The number of oscillators
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 4:1000</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::JakesPropagationLossModel

<h3>Config Paths</h3>

ns3::JakesPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Kun2600MhzPropagationLossModel

<h3>Config Paths</h3>

ns3::Kun2600MhzPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LiIonEnergySource

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ExpCapacity</b>: Cell Capacity at the end of the exponential zone.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ExpCellVoltage</b>: Cell voltage at the end of the exponential zone.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialCellVoltage</b>: Initial (maximum) voltage of the cell (fully charged).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4.05</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InternalResistance</b>: Internal resistance of the cell
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.083</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LiIonEnergyLowBatteryThreshold</b>: Low battery threshold for LiIon energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LiIonEnergySourceInitialEnergyJ</b>: Initial energy stored in basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 31752</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NomCapacity</b>: Cell capacity at the end of the nominal zone.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NominalCellVoltage</b>: Nominal voltage of the cell.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RatedCapacity</b>: Rated capacity of the cell.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.45</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ThresholdVoltage</b>: Minimum threshold voltage to consider the battery depleted.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TypCurrent</b>: Typical discharge current used to fit the curves
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.33</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy at BasicEnergySource.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 264 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LinearLoraTxCurrentModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Eta</b>: The efficiency of the power amplifier.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StandbyCurrent</b>: The current in the STANDBY state (in Watts).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.0014</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Voltage</b>: The supply voltage (in Volts).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ListErrorModel

<h3>Config Paths</h3>

ns3::ListErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::ListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::ListErrorModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ListPositionAllocator

<h3>Config Paths</h3>

ns3::ListPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::ListPositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ListScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LlcSnapHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LogDistancePropagationLossModel

<h3>Config Paths</h3>

ns3::LogDistancePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Exponent</b>: The exponent of the Path Loss propagation model
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReferenceDistance</b>: The distance at which the reference loss is calculated (m)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReferenceLoss</b>: The reference loss at reference distance (dB). (Default is Friis at 1m with 5.15 GHz)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 46.6777</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LogicalLoraChannel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LogicalLoraChannelHelper

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LogNormalRandomVariable

<h3>Config Paths</h3>

ns3::LogNormalRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::LogNormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::LogNormalRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mu</b>: The mu value for the log-normal distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Sigma</b>: The sigma value for the log-normal distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LoopbackNetDevice

<h3>Config Paths</h3>

ns3::LoopbackNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoopbackNetDevice"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LoraChannel

<h3>Config Paths</h3>

ns3::LoraChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PropagationDelayModel</b>: A pointer to the propagation delay model attached to this channel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PropagationDelayModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PropagationLossModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PacketSent</b>: Trace source fired whenever a packet goes out on the channel<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LoraInterferenceHelper

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LoraNetDevice

<h3>Config Paths</h3>

ns3::LoraNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Channel</b>: The channel attached to this device
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LoraChannel></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Mac</b>: The MAC layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LorawanMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LoraPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LoraPhy

<h3>Config Paths</h3>

ns3::LoraPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Phy"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>LostPacketBecauseInterference</b>: Trace source indicating a packet could not be correctly decoded because of interferingsignals<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>LostPacketBecauseUnderSensitivity</b>: Trace source indicating a packet could not be correctly received becauseits received power is below the sensitivity of the receiver<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet is now being received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating the PHY has finished the reception process for a packet<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>ReceivedPacket</b>: Trace source indicating a packet was correctly received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>StartSending</b>: Trace source indicating the PHY layerhas begun the sending process for a packet<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 280 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LoraRadioEnergyModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RxCurrentA</b>: The radio Rx current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.0112</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SleepCurrentA</b>: The radio Sleep current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.5e-06</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StandbyCurrentA</b>: The default radio Standby current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.0014</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxCurrentA</b>: The radio Tx current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.028</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxCurrentModel</b>: A pointer to the attached tx current model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LoraTxCurrentModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the radio device.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LoraTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LoraTxCurrentModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LorawanMac

<h3>Config Paths</h3>

ns3::LorawanMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Mac"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>CannotSendBecauseDutyCycle</b>: Trace source indicating a packet could not be sent immediately because of duty cycle limitations<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>ReceivedPacket</b>: Trace source indicating a packet was correctly received at the MAC layer<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>SentNewPacket</b>: Trace source indicating a new packet arrived at the MAC layer<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 368 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MacCommand

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MapScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MatrixPropagationLossModel

<h3>Config Paths</h3>

ns3::MatrixPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DefaultLoss</b>: The default value for propagation loss, dB.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.79769e+308</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MobilityBuildingInfo

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MobilityModel

<h3>Config Paths</h3>

ns3::MobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MqQueueDisc

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1096 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NakagamiPropagationLossModel

<h3>Config Paths</h3>

ns3::NakagamiPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Distance1</b>: Beginning of the second distance field. Default is 80m.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Distance2</b>: Beginning of the third distance field. Default is 200m.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 200</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErlangRv</b>: Access to the underlying ErlangRandomVariable
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErlangRandomVariable></li>
    <li>Initial value: ns3::ErlangRandomVariable</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GammaRv</b>: Access to the underlying GammaRandomVariable
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::GammaRandomVariable></li>
    <li>Initial value: ns3::GammaRandomVariable</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>m0</b>: m0 for distances smaller than Distance1. Default is 1.5.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>m1</b>: m1 for distances smaller than Distance2. Default is 0.75.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.75</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>m2</b>: m2 for distances greater than Distance2. Default is 0.75.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.75</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NdiscCache

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>UnresolvedQueueSize</b>: Size of the queue for packets pending an NA reply.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetDevice

<h3>Config Paths</h3>

ns3::NetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetDeviceQueue

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 18446744073709551615 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetDeviceQueueInterface

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>NTxQueues</b>: The number of device transmission queues
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:65535</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxQueuesType</b>: The type of transmission queues to be used
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NetDeviceQueue</li>
    <li>Flags: <span class="mlabel">construct</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetworkController

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetworkControllerComponent

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetworkScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>ReceiveWindowOpened</b>: Trace source that is fired when a receive window opportunity happens.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetworkServer

<h3>Config Paths</h3>

ns3::NetworkServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::NetworkServer"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ReceivedPacket</b>: Trace source that is fired when a packet arrives at the Network Server<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetworkStatus

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NeverLosChannelConditionModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NeverLosVehicleChannelConditionModel

<h3>Config Paths</h3>

ns3::NeverLosVehicleChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::NeverLosVehicleChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::NeverLosVehicleChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Node

<h3>Config Paths</h3>

ns3::Node is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ApplicationList</b>: The list of applications associated to this Node.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Application></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>DeviceList</b>: The list of devices associated to this Node.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NetDevice></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Id</b>: The id (unique integer) of this Node.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>SystemId</b>: The systemId of this node: a unique integer used for parallel simulations.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NodeListPriv

<h3>Config Paths</h3>

ns3::NodeListPriv is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>""</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NodeList</b>: The list of all nodes created during the simulation.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Node></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NormalRandomVariable

<h3>Config Paths</h3>

ns3::NormalRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/NormalVelocity"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/NormalDirection"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/NormalPitch"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::NormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::NormalRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bound</b>: The bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e+307</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mean</b>: The mean value for the normal distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Variance</b>: The variance value for the normal distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Object

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ObjectBase

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OhBuildingsPropagationLossModel

<h3>Config Paths</h3>

ns3::OhBuildingsPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::BuildingsPropagationLossModel</h3>
<ul>
<li><b>InternalWallLoss</b>: Additional loss for each internal wall [dB]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaExtWalls</b>: Standard deviation of the normal distribution used to calculate the shadowing due to ext walls
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaIndoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for indoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaOutdoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for outdoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OkumuraHataPropagationLossModel

<h3>Config Paths</h3>

ns3::OkumuraHataPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CitySize</b>: Dimension of the city
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns38CitySizeE></li>
    <li>Underlying type: \p Small|Medium|Large</li>
    <li>Initial value: Large</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Environment</b>: Environment Scenario
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns315EnvironmentTypeE></li>
    <li>Underlying type: \p Urban|SubUrban|OpenAreas</li>
    <li>Initial value: Urban</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The propagation frequency in Hz
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OneShotSender

<h3>Config Paths</h3>

ns3::OneShotSender is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OneShotSender"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OnOffApplication

<h3>Config Paths</h3>

ns3::OnOffApplication is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DataRate</b>: The data rate in on state.
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 500000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSeqTsSizeHeader</b>: Enable use of SeqTsSizeHeader for sequence number and timestamp
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Local</b>: The Address on which to bind the socket. If not set, it is generated automatically.
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxBytes</b>: The total number of bytes to send. Once these bytes are sent, no packet is sent again, even in on state. The value zero means that there is no limit.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint64_t 0:18446744073709551615</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>OffTime</b>: A RandomVariableStream used to pick the duration of the 'Off' state.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>OnTime</b>: A RandomVariableStream used to pick the duration of the 'On' state.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSize</b>: The size of packets sent in on state
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 512</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type of protocol to use. This should be a subclass of ns3::SocketFactory
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::UdpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
<li><b>TxWithSeqTsSize</b>: A new packet is created with SeqTsSizeHeader<br>%Callback signature: ns3::PacketSink::SeqTsSizeCallback
</li>
</ul>
<b>Size</b> of this type is 368 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OutdoorPositionAllocator

<h3>Config Paths</h3>

ns3::OutdoorPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxAttempts</b>: Maximum number of attempts for the rejection sampling before giving up.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: A random variable which represents the z coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketBurst

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketFilter

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The packet that serve as the output for this probe<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>OutputBytes</b>: The number of bytes in the packet<br>%Callback signature: ns3::Packet::SizeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSink

<h3>Config Paths</h3>

ns3::PacketSink is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::PacketSink"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EnableSeqTsSizeHeader</b>: Enable optional header tracing of SeqTsSizeHeader
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Local</b>: The Address on which to Bind the rx socket.
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type id of the protocol to use for the rx socket.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::UdpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
<li><b>RxWithSeqTsSize</b>: A packet with SeqTsSize header has been received<br>%Callback signature: ns3::PacketSink::SeqTsSizeCallback
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocket

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RcvBufSize</b>: PacketSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop packet due to receive buffer overflow<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 328 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocketClient

<h3>Config Paths</h3>

ns3::PacketSocketClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::PacketSocketClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSize</b>: Size of packets generated (bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Priority</b>: Priority assigned to the packets generated.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A packet has been sent<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 232 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocketFactory

<h3>Config Paths</h3>

ns3::PacketSocketFactory is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::PacketSocketFactory"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocketServer

<h3>Config Paths</h3>

ns3::PacketSocketServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::PacketSocketServer"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocketTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ParetoRandomVariable

<h3>Config Paths</h3>

ns3::ParetoRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::ParetoRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ParetoRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream (if non-zero).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Scale</b>: The scale parameter for the Pareto distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Shape</b>: The shape parameter for the Pareto distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PbbPacket

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PcapFileWrapper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CaptureSize</b>: Maximum length of captured packets (cf. pcap snaplen)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NanosecMode</b>: Whether packet timestamps in the PCAP file are nanoseconds or microseconds(default).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 632 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PeriodicSender

<h3>Config Paths</h3>

ns3::PeriodicSender is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::PeriodicSender"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: The interval between packet sends of this app
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PfifoFastQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc.
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 1000p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1096 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PieQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>A</b>: Value of alpha
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ActiveThreshold</b>: Threshold for activating PIE (disabled by default)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>B</b>: Value of beta
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CeThreshold</b>: The FqPie CE threshold for marking packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DequeueThreshold</b>: Minimum queue size in bytes before dequeue rate is measured
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16384</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MarkEcnThreshold</b>: ECN marking threshold (RFC 8033 suggests 0.1 (i.e., 10%) default)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxBurstAllowance</b>: Current max burst allowance before random drop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 25p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanPktSize</b>: Average of packet size
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDelayReference</b>: Desired queue delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Supdate</b>: Start time of the update timer
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Tupdate</b>: Time period to calculate drop probability
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseCapDropAdjustment</b>: Enable/Disable Cap Drop Adjustment feature mentioned in RFC 8033
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseDequeueRateEstimator</b>: Enable/Disable usage of Dequeue Rate Estimator
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseDerandomization</b>: Enable/Disable Derandomization feature mentioned in RFC 8033
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1312 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PointToPointChannel

<h3>Config Paths</h3>

ns3::PointToPointChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/ChannelList/[i]/$ns3::PointToPointChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Delay</b>: Propagation delay through the channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TxRxPointToPoint</b>: Trace source indicating transmission of packet from the PointToPointChannel, used by the Animation interface.<br>%Callback signature: ns3::PointToPointChannel::TxRxAnimationCallback
</li>
</ul>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PointToPointNetDevice

<h3>Config Paths</h3>

ns3::PointToPointNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Address</b>: The MAC address of this device.
  <ul>
    <li>Set with class:  \ref ns3::Mac48AddressValue</li>
    <li>Underlying type: \p Mac48Address</li>
    <li>Initial value: ff:ff:ff:ff:ff:ff</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataRate</b>: The default data rate for point to point links
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 32768bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InterframeGap</b>: The time to wait between packet (frame) transmissions
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<Packet>></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 464 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PositionAllocator

<h3>Config Paths</h3>

ns3::PositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PppHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PrioQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Priomap</b>: The priority to band mapping.
  <ul>
    <li>Set with class:  \ref ns3::PriomapValue</li>
    <li>Underlying type: \p Priomap</li>
    <li>Initial value: 1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PriorityQueueScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ProbabilisticV2vHighwayChannelConditionModel

<h3>Config Paths</h3>

ns3::ProbabilisticV2vHighwayChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Density</b>: Specifies the density of the vehicles in the scenario.It can be set to Low, Medium or High.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns329ThreeGppChannelConditionModel14VehicleDensityE></li>
    <li>Underlying type: \p Low|Medium|High</li>
    <li>Initial value: Low</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ProbabilisticV2vUrbanChannelConditionModel

<h3>Config Paths</h3>

ns3::ProbabilisticV2vUrbanChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Density</b>: Specifies the density of the vehicles in the scenario.It can be set to Low, Medium or High.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns329ThreeGppChannelConditionModel14VehicleDensityE></li>
    <li>Underlying type: \p Low|Medium|High</li>
    <li>Initial value: Low</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Probe

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PropagationDelayModel

<h3>Config Paths</h3>

ns3::PropagationDelayModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PropagationLossModel

<h3>Config Paths</h3>

ns3::PropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Queue<Packet>

<h3>Config Paths</h3>

ns3::Queue<Packet> is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/TxQueue"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Queue<QueueDiscItem>

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QueueBase

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1096 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QueueDiscClass

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QueueLimits

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RadiotapHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomBoxPositionAllocator

<h3>Config Paths</h3>

ns3::RandomBoxPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: A random variable which represents the z coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomBuildingPositionAllocator

<h3>Config Paths</h3>

ns3::RandomBuildingPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBuildingPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>WithReplacement</b>: If true, the building will be randomly selected with replacement. If false, no replacement will occur, until the list of buildings to select becomes empty, at which point it will be filled again with the list of all buildings.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomDirection2dMobilityModel

<h3>Config Paths</h3>

ns3::RandomDirection2dMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bounds</b>: The 2d bounding area
  <ul>
    <li>Set with class:  \ref ns3::RectangleValue</li>
    <li>Underlying type: \p Rectangle</li>
    <li>Initial value: -100|100|-100|100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Pause</b>: A random variable to control the pause (s).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=2.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Speed</b>: A random variable to control the speed (m/s).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=1.0|Max=2.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomDiscPositionAllocator

<h3>Config Paths</h3>

ns3::RandomDiscPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Rho</b>: A random variable which represents the radius of a position in a random disc.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=200.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Theta</b>: A random variable which represents the angle (gradients) of a position in a random disc.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.2830]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X</b>: The x coordinate of the center of the random position disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Y</b>: The y coordinate of the center of the random position disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: The z coordinate of all the positions in the disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomPropagationDelayModel

<h3>Config Paths</h3>

ns3::RandomPropagationDelayModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Variable</b>: The random variable which generates random delays (s).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomPropagationLossModel

<h3>Config Paths</h3>

ns3::RandomPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Variable</b>: The random variable used to pick a loss every time CalcRxPower is invoked.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomRectanglePositionAllocator

<h3>Config Paths</h3>

ns3::RandomRectanglePositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random rectangle.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random rectangle.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: The z coordinate of all the positions allocated.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomRoomPositionAllocator

<h3>Config Paths</h3>

ns3::RandomRoomPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRoomPositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomVariableStream

<h3>Config Paths</h3>

ns3::RandomVariableStream is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomWalk2dMobilityModel

<h3>Config Paths</h3>

ns3::RandomWalk2dMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bounds</b>: Bounds of the area to cruise.
  <ul>
    <li>Set with class:  \ref ns3::RectangleValue</li>
    <li>Underlying type: \p Rectangle</li>
    <li>Initial value: 0|100|0|100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Direction</b>: A random variable used to pick the direction (radians).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.283184]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Distance</b>: Change current direction and speed after moving for this distance.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mode</b>: The mode indicates the condition used to change the current speed and direction
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns325RandomWalk2dMobilityModel4ModeE></li>
    <li>Underlying type: \p Distance|Time</li>
    <li>Initial value: Distance</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Speed</b>: A random variable used to pick the speed (m/s).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=2.0|Max=4.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Time</b>: Change current direction and speed after moving for this delay.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomWalk2dOutdoorMobilityModel

<h3>Config Paths</h3>

ns3::RandomWalk2dOutdoorMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bounds</b>: Bounds of the area to cruise.
  <ul>
    <li>Set with class:  \ref ns3::RectangleValue</li>
    <li>Underlying type: \p Rectangle</li>
    <li>Initial value: 0|100|0|100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Direction</b>: A random variable used to pick the direction (radians).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.283184]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Distance</b>: Change current direction and speed after moving for this distance.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxIterations</b>: Maximum number of attempts to find an alternative next positionif the original one is inside a building.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mode</b>: The mode indicates the condition used to change the current speed and direction
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns332RandomWalk2dOutdoorMobilityModel4ModeE></li>
    <li>Underlying type: \p Distance|Time</li>
    <li>Initial value: Distance</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Speed</b>: A random variable used to pick the speed (m/s).The default value is taken from Figure 1 of the paperHenderson, L.F., 1971. The statistics of crowd fluids. nature, 229(5284), p.381.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::NormalRandomVariable[Mean=1.53|Variance=0.040401]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Time</b>: Change current direction and speed after moving for this delay.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Tolerance</b>: Tolerance for the intersection point with buildings (m).It represents a small distance from where the building limitis actually placed, for example to represent a sidewalk.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e-06</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomWaypointMobilityModel

<h3>Config Paths</h3>

ns3::RandomWaypointMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Pause</b>: A random variable used to pick the pause of a random waypoint model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=2.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PositionAllocator</b>: The position model used to pick a destination point.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PositionAllocator></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Speed</b>: A random variable used to pick the speed of a random waypoint model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.3|Max=0.7]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RangePropagationLossModel

<h3>Config Paths</h3>

ns3::RangePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxRange</b>: Maximum Transmission Range (meters)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 250</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RateErrorModel

<h3>Config Paths</h3>

ns3::RateErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ErrorRate</b>: The error rate.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErrorUnit</b>: The error unit
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns314RateErrorModel9ErrorUnitE></li>
    <li>Underlying type: \p ERROR_UNIT_BIT|ERROR_UNIT_BYTE|ERROR_UNIT_PACKET</li>
    <li>Initial value: ERROR_UNIT_BYTE</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RanVar</b>: The decision variable attached to this error model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RealtimeSimulatorImpl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>HardLimit</b>: Maximum acceptable real-time jitter (used in conjunction with SynchronizationMode=HardLimit)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SynchronizationMode</b>: What to do if the simulation cannot keep up with real time.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns321RealtimeSimulatorImpl19SynchronizationModeE></li>
    <li>Underlying type: \p BestEffort|HardLimit</li>
    <li>Initial value: BestEffort</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ReceiveListErrorModel

<h3>Config Paths</h3>

ns3::ReceiveListErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::ReceiveListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::ReceiveListErrorModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RedQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ARED</b>: True to enable ARED
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AdaptMaxP</b>: True to adapt m_curMaxP
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Alpha</b>: Increment parameter for m_curMaxP in ARED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.01</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Beta</b>: Decrement parameter for m_curMaxP in ARED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.9</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Bottom</b>: Lower bound for m_curMaxP in ARED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FengAdaptive</b>: True to enable Feng's Adaptive RED
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FengAlpha</b>: Decrement parameter for m_curMaxP in Feng's Adaptive RED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>FengBeta</b>: Increment parameter for m_curMaxP in Feng's Adaptive RED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Gentle</b>: True to increases dropping probability slowly when average queue exceeds maxthresh
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IdlePktSize</b>: Average packet size used during idle times. Used when m_cautions = 3
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Interval</b>: Time interval to update m_curMaxP
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LInterm</b>: The maximum probability of dropping a packet
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LastSet</b>: Store the last time m_curMaxP was updated
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LinkBandwidth</b>: The RED link bandwidth
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 1500000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LinkDelay</b>: The RED link delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 25p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxTh</b>: Maximum average length threshold in packets/bytes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanPktSize</b>: Average of packet size
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinTh</b>: Minimum average length threshold in packets/bytes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NLRED</b>: True to enable Nonlinear RED
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Ns1Compat</b>: NS-1 compatibility
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>QW</b>: Queue weight related to the exponential weighted moving average (EWMA)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.002</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Rtt</b>: Round Trip Time to be considered while automatically setting m_bottom
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TargetDelay</b>: Target average queuing delay in ARED
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Top</b>: Upper bound for m_curMaxP in ARED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseHardDrop</b>: True to always drop packets above max threshold
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Wait</b>: True for waiting between dropped packets
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1376 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Rip

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>GarbageCollectionDelay</b>: The delay to delete an expired route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.2e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LinkDownValue</b>: Value for link down in count to infinity.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxTriggeredCooldown</b>: Max cooldown delay after a Triggered Update.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinTriggeredCooldown</b>: Min cooldown delay after a Triggered Update.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SplitHorizon</b>: Split Horizon strategy.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns33Rip18SplitHorizonType_eE></li>
    <li>Underlying type: \p NoSplitHorizon|SplitHorizon|PoisonReverse</li>
    <li>Initial value: PoisonReverse</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartupDelay</b>: Maximum random delay for protocol startup (send route requests).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TimeoutDelay</b>: The delay to invalidate a route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.8e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UnsolicitedRoutingUpdate</b>: The time between two Unsolicited Routing Updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 336 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipNg

<h3>Config Paths</h3>

ns3::RipNg is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::RipNg"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>GarbageCollectionDelay</b>: The delay to delete an expired route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.2e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LinkDownValue</b>: Value for link down in count to infinity.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxTriggeredCooldown</b>: Max cooldown delay after a Triggered Update.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinTriggeredCooldown</b>: Min cooldown delay after a Triggered Update.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SplitHorizon</b>: Split Horizon strategy.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns35RipNg18SplitHorizonType_eE></li>
    <li>Underlying type: \p NoSplitHorizon|SplitHorizon|PoisonReverse</li>
    <li>Initial value: PoisonReverse</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartupDelay</b>: Maximum random delay for protocol startup (send route requests).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TimeoutDelay</b>: The delay to invalidate a route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.8e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UnsolicitedRoutingUpdate</b>: The time between two Unsolicited Routing Updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 328 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipNgHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipNgRte

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipRte

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RttEstimator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>InitialEstimation</b>: Initial RTT estimate
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RttMeanDeviation

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: Gain used in estimating the RTT, must be 0 <= alpha <= 1
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Beta</b>: Gain used in estimating the RTT variation, must be 0 <= beta <= 1
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RttEstimator</h3>
<ul>
<li><b>InitialEstimation</b>: Initial RTT estimate
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RvBatteryModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RvBatteryModelAlphaValue</b>: RV battery model alpha value.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 35220</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RvBatteryModelBetaValue</b>: RV battery model beta value.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.637</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RvBatteryModelCutoffVoltage</b>: RV battery model cutoff voltage.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RvBatteryModelLowBatteryThreshold</b>: Low battery threshold.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RvBatteryModelNumOfTerms</b>: The number of terms of the infinite sum for estimating battery level.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RvBatteryModelOpenCircuitVoltage</b>: RV battery model open circuit voltage.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RvBatteryModelPeriodicEnergyUpdateInterval</b>: RV battery model sampling interval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RvBatteryModelBatteryLevel</b>: RV battery model battery level.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
<li><b>RvBatteryModelBatteryLifetime</b>: RV battery model battery lifetime.<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SameRoomPositionAllocator

<h3>Config Paths</h3>

ns3::SameRoomPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::SameRoomPositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Scheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SeqTsEchoHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SeqTsHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SeqTsSizeHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SequentialRandomVariable

<h3>Config Paths</h3>

ns3::SequentialRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::SequentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::SequentialRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Consecutive</b>: The number of times each member of the sequence is repeated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Increment</b>: The sequence random variable increment.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=1]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Max</b>: One more than the last value of the sequence.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Min</b>: The first value of the sequence.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleChannel

<h3>Config Paths</h3>

ns3::SimpleChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/ChannelList/[i]/$ns3::SimpleChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Delay</b>: Transmission delay through the channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleDeviceEnergyModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the radio device.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleEndDeviceLoraPhy

<h3>Config Paths</h3>

ns3::SimpleEndDeviceLoraPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Phy/$ns3::EndDeviceLoraPhy/$ns3::SimpleEndDeviceLoraPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Phy/$ns3::SimpleEndDeviceLoraPhy"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::EndDeviceLoraPhy</h3>
<ul>
<li><b>EndDeviceState</b>: The current state of the device<br>%Callback signature: ns3::TracedValueCallback::EndDeviceLoraPhy::State
</li>
<li><b>LostPacketBecauseWrongFrequency</b>: Trace source indicating a packet could not be correctly decoded becausethe ED was listening on a different frequency<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>LostPacketBecauseWrongSpreadingFactor</b>: Trace source indicating a packet could not be correctly decoded becausethe ED was listening for a different Spreading Factor<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::LoraPhy</h3>
<ul>
<li><b>LostPacketBecauseInterference</b>: Trace source indicating a packet could not be correctly decoded because of interferingsignals<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>LostPacketBecauseUnderSensitivity</b>: Trace source indicating a packet could not be correctly received becauseits received power is below the sensitivity of the receiver<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet is now being received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating the PHY has finished the reception process for a packet<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>ReceivedPacket</b>: Trace source indicating a packet was correctly received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>StartSending</b>: Trace source indicating the PHY layerhas begun the sending process for a packet<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 400 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleGatewayLoraPhy

<h3>Config Paths</h3>

ns3::SimpleGatewayLoraPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Phy/$ns3::GatewayLoraPhy/$ns3::SimpleGatewayLoraPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Phy/$ns3::SimpleGatewayLoraPhy"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::GatewayLoraPhy</h3>
<ul>
<li><b>LostPacketBecauseNoMoreReceivers</b>: Trace source indicating a packet could not be correctly received becausethere are no more demodulators available<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>NoReceptionBecauseTransmitting</b>: Trace source indicating a packet could not be correctly received becausethe GW is in transmission mode<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>OccupiedReceptionPaths</b>: Number of currently occupied reception paths<br>%Callback signature: ns3::TracedValueCallback::Int
</li>
</ul>
<h3>TraceSources defined in parent class ns3::LoraPhy</h3>
<ul>
<li><b>LostPacketBecauseInterference</b>: Trace source indicating a packet could not be correctly decoded because of interferingsignals<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>LostPacketBecauseUnderSensitivity</b>: Trace source indicating a packet could not be correctly received becauseits received power is below the sensitivity of the receiver<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet is now being received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating the PHY has finished the reception process for a packet<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>ReceivedPacket</b>: Trace source indicating a packet was correctly received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>StartSending</b>: Trace source indicating the PHY layerhas begun the sending process for a packet<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 416 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleNetDevice

<h3>Config Paths</h3>

ns3::SimpleNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DataRate</b>: The default data rate for point to point links. Zero means infinite
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 0bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PointToPointMode</b>: The device is configured in Point to Point mode
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<Packet>></li>
    <li>Initial value: ns3::DropTailQueue<Packet></li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimulatorImpl

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SllHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Socket

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SocketFactory

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SocketIpTtlTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SocketIpv6HopLimitTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SocketSetDontFragmentTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SteadyStateRandomWaypointMobilityModel

<h3>Config Paths</h3>

ns3::SteadyStateRandomWaypointMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::SteadyStateRandomWaypointMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxPause</b>: Maximum pause value, [s]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSpeed</b>: Maximum speed value, [m/s]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxX</b>: Maximum X value of traveling region, [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxY</b>: Maximum Y value of traveling region, [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinPause</b>: Minimum pause value, [s]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinSpeed</b>: Minimum speed value, [m/s]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinX</b>: Minimum X value of traveling region, [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinY</b>: Minimum Y value of traveling region, [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: Z value of traveling region (fixed), [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SubBand

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Synchronizer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Tag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TbfQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Burst</b>: Size of the first bucket in bytes
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 125000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 1000p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: Size of the second bucket in bytes. If null, it is initialized to the MTU of the receiving NetDevice (if any)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>PeakRate</b>: Rate at which tokens enter the second bucket in bps or Bps.If null, there is no second bucket
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 0bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Rate</b>: Rate at which tokens enter the first bucket in bps or Bps.
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 1000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TokensInFirstBucket</b>: Number of First Bucket Tokens in bytes<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>TokensInSecondBucket</b>: Number of Second Bucket Tokens in bytes<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpBbr

<h3>Config Paths</h3>

ns3::TcpBbr is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpBbr"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AckEpochAckedResetThresh</b>: Max allowed val for m_ackEpochAcked, after which sampling epoch is reset
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4096</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BwWindowLength</b>: Length of bandwidth windowed filter
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ExtraAckedRttWindowLength</b>: Window length of extra acked window
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HighGain</b>: Value of high gain
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.89</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ProbeRttDuration</b>: Time to be spent in PROBE_RTT phase
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RttWindowLength</b>: Length of RTT windowed filter
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: Random number stream (default is set to 4 to align with Linux results)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 336 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpBic

<h3>Config Paths</h3>

ns3::TcpBic is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpBic"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Beta</b>: Beta for multiplicative decrease
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BinarySearchCoefficient</b>: Inverse of the coefficient for the binary search. Default 4, as in Linux
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 2:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FastConvergence</b>: Turn on/off fast convergence.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LowWnd</b>: Threshold window size (in segments) for engaging BIC response
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 14</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxIncr</b>: Limit on increment allowed during binary search
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SmoothPart</b>: Number of RTT needed to approach cWnd_max from cWnd_max-BinarySearchCoefficient. It can be viewed as the gradient of the slow start AIM phase: less this value is, more steep the increment will be.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpClassicRecovery

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpCongestionOps

<h3>Config Paths</h3>

ns3::TcpCongestionOps is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpCubic

<h3>Config Paths</h3>

ns3::TcpCubic is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/$ns3::TcpCubic"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Beta</b>: Beta for multiplicative decrease
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>C</b>: Cubic Scaling factor
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CntClamp</b>: Counter value when no losses are detected (counter is used when incrementing cWnd in congestion avoidance, to avoid floating point arithmetic). It is the modulo of the (avoided) division
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CubicDelta</b>: Delta Time to wait after fast recovery before adjusting param
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FastConvergence</b>: Enable (true) or disable (false) fast convergence
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStart</b>: Enable (true) or disable (false) hybrid slow start algorithm
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStartAckDelta</b>: Spacing between ack's indicating train
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStartDelayMax</b>: Maximum time for hystart algorithm
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStartDelayMin</b>: Minimum time for hystart algorithm
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStartDetect</b>: Hybrid Slow Start detection mechanisms:packet train, delay, both
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns38TcpCubic21HybridSSDetectionModeE></li>
    <li>Underlying type: \p PACKET_TRAIN|DELAY|BOTH</li>
    <li>Initial value: BOTH</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStartLowWindow</b>: Lower bound cWnd for hybrid slow start (segments)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStartMinSamples</b>: Number of delay samples for detecting the increase of delay
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TcpFriendliness</b>: Enable (true) or disable (false) TCP friendliness
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::TcpSocketBase</h3>
<ul>
<li><b>ClockGranularity</b>: Clock Granularity used in RTO calculations
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CongestionOps</b>: Pointer to TcpCongestionOps object
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpCongestionOps></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.
  <ul>
    <li>Set with class:  \ref ns3::CallbackValue</li>
    <li>Underlying type: \p Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.
  <ul>
    <li>Set with class:  \ref ns3::CallbackValue</li>
    <li>Underlying type: \p Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LimitedTransmit</b>: Enable limited transmit
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSegLifetime</b>: Maximum segment lifetime in seconds, use for TIME_WAIT state transition to CLOSED state
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 120</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxWindowSize</b>: Max size of advertised window
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinRto</b>: Minimum retransmit timeout value
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReTxThreshold</b>: Threshold for fast retransmit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RxBuffer</b>: TCP Rx buffer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpRxBuffer></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Sack</b>: Enable or disable Sack option
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Timestamp</b>: Enable or disable Timestamp option
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxBuffer</b>: TCP Tx buffer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpTxBuffer></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: Parameter to set ECN functionality
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns314TcpSocketState8UseEcn_tE></li>
    <li>Underlying type: \p Off|On|AcceptOnly</li>
    <li>Initial value: Off</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>WindowScaling</b>: Enable or disable Window Scaling option
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::TcpSocket</h3>
<ul>
<li><b>ConnCount</b>: Number of connection attempts (SYN retransmissions) before returning failure
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnTimeout</b>: TCP retransmission timeout when opening connection (seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataRetries</b>: Number of data retransmission attempts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelAckCount</b>: Number of packets to wait before sending a TCP ack
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelAckTimeout</b>: Timeout value for TCP delayed acks, in seconds
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialCwnd</b>: TCP initial congestion window size (segments)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialSlowStartThreshold</b>: TCP initial slow start threshold (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4294967295</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PersistTimeout</b>: Persist timeout to probe for rx window
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RcvBufSize</b>: TcpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SegmentSize</b>: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 536</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SndBufSize</b>: TcpSocket maximum transmit buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TcpNoDelay</b>: Set to true to disable Nagle's algorithm
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::TcpSocketBase</h3>
<ul>
<li><b>AdvWND</b>: Advertised Window Size<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInFlight</b>: Socket estimation of bytes in flight<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongState</b>: TCP Congestion machine state<br>%Callback signature: ns3::TcpSocketState::TcpCongStatesTracedValueCallback
</li>
<li><b>CongestionWindow</b>: The TCP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's congestion window inflates as in older RFC<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>EcnCeSeq</b>: Sequence of last received CE<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnCwrSeq</b>: Sequence of last received CWR<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnEchoSeq</b>: Sequence of last received ECN Echo<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnState</b>: Trace ECN state change of socket<br>%Callback signature: ns3::TcpSocketState::EcnStatesTracedValueCallback
</li>
<li><b>HighestRxAck</b>: Highest ack received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>HighestRxSequence</b>: Highest sequence number received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>HighestSequence</b>: Highest sequence number ever sent in socket's life time<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>PacingRate</b>: The current TCP pacing rate<br>%Callback signature: ns3::TracedValueCallback::DataRate
</li>
<li><b>RTO</b>: Retransmission timeout<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
<li><b>RTT</b>: Last RTT sample<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
<li><b>RWND</b>: Remote side's flow control window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Rx</b>: Receive tcp packet from IP protocol<br>%Callback signature: ns3::TcpSocketBase::TcpTxRxTracedCallback
</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>State</b>: TCP state<br>%Callback signature: ns3::TcpStatesTracedValueCallback
</li>
<li><b>Tx</b>: Send tcp packet to IP protocol<br>%Callback signature: ns3::TcpSocketBase::TcpTxRxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpDctcp

<h3>Config Paths</h3>

ns3::TcpDctcp is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpDctcp"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpLinuxReno/$ns3::TcpDctcp"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DctcpAlphaOnInit</b>: Initial alpha value
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>DctcpShiftG</b>: Parameter G for updating dctcp_alpha
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.0625</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEct0</b>: Use ECT(0) for ECN codepoint, if false use ECT(1)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>CongestionEstimate</b>: Update sender-side congestion estimate state<br>%Callback signature: ns3::TcpDctcp::CongestionEstimateTracedCallback
</li>
</ul>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpHighSpeed

<h3>Config Paths</h3>

ns3::TcpHighSpeed is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpHighSpeed"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpHighSpeed"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpHtcp

<h3>Config Paths</h3>

ns3::TcpHtcp is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpHtcp"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpHtcp"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DefaultBackoff</b>: The default AIMD backoff factor
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DeltaL</b>: Delta_L parameter in increase function
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ThroughputRatio</b>: Threshold value for updating beta
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpHybla

<h3>Config Paths</h3>

ns3::TcpHybla is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpHybla"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpHybla"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RRTT</b>: Reference RTT
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rho</b>: Rho parameter of Hybla<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpIllinois

<h3>Config Paths</h3>

ns3::TcpIllinois is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpIllinois"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpIllinois"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AlphaBase</b>: Alpha base threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AlphaMax</b>: Maximum alpha threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AlphaMin</b>: Minimum alpha threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BetaBase</b>: Beta base threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BetaMax</b>: Maximum beta threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BetaMin</b>: Minimum beta threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Theta</b>: Theta threshold
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>WinThresh</b>: Window threshold
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpL4Protocol

<h3>Config Paths</h3>

ns3::TcpL4Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RecoveryType</b>: Recovery type of TCP objects.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpPrrRecovery</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RttEstimatorType</b>: Type of RttEstimator objects.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::RttMeanDeviation</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SocketList</b>: A container of sockets associated to this protocol. The underlying type is an unordered map, the attribute name is kept for backward compatibility.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpSocketBase></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>SocketType</b>: Socket type of TCP objects.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpCubic</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpLedbat

<h3>Config Paths</h3>

ns3::TcpLedbat is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpLedbat"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpLedbat"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BaseHistoryLen</b>: Number of Base delay samples
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Gain</b>: Offset Gain
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinCwnd</b>: Minimum cWnd for Ledbat
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NoiseFilterLen</b>: Number of Current delay samples
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SSParam</b>: Possibility of Slow Start
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns39TcpLedbat13SlowStartTypeE></li>
    <li>Underlying type: \p yes|no</li>
    <li>Initial value: yes</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TargetDelay</b>: Targeted Queue Delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpLinuxReno

<h3>Config Paths</h3>

ns3::TcpLinuxReno is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpLinuxReno"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpLp

<h3>Config Paths</h3>

ns3::TcpLp is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpLp"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpLp"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpNewReno

<h3>Config Paths</h3>

ns3::TcpNewReno is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOption

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionEnd

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionMSS

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionNOP

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionSack

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionSackPermitted

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionTS

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionUnknown

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionWinScale

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpPrrRecovery

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ReductionBound</b>: Type of Reduction Bound
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns314TcpPrrRecovery16ReductionBound_tE></li>
    <li>Underlying type: \p CRB|SSRB</li>
    <li>Initial value: SSRB</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpRateLinux

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>TcpRateSampleUpdated</b>: Tcp rate sample has been updated<br>%Callback signature: ns3::TcpRateLinux::TcpRateSampleUpdated
</li>
<li><b>TcpRateUpdated</b>: Tcp rate information has been updated<br>%Callback signature: ns3::TcpRateLinux::TcpRateUpdated
</li>
</ul>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpRateOps

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpRecoveryOps

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpRxBuffer

<h3>Config Paths</h3>

ns3::TcpRxBuffer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/RxBuffer"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>NextRxSequence</b>: Next sequence number expected (RCV.NXT)<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
</ul>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpScalable

<h3>Config Paths</h3>

ns3::TcpScalable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpScalable"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpScalable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AIFactor</b>: Additive Increase Factor
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MDFactor</b>: Multiplicative Decrease Factor
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpSocket

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ConnCount</b>: Number of connection attempts (SYN retransmissions) before returning failure
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnTimeout</b>: TCP retransmission timeout when opening connection (seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataRetries</b>: Number of data retransmission attempts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelAckCount</b>: Number of packets to wait before sending a TCP ack
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelAckTimeout</b>: Timeout value for TCP delayed acks, in seconds
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialCwnd</b>: TCP initial congestion window size (segments)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialSlowStartThreshold</b>: TCP initial slow start threshold (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4294967295</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PersistTimeout</b>: Persist timeout to probe for rx window
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RcvBufSize</b>: TcpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SegmentSize</b>: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 536</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SndBufSize</b>: TcpSocket maximum transmit buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TcpNoDelay</b>: Set to true to disable Nagle's algorithm
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpSocketBase

<h3>Config Paths</h3>

ns3::TcpSocketBase is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ClockGranularity</b>: Clock Granularity used in RTO calculations
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CongestionOps</b>: Pointer to TcpCongestionOps object
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpCongestionOps></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.
  <ul>
    <li>Set with class:  \ref ns3::CallbackValue</li>
    <li>Underlying type: \p Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.
  <ul>
    <li>Set with class:  \ref ns3::CallbackValue</li>
    <li>Underlying type: \p Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LimitedTransmit</b>: Enable limited transmit
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSegLifetime</b>: Maximum segment lifetime in seconds, use for TIME_WAIT state transition to CLOSED state
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 120</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxWindowSize</b>: Max size of advertised window
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinRto</b>: Minimum retransmit timeout value
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReTxThreshold</b>: Threshold for fast retransmit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RxBuffer</b>: TCP Rx buffer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpRxBuffer></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Sack</b>: Enable or disable Sack option
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Timestamp</b>: Enable or disable Timestamp option
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxBuffer</b>: TCP Tx buffer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpTxBuffer></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: Parameter to set ECN functionality
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns314TcpSocketState8UseEcn_tE></li>
    <li>Underlying type: \p Off|On|AcceptOnly</li>
    <li>Initial value: Off</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>WindowScaling</b>: Enable or disable Window Scaling option
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::TcpSocket</h3>
<ul>
<li><b>ConnCount</b>: Number of connection attempts (SYN retransmissions) before returning failure
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnTimeout</b>: TCP retransmission timeout when opening connection (seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataRetries</b>: Number of data retransmission attempts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelAckCount</b>: Number of packets to wait before sending a TCP ack
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelAckTimeout</b>: Timeout value for TCP delayed acks, in seconds
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialCwnd</b>: TCP initial congestion window size (segments)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialSlowStartThreshold</b>: TCP initial slow start threshold (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4294967295</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PersistTimeout</b>: Persist timeout to probe for rx window
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RcvBufSize</b>: TcpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SegmentSize</b>: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 536</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SndBufSize</b>: TcpSocket maximum transmit buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TcpNoDelay</b>: Set to true to disable Nagle's algorithm
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>AdvWND</b>: Advertised Window Size<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInFlight</b>: Socket estimation of bytes in flight<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongState</b>: TCP Congestion machine state<br>%Callback signature: ns3::TcpSocketState::TcpCongStatesTracedValueCallback
</li>
<li><b>CongestionWindow</b>: The TCP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's congestion window inflates as in older RFC<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>EcnCeSeq</b>: Sequence of last received CE<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnCwrSeq</b>: Sequence of last received CWR<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnEchoSeq</b>: Sequence of last received ECN Echo<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnState</b>: Trace ECN state change of socket<br>%Callback signature: ns3::TcpSocketState::EcnStatesTracedValueCallback
</li>
<li><b>HighestRxAck</b>: Highest ack received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>HighestRxSequence</b>: Highest sequence number received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>HighestSequence</b>: Highest sequence number ever sent in socket's life time<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>PacingRate</b>: The current TCP pacing rate<br>%Callback signature: ns3::TracedValueCallback::DataRate
</li>
<li><b>RTO</b>: Retransmission timeout<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
<li><b>RTT</b>: Last RTT sample<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
<li><b>RWND</b>: Remote side's flow control window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Rx</b>: Receive tcp packet from IP protocol<br>%Callback signature: ns3::TcpSocketBase::TcpTxRxTracedCallback
</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>State</b>: TCP state<br>%Callback signature: ns3::TcpStatesTracedValueCallback
</li>
<li><b>Tx</b>: Send tcp packet to IP protocol<br>%Callback signature: ns3::TcpSocketBase::TcpTxRxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 1256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpSocketFactory

<h3>Config Paths</h3>

ns3::TcpSocketFactory is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpSocketFactory"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpSocketState

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>EnablePacing</b>: Enable Pacing
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPacingRate</b>: Set Max Pacing Rate
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 4000000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PaceInitialWindow</b>: Perform pacing for initial window of data
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacingCaRatio</b>: Percent pacing rate increase for congestion avoidance conditions
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 120</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacingSsRatio</b>: Percent pacing rate increase for slow start conditions
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 200</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>BytesInFlight</b>: The TCP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongState</b>: TCP Congestion machine state<br>%Callback signature: ns3::TracedValueCallback::TcpCongState
</li>
<li><b>CongestionWindow</b>: The TCP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's inflated congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>EcnState</b>: Trace ECN state change of socket<br>%Callback signature: ns3::TracedValueCallback::EcnState
</li>
<li><b>HighestSequence</b>: Highest sequence number received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>PacingRate</b>: The current TCP pacing rate<br>%Callback signature: ns3::TracedValueCallback::DataRate
</li>
<li><b>RTT</b>: Last RTT sample<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 448 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpTxBuffer

<h3>Config Paths</h3>

ns3::TcpTxBuffer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/TxBuffer"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>UnackSequence</b>: First unacknowledged sequence number (SND.UNA)<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
</ul>
<b>Size</b> of this type is 176 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpVegas

<h3>Config Paths</h3>

ns3::TcpVegas is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpVegas"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpVegas"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: Lower bound of packets in network
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Beta</b>: Upper bound of packets in network
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Gamma</b>: Limit on increase
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpVeno

<h3>Config Paths</h3>

ns3::TcpVeno is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpVeno"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpVeno"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Beta</b>: Threshold for congestion detection
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpWestwoodPlus

<h3>Config Paths</h3>

ns3::TcpWestwoodPlus is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpWestwoodPlus"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpWestwoodPlus"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>FilterType</b>: Use this to choose no filter or Tustin's approximation filter
  <ul>
    <li>Set with class:  \ref ns3::EnumValue<N3ns315TcpWestwoodPlus10FilterTypeE></li>
    <li>Underlying type: \p None|Tustin</li>
    <li>Initial value: Tustin</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>EstimatedBW</b>: The estimated bandwidth<br>%Callback signature: ns3::TracedValueCallback::DataRate
</li>
</ul>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpYeah

<h3>Config Paths</h3>

ns3::TcpYeah is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpYeah"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpYeah"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: Maximum backlog allowed at the bottleneck queue
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Delta</b>: Log minimum fraction of cwnd to be removed on loss
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Epsilon</b>: Log maximum fraction to be removed on early decongestion
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Gamma</b>: Fraction of queue to be removed per RTT
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Phy</b>: Maximum delta from base
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Rho</b>: Minimum # of consecutive RTT to consider competition on loss
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StcpAiFactor</b>: STCP additive increase factor
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Zeta</b>: Minimum # of state switches to reset m_renoCount
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppHttpClient

<h3>Config Paths</h3>

ns3::ThreeGppHttpClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RemoteServerAddress</b>: The address of the destination server.
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemoteServerPort</b>: The destination port of the outbound packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Variables</b>: Variable collection, which is used to control e.g. timing and HTTP request size.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ThreeGppHttpVariables></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ConnectionClosed</b>: Connection to the destination web server is closed.<br>%Callback signature: ns3::ThreeGppHttpClient::TracedCallback
</li>
<li><b>ConnectionEstablished</b>: Connection to the destination web server has been established.<br>%Callback signature: ns3::ThreeGppHttpClient::TracedCallback
</li>
<li><b>Rx</b>: General trace for receiving a packet of any kind.<br>%Callback signature: ns3::Packet::PacketAddressTracedCallback
</li>
<li><b>RxDelay</b>: General trace of delay for receiving a complete object.<br>%Callback signature: ns3::Application::DelayAddressCallback
</li>
<li><b>RxEmbeddedObject</b>: Received a whole embedded object. Header is included.<br>%Callback signature: ns3::ThreeGppHttpClient::TracedCallback
</li>
<li><b>RxEmbeddedObjectPacket</b>: A packet of embedded object has been received.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxMainObject</b>: Received a whole main object. Header is included.<br>%Callback signature: ns3::ThreeGppHttpClient::TracedCallback
</li>
<li><b>RxMainObjectPacket</b>: A packet of main object has been received.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxPage</b>: A page has been received.<br>%Callback signature: ns3::ThreeGppHttpClient::RxPageTracedCallback
</li>
<li><b>RxRtt</b>: General trace of round trip delay time for receiving a complete object.<br>%Callback signature: ns3::Application::DelayAddressCallback
</li>
<li><b>StateTransition</b>: Trace fired upon every HTTP client state transition.<br>%Callback signature: ns3::Application::StateTransitionCallback
</li>
<li><b>Tx</b>: General trace for sending a packet of any kind.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxEmbeddedObjectRequest</b>: Sent a request for an embedded object.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxMainObjectRequest</b>: Sent a request for a main object.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 616 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppHttpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppHttpServer

<h3>Config Paths</h3>

ns3::ThreeGppHttpServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpServer"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>LocalAddress</b>: The local address of the server, i.e., the address on which to bind the Rx socket.
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LocalPort</b>: Port on which the application listen for incoming packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: Maximum transmission unit (in bytes) of the TCP sockets used in this application, excluding the compulsory 40 bytes TCP header. Typical values are 1460 and 536 bytes. The attribute is read-only because the value is randomly determined.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Variables</b>: Variable collection, which is used to control e.g. processing and object generation delays.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ThreeGppHttpVariables></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ConnectionEstablished</b>: Connection to a remote web client has been established.<br>%Callback signature: ns3::HttpServer::ConnectionEstablishedCallback
</li>
<li><b>EmbeddedObject</b>: An embedded object has been generated.<br>%Callback signature: ns3::HttpServer::HttpObjectCallback
</li>
<li><b>MainObject</b>: A main object has been generated.<br>%Callback signature: ns3::HttpServer::HttpObjectCallback
</li>
<li><b>Rx</b>: A packet has been received.<br>%Callback signature: ns3::Packet::PacketAddressTracedCallback
</li>
<li><b>RxDelay</b>: A packet has been received with delay information.<br>%Callback signature: ns3::Application::DelayAddressCallback
</li>
<li><b>StateTransition</b>: Trace fired upon every HTTP client state transition.<br>%Callback signature: ns3::Application::StateTransitionCallback
</li>
<li><b>Tx</b>: A packet has been sent.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 336 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppHttpVariables

<h3>Config Paths</h3>

ns3::ThreeGppHttpVariables is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpClient/Variables"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpServer/Variables"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EmbeddedObjectGenerationDelay</b>: The constant time needed by HTTP server to generate an embedded object as a response.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>EmbeddedObjectSizeMax</b>: The maximum value of embedded object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EmbeddedObjectSizeMean</b>: The mean of embedded object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7758</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>EmbeddedObjectSizeMin</b>: The minimum value of embedded object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 22:4294967295</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EmbeddedObjectSizeStdDev</b>: The standard deviation of embedded object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 126168</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>HighMtuProbability</b>: The probability that higher MTU size is used.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.76</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HighMtuSize</b>: The higher MTU size.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1460</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LowMtuSize</b>: The lower MTU size.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 536</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MainObjectGenerationDelay</b>: The constant time needed by HTTP server to generate a main object as a response.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MainObjectSizeMax</b>: The maximum value of main object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MainObjectSizeMean</b>: The mean of main object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10710</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MainObjectSizeMin</b>: The minimum value of main object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 22:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MainObjectSizeStdDev</b>: The standard deviation of main object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 25032</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NumOfEmbeddedObjectsMax</b>: The upper bound parameter of Pareto distribution for the number of embedded objects per web page. The actual maximum value is this value subtracted by the scale parameter.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 55</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NumOfEmbeddedObjectsScale</b>: The scale parameter of Pareto distribution for the number of embedded objects per web page.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NumOfEmbeddedObjectsShape</b>: The shape parameter of Pareto distribution for the number of embedded objects per web page.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>ParsingTimeMean</b>: The mean of parsing time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.3e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>ReadingTimeMean</b>: The mean of reading time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>RequestSize</b>: The constant size of HTTP request packet (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 328</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppIndoorMixedOfficeChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppIndoorMixedOfficeChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppIndoorOfficePropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppIndoorOfficePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppPropagationLossModel</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppIndoorOpenOfficeChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppIndoorOpenOfficeChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppPropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppRmaChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppRmaChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppRmaPropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppRmaPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AvgBuildingHeight</b>: The average building height in meters.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 5:50</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AvgStreetWidth</b>: The average street width in meters.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 5:50</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ThreeGppPropagationLossModel</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 232 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppUmaChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppUmaChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppUmaPropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppUmaPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppPropagationLossModel</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 224 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppUmiStreetCanyonChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppUmiStreetCanyonChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppUmiStreetCanyonPropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppUmiStreetCanyonPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppPropagationLossModel</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppV2vHighwayChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppV2vHighwayChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppV2vHighwayPropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppV2vHighwayPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppV2vUrbanPropagationLossModel</h3>
<ul>
<li><b>PercType3Vehicles</b>: The percentage of vehicles of type 3 (i.e., trucks) in the scenario
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:100</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ThreeGppPropagationLossModel</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppV2vUrbanChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppV2vUrbanChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppV2vUrbanPropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppV2vUrbanPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PercType3Vehicles</b>: The percentage of vehicles of type 3 (i.e., trucks) in the scenario
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:100</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ThreeGppPropagationLossModel</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeLogDistancePropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeLogDistancePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Distance0</b>: Beginning of the first (near) distance field
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Distance1</b>: Beginning of the second (middle) distance field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 200</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Distance2</b>: Beginning of the third (far) distance field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Exponent0</b>: The exponent for the first field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.9</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Exponent1</b>: The exponent for the second field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Exponent2</b>: The exponent for the third field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReferenceLoss</b>: The reference loss at distance d0 (dB). (Default is Friis at 1m with 5.15 GHz)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 46.6777</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TimeProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The double valued (units of seconds) probe output<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TimeSeriesAdaptor

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The current simulation time versus the current value converted to a double<br>%Callback signature: ns3::TimeSeriesAdaptor::OutputTracedCallback
</li>
</ul>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TimestampTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TrafficControlLayer

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RootQueueDiscList</b>: The list of root queue discs associated to this Traffic Control layer.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TcDrop</b>: Trace source indicating a packet has been dropped by the Traffic Control layer because no queue disc is installed on the device, the device supports flow control and the device queue is stopped<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Trailer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TriangularRandomVariable

<h3>Config Paths</h3>

ns3::TriangularRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::TriangularRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::TriangularRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Max</b>: The upper bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mean</b>: The mean value for the triangular distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Min</b>: The lower bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TwoRayGroundPropagationLossModel

<h3>Config Paths</h3>

ns3::TwoRayGroundPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The carrier frequency (in Hz) at which propagation occurs  (default is 5.15 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5.15e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HeightAboveZ</b>: The height of the antenna (m) above the node's Z coordinate
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinDistance</b>: The distance under which the propagation model refuses to give results (m)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SystemLoss</b>: The system loss
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpClient

<h3>Config Paths</h3>

ns3::UdpClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSize</b>: Size of packets generated. The minimum packet size is 12 bytes which is the size of the header carrying the sequence number and the time stamp.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 12:65507</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemotePort</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxWithAddresses</b>: A new packet is created and sent<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 272 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpEchoClient

<h3>Config Paths</h3>

ns3::UdpEchoClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpEchoClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSize</b>: Size of echo data in outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemotePort</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpEchoServer

<h3>Config Paths</h3>

ns3::UdpEchoServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpEchoServer"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Port</b>: Port on which we listen for incoming packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 9</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpL4Protocol

<h3>Config Paths</h3>

ns3::UdpL4Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::UdpL4Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>SocketList</b>: A container of sockets associated to this protocol. The underlying type is an unordered map, the attribute name is kept for backward compatibility.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UdpSocketImpl></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpServer

<h3>Config Paths</h3>

ns3::UdpServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpServer"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PacketWindowSize</b>: The size of the window used to compute the packet loss. This value should be a multiple of 8.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 8:256</li>
    <li>Initial value: 32</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Port</b>: Port on which we listen for incoming packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpSocket

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>IpMulticastIf</b>: interface index for outgoing multicast on this socket; -1 indicates to use default interface
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpMulticastLoop</b>: whether outgoing multicast sent also to loopback interface
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpMulticastTtl</b>: socket-specific TTL for multicast IP packets (if non-zero)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpTtl</b>: socket-specific TTL for unicast IP packets (if non-zero)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MtuDiscover</b>: If enabled, every outgoing ip packet will have the DF flag set.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RcvBufSize</b>: UdpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpSocketFactory

<h3>Config Paths</h3>

ns3::UdpSocketFactory is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::UdpSocketFactory"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpSocketImpl

<h3>Config Paths</h3>

ns3::UdpSocketImpl is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::UdpL4Protocol/SocketList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.
  <ul>
    <li>Set with class:  \ref ns3::CallbackValue</li>
    <li>Underlying type: \p Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.
  <ul>
    <li>Set with class:  \ref ns3::CallbackValue</li>
    <li>Underlying type: \p Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::UdpSocket</h3>
<ul>
<li><b>IpMulticastIf</b>: interface index for outgoing multicast on this socket; -1 indicates to use default interface
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpMulticastLoop</b>: whether outgoing multicast sent also to loopback interface
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpMulticastTtl</b>: socket-specific TTL for multicast IP packets (if non-zero)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpTtl</b>: socket-specific TTL for unicast IP packets (if non-zero)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MtuDiscover</b>: If enabled, every outgoing ip packet will have the DF flag set.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RcvBufSize</b>: UdpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop UDP packet due to receive buffer overflow<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 360 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpTraceClient

<h3>Config Paths</h3>

ns3::UdpTraceClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpTraceClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxPacketSize</b>: The maximum size of a packet (including the SeqTsHeader, 12 bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemotePort</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TraceFilename</b>: Name of file to load a trace from. By default, uses a hardcoded trace.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ""</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TraceLoop</b>: Loops through the trace file, starting again once it is over.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Uinteger16Probe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The uint16_t that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Uint16
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Uinteger32Probe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The uint32_t that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Uinteger8Probe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time -9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The uint8_t that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Uint8
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UniformDiscPositionAllocator

<h3>Config Paths</h3>

ns3::UniformDiscPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::UniformDiscPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>X</b>: The x coordinate of the center of the  disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Y</b>: The y coordinate of the center of the  disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: The z coordinate of all the positions in the disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>rho</b>: The radius of the disc
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UniformRandomVariable

<h3>Config Paths</h3>

ns3::UniformRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::UniformRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::UniformRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Max</b>: The upper bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Min</b>: The lower bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WallClockSynchronizer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WaypointMobilityModel

<h3>Config Paths</h3>

ns3::WaypointMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::WaypointMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>InitialPositionIsWaypoint</b>: Calling SetPosition with no waypoints creates a waypoint.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LazyNotify</b>: Only call NotifyCourseChange when position is calculated.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NextWaypoint</b>: The next waypoint used to determine position.
  <ul>
    <li>Set with class:  \ref ns3::WaypointValue</li>
    <li>Underlying type: \p Waypoint</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>WaypointsLeft</b>: The number of waypoints remaining.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 232 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WeibullRandomVariable

<h3>Config Paths</h3>

ns3::WeibullRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::WeibullRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::WeibullRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Scale</b>: The scale parameter for the Weibull distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Shape</b>: The shape parameter for the Weibull distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ZetaRandomVariable

<h3>Config Paths</h3>

ns3::ZetaRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::ZetaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZetaRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: The alpha value for the zeta distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.14</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ZipfRandomVariable

<h3>Config Paths</h3>

ns3::ZipfRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoraNetDevice/Channel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::ZipfRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::LoraChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZipfRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: The alpha value for the Zipf distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>N</b>: The n value for the Zipf distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!
\page TypeIdList All ns3::TypeId's

This is a list of all \ref ns3::TypeId's.
For more information see the \ref ns3::TypeId section of this API documentation and the %TypeId section in the Configuration and  %Attributes chapter of the Manual.

<ul>
  <li><b>ns3::AdrComponent</b></li>
  <li><b>ns3::AlwaysLosChannelConditionModel</b></li>
  <li><b>ns3::Application</b></li>
  <li><b>ns3::ApplicationPacketProbe</b></li>
  <li><b>ns3::ArpCache</b></li>
  <li><b>ns3::ArpHeader</b></li>
  <li><b>ns3::ArpL3Protocol</b></li>
  <li><b>ns3::BasicEnergyHarvester</b></li>
  <li><b>ns3::BasicEnergySource</b></li>
  <li><b>ns3::BernoulliRandomVariable</b></li>
  <li><b>ns3::BinaryErrorModel</b></li>
  <li><b>ns3::BinomialRandomVariable</b></li>
  <li><b>ns3::BooleanProbe</b></li>
  <li><b>ns3::BridgeChannel</b></li>
  <li><b>ns3::BridgeNetDevice</b></li>
  <li><b>ns3::Building</b></li>
  <li><b>ns3::BuildingListPriv</b></li>
  <li><b>ns3::BuildingPenetrationLoss</b></li>
  <li><b>ns3::BuildingsChannelConditionModel</b></li>
  <li><b>ns3::BuildingsPropagationLossModel</b></li>
  <li><b>ns3::BulkSendApplication</b></li>
  <li><b>ns3::BurstErrorModel</b></li>
  <li><b>ns3::CalendarScheduler</b></li>
  <li><b>ns3::Channel</b></li>
  <li><b>ns3::ChannelCondition</b></li>
  <li><b>ns3::ChannelConditionModel</b></li>
  <li><b>ns3::ChannelListPriv</b></li>
  <li><b>ns3::Chunk</b></li>
  <li><b>ns3::ClassAEndDeviceLorawanMac</b></li>
  <li><b>ns3::CobaltQueueDisc</b></li>
  <li><b>ns3::CoDelQueueDisc</b></li>
  <li><b>ns3::ConstantAccelerationMobilityModel</b></li>
  <li><b>ns3::ConstantLoraTxCurrentModel</b></li>
  <li><b>ns3::ConstantPositionMobilityModel</b></li>
  <li><b>ns3::ConstantRandomVariable</b></li>
  <li><b>ns3::ConstantSpeedPropagationDelayModel</b></li>
  <li><b>ns3::ConstantVelocityMobilityModel</b></li>
  <li><b>ns3::CorrelatedShwodingPropagationLossModel</b></li>
  <li><b>ns3::Cost231PropagationLossModel</b></li>
  <li><b>ns3::CounterCalculator<uint32_t></b></li>
  <li><b>ns3::DataCollectionObject</b></li>
  <li><b>ns3::DefaultSimulatorImpl</b></li>
  <li><b>ns3::DeterministicRandomVariable</b></li>
  <li><b>ns3::DeviceEnergyModel</b></li>
  <li><b>ns3::DeviceNameTag</b></li>
  <li><b>ns3::DoubleProbe</b></li>
  <li><b>ns3::DropTailQueue<Packet></b></li>
  <li><b>ns3::DropTailQueue<QueueDiscItem></b></li>
  <li><b>ns3::DynamicQueueLimits</b></li>
  <li><b>ns3::EmpiricalRandomVariable</b></li>
  <li><b>ns3::EndDeviceLoraPhy</b></li>
  <li><b>ns3::EndDeviceLorawanMac</b></li>
  <li><b>ns3::EnergyHarvester</b></li>
  <li><b>ns3::EnergyHarvesterContainer</b></li>
  <li><b>ns3::EnergySource</b></li>
  <li><b>ns3::EnergySourceContainer</b></li>
  <li><b>ns3::ErlangRandomVariable</b></li>
  <li><b>ns3::ErrorChannel</b></li>
  <li><b>ns3::ErrorModel</b></li>
  <li><b>ns3::EthernetHeader</b></li>
  <li><b>ns3::EthernetTrailer</b></li>
  <li><b>ns3::ExponentialRandomVariable</b></li>
  <li><b>ns3::FifoQueueDisc</b></li>
  <li><b>ns3::FileAggregator</b></li>
  <li><b>ns3::FixedRoomPositionAllocator</b></li>
  <li><b>ns3::FixedRssLossModel</b></li>
  <li><b>ns3::FlowIdTag</b></li>
  <li><b>ns3::Forwarder</b></li>
  <li><b>ns3::FqCobaltFlow</b></li>
  <li><b>ns3::FqCobaltQueueDisc</b></li>
  <li><b>ns3::FqCoDelFlow</b></li>
  <li><b>ns3::FqCoDelQueueDisc</b></li>
  <li><b>ns3::FqPieFlow</b></li>
  <li><b>ns3::FqPieQueueDisc</b></li>
  <li><b>ns3::FriisPropagationLossModel</b></li>
  <li><b>ns3::GammaRandomVariable</b></li>
  <li><b>ns3::GatewayLoraPhy</b></li>
  <li><b>ns3::GatewayLorawanMac</b></li>
  <li><b>ns3::GaussMarkovMobilityModel</b></li>
  <li><b>ns3::GenericBatteryModel</b></li>
  <li><b>ns3::GlobalRouter</b></li>
  <li><b>ns3::GnuplotAggregator</b></li>
  <li><b>ns3::GridBuildingAllocator</b></li>
  <li><b>ns3::GridPositionAllocator</b></li>
  <li><b>ns3::Header</b></li>
  <li><b>ns3::HeapScheduler</b></li>
  <li><b>ns3::HexGridPositionAllocator</b></li>
  <li><b>ns3::HierarchicalMobilityModel</b></li>
  <li><b>ns3::HybridBuildingsPropagationLossModel</b></li>
  <li><b>ns3::Icmpv4DestinationUnreachable</b></li>
  <li><b>ns3::Icmpv4Echo</b></li>
  <li><b>ns3::Icmpv4Header</b></li>
  <li><b>ns3::Icmpv4L4Protocol</b></li>
  <li><b>ns3::Icmpv4TimeExceeded</b></li>
  <li><b>ns3::Icmpv6DestinationUnreachable</b></li>
  <li><b>ns3::Icmpv6Echo</b></li>
  <li><b>ns3::Icmpv6Header</b></li>
  <li><b>ns3::Icmpv6L4Protocol</b></li>
  <li><b>ns3::Icmpv6NA</b></li>
  <li><b>ns3::Icmpv6NS</b></li>
  <li><b>ns3::Icmpv6OptionHeader</b></li>
  <li><b>ns3::Icmpv6OptionLinkLayerAddress</b></li>
  <li><b>ns3::Icmpv6OptionMtu</b></li>
  <li><b>ns3::Icmpv6OptionPrefixInformation</b></li>
  <li><b>ns3::Icmpv6OptionRedirected</b></li>
  <li><b>ns3::Icmpv6ParameterError</b></li>
  <li><b>ns3::Icmpv6RA</b></li>
  <li><b>ns3::Icmpv6Redirection</b></li>
  <li><b>ns3::Icmpv6RS</b></li>
  <li><b>ns3::Icmpv6TimeExceeded</b></li>
  <li><b>ns3::Icmpv6TooBig</b></li>
  <li><b>ns3::IpL4Protocol</b></li>
  <li><b>ns3::Ipv4</b></li>
  <li><b>ns3::Ipv4GlobalRouting</b></li>
  <li><b>ns3::Ipv4Header</b></li>
  <li><b>ns3::Ipv4Interface</b></li>
  <li><b>ns3::Ipv4L3Protocol</b></li>
  <li><b>ns3::Ipv4ListRouting</b></li>
  <li><b>ns3::Ipv4PacketFilter</b></li>
  <li><b>ns3::Ipv4PacketProbe</b></li>
  <li><b>ns3::Ipv4RawSocketFactory</b></li>
  <li><b>ns3::Ipv4RawSocketImpl</b></li>
  <li><b>ns3::Ipv4RoutingProtocol</b></li>
  <li><b>ns3::Ipv4StaticRouting</b></li>
  <li><b>ns3::Ipv6</b></li>
  <li><b>ns3::Ipv6Extension</b></li>
  <li><b>ns3::Ipv6ExtensionAH</b></li>
  <li><b>ns3::Ipv6ExtensionAHHeader</b></li>
  <li><b>ns3::Ipv6ExtensionDemux</b></li>
  <li><b>ns3::Ipv6ExtensionDestination</b></li>
  <li><b>ns3::Ipv6ExtensionDestinationHeader</b></li>
  <li><b>ns3::Ipv6ExtensionESP</b></li>
  <li><b>ns3::Ipv6ExtensionESPHeader</b></li>
  <li><b>ns3::Ipv6ExtensionFragment</b></li>
  <li><b>ns3::Ipv6ExtensionFragmentHeader</b></li>
  <li><b>ns3::Ipv6ExtensionHeader</b></li>
  <li><b>ns3::Ipv6ExtensionHopByHop</b></li>
  <li><b>ns3::Ipv6ExtensionHopByHopHeader</b></li>
  <li><b>ns3::Ipv6ExtensionLooseRouting</b></li>
  <li><b>ns3::Ipv6ExtensionLooseRoutingHeader</b></li>
  <li><b>ns3::Ipv6ExtensionRouting</b></li>
  <li><b>ns3::Ipv6ExtensionRoutingDemux</b></li>
  <li><b>ns3::Ipv6ExtensionRoutingHeader</b></li>
  <li><b>ns3::Ipv6Header</b></li>
  <li><b>ns3::Ipv6Interface</b></li>
  <li><b>ns3::Ipv6L3Protocol</b></li>
  <li><b>ns3::Ipv6ListRouting</b></li>
  <li><b>ns3::Ipv6Option</b></li>
  <li><b>ns3::Ipv6OptionDemux</b></li>
  <li><b>ns3::Ipv6OptionHeader</b></li>
  <li><b>ns3::Ipv6OptionJumbogram</b></li>
  <li><b>ns3::Ipv6OptionJumbogramHeader</b></li>
  <li><b>ns3::Ipv6OptionPad1</b></li>
  <li><b>ns3::Ipv6OptionPad1Header</b></li>
  <li><b>ns3::Ipv6OptionPadn</b></li>
  <li><b>ns3::Ipv6OptionPadnHeader</b></li>
  <li><b>ns3::Ipv6OptionRouterAlert</b></li>
  <li><b>ns3::Ipv6OptionRouterAlertHeader</b></li>
  <li><b>ns3::Ipv6PacketFilter</b></li>
  <li><b>ns3::Ipv6PacketProbe</b></li>
  <li><b>ns3::Ipv6PmtuCache</b></li>
  <li><b>ns3::Ipv6RawSocketFactory</b></li>
  <li><b>ns3::Ipv6RawSocketImpl</b></li>
  <li><b>ns3::Ipv6RoutingProtocol</b></li>
  <li><b>ns3::Ipv6StaticRouting</b></li>
  <li><b>ns3::ItuR1238PropagationLossModel</b></li>
  <li><b>ns3::ItuR1411LosPropagationLossModel</b></li>
  <li><b>ns3::ItuR1411NlosOverRooftopPropagationLossModel</b></li>
  <li><b>ns3::JakesProcess</b></li>
  <li><b>ns3::JakesPropagationLossModel</b></li>
  <li><b>ns3::Kun2600MhzPropagationLossModel</b></li>
  <li><b>ns3::LiIonEnergySource</b></li>
  <li><b>ns3::LinearLoraTxCurrentModel</b></li>
  <li><b>ns3::ListErrorModel</b></li>
  <li><b>ns3::ListPositionAllocator</b></li>
  <li><b>ns3::ListScheduler</b></li>
  <li><b>ns3::LlcSnapHeader</b></li>
  <li><b>ns3::LogDistancePropagationLossModel</b></li>
  <li><b>ns3::LogicalLoraChannel</b></li>
  <li><b>ns3::LogicalLoraChannelHelper</b></li>
  <li><b>ns3::LogNormalRandomVariable</b></li>
  <li><b>ns3::LoopbackNetDevice</b></li>
  <li><b>ns3::LoraChannel</b></li>
  <li><b>ns3::LoraInterferenceHelper</b></li>
  <li><b>ns3::LoraNetDevice</b></li>
  <li><b>ns3::LoraPhy</b></li>
  <li><b>ns3::LoraRadioEnergyModel</b></li>
  <li><b>ns3::LoraTag</b></li>
  <li><b>ns3::LoraTxCurrentModel</b></li>
  <li><b>ns3::LorawanMac</b></li>
  <li><b>ns3::MacCommand</b></li>
  <li><b>ns3::MapScheduler</b></li>
  <li><b>ns3::MatrixPropagationLossModel</b></li>
  <li><b>ns3::MobilityBuildingInfo</b></li>
  <li><b>ns3::MobilityModel</b></li>
  <li><b>ns3::MqQueueDisc</b></li>
  <li><b>ns3::NakagamiPropagationLossModel</b></li>
  <li><b>ns3::NdiscCache</b></li>
  <li><b>ns3::NetDevice</b></li>
  <li><b>ns3::NetDeviceQueue</b></li>
  <li><b>ns3::NetDeviceQueueInterface</b></li>
  <li><b>ns3::NetworkController</b></li>
  <li><b>ns3::NetworkControllerComponent</b></li>
  <li><b>ns3::NetworkScheduler</b></li>
  <li><b>ns3::NetworkServer</b></li>
  <li><b>ns3::NetworkStatus</b></li>
  <li><b>ns3::NeverLosChannelConditionModel</b></li>
  <li><b>ns3::NeverLosVehicleChannelConditionModel</b></li>
  <li><b>ns3::Node</b></li>
  <li><b>ns3::NodeListPriv</b></li>
  <li><b>ns3::NormalRandomVariable</b></li>
  <li><b>ns3::Object</b></li>
  <li><b>ns3::ObjectBase</b></li>
  <li><b>ns3::OhBuildingsPropagationLossModel</b></li>
  <li><b>ns3::OkumuraHataPropagationLossModel</b></li>
  <li><b>ns3::OneShotSender</b></li>
  <li><b>ns3::OnOffApplication</b></li>
  <li><b>ns3::OutdoorPositionAllocator</b></li>
  <li><b>ns3::PacketBurst</b></li>
  <li><b>ns3::PacketFilter</b></li>
  <li><b>ns3::PacketProbe</b></li>
  <li><b>ns3::PacketSink</b></li>
  <li><b>ns3::PacketSocket</b></li>
  <li><b>ns3::PacketSocketClient</b></li>
  <li><b>ns3::PacketSocketFactory</b></li>
  <li><b>ns3::PacketSocketServer</b></li>
  <li><b>ns3::PacketSocketTag</b></li>
  <li><b>ns3::ParetoRandomVariable</b></li>
  <li><b>ns3::PbbPacket</b></li>
  <li><b>ns3::PcapFileWrapper</b></li>
  <li><b>ns3::PeriodicSender</b></li>
  <li><b>ns3::PfifoFastQueueDisc</b></li>
  <li><b>ns3::PieQueueDisc</b></li>
  <li><b>ns3::PointToPointChannel</b></li>
  <li><b>ns3::PointToPointNetDevice</b></li>
  <li><b>ns3::PositionAllocator</b></li>
  <li><b>ns3::PppHeader</b></li>
  <li><b>ns3::PrioQueueDisc</b></li>
  <li><b>ns3::PriorityQueueScheduler</b></li>
  <li><b>ns3::ProbabilisticV2vHighwayChannelConditionModel</b></li>
  <li><b>ns3::ProbabilisticV2vUrbanChannelConditionModel</b></li>
  <li><b>ns3::Probe</b></li>
  <li><b>ns3::PropagationDelayModel</b></li>
  <li><b>ns3::PropagationLossModel</b></li>
  <li><b>ns3::Queue<Packet></b></li>
  <li><b>ns3::Queue<QueueDiscItem></b></li>
  <li><b>ns3::QueueBase</b></li>
  <li><b>ns3::QueueDisc</b></li>
  <li><b>ns3::QueueDiscClass</b></li>
  <li><b>ns3::QueueLimits</b></li>
  <li><b>ns3::RadiotapHeader</b></li>
  <li><b>ns3::RandomBoxPositionAllocator</b></li>
  <li><b>ns3::RandomBuildingPositionAllocator</b></li>
  <li><b>ns3::RandomDirection2dMobilityModel</b></li>
  <li><b>ns3::RandomDiscPositionAllocator</b></li>
  <li><b>ns3::RandomPropagationDelayModel</b></li>
  <li><b>ns3::RandomPropagationLossModel</b></li>
  <li><b>ns3::RandomRectanglePositionAllocator</b></li>
  <li><b>ns3::RandomRoomPositionAllocator</b></li>
  <li><b>ns3::RandomVariableStream</b></li>
  <li><b>ns3::RandomWalk2dMobilityModel</b></li>
  <li><b>ns3::RandomWalk2dOutdoorMobilityModel</b></li>
  <li><b>ns3::RandomWaypointMobilityModel</b></li>
  <li><b>ns3::RangePropagationLossModel</b></li>
  <li><b>ns3::RateErrorModel</b></li>
  <li><b>ns3::RealtimeSimulatorImpl</b></li>
  <li><b>ns3::ReceiveListErrorModel</b></li>
  <li><b>ns3::RedQueueDisc</b></li>
  <li><b>ns3::Rip</b></li>
  <li><b>ns3::RipHeader</b></li>
  <li><b>ns3::RipNg</b></li>
  <li><b>ns3::RipNgHeader</b></li>
  <li><b>ns3::RipNgRte</b></li>
  <li><b>ns3::RipRte</b></li>
  <li><b>ns3::RttEstimator</b></li>
  <li><b>ns3::RttMeanDeviation</b></li>
  <li><b>ns3::RvBatteryModel</b></li>
  <li><b>ns3::SameRoomPositionAllocator</b></li>
  <li><b>ns3::Scheduler</b></li>
  <li><b>ns3::SeqTsEchoHeader</b></li>
  <li><b>ns3::SeqTsHeader</b></li>
  <li><b>ns3::SeqTsSizeHeader</b></li>
  <li><b>ns3::SequentialRandomVariable</b></li>
  <li><b>ns3::SimpleChannel</b></li>
  <li><b>ns3::SimpleDeviceEnergyModel</b></li>
  <li><b>ns3::SimpleEndDeviceLoraPhy</b></li>
  <li><b>ns3::SimpleGatewayLoraPhy</b></li>
  <li><b>ns3::SimpleNetDevice</b></li>
  <li><b>ns3::SimpleTag</b></li>
  <li><b>ns3::SimulatorImpl</b></li>
  <li><b>ns3::SllHeader</b></li>
  <li><b>ns3::Socket</b></li>
  <li><b>ns3::SocketFactory</b></li>
  <li><b>ns3::SocketIpTtlTag</b></li>
  <li><b>ns3::SocketIpv6HopLimitTag</b></li>
  <li><b>ns3::SocketSetDontFragmentTag</b></li>
  <li><b>ns3::SteadyStateRandomWaypointMobilityModel</b></li>
  <li><b>ns3::SubBand</b></li>
  <li><b>ns3::Synchronizer</b></li>
  <li><b>ns3::Tag</b></li>
  <li><b>ns3::TbfQueueDisc</b></li>
  <li><b>ns3::TcpBbr</b></li>
  <li><b>ns3::TcpBic</b></li>
  <li><b>ns3::TcpClassicRecovery</b></li>
  <li><b>ns3::TcpCongestionOps</b></li>
  <li><b>ns3::TcpCubic</b></li>
  <li><b>ns3::TcpDctcp</b></li>
  <li><b>ns3::TcpHeader</b></li>
  <li><b>ns3::TcpHighSpeed</b></li>
  <li><b>ns3::TcpHtcp</b></li>
  <li><b>ns3::TcpHybla</b></li>
  <li><b>ns3::TcpIllinois</b></li>
  <li><b>ns3::TcpL4Protocol</b></li>
  <li><b>ns3::TcpLedbat</b></li>
  <li><b>ns3::TcpLinuxReno</b></li>
  <li><b>ns3::TcpLp</b></li>
  <li><b>ns3::TcpNewReno</b></li>
  <li><b>ns3::TcpOption</b></li>
  <li><b>ns3::TcpOptionEnd</b></li>
  <li><b>ns3::TcpOptionMSS</b></li>
  <li><b>ns3::TcpOptionNOP</b></li>
  <li><b>ns3::TcpOptionSack</b></li>
  <li><b>ns3::TcpOptionSackPermitted</b></li>
  <li><b>ns3::TcpOptionTS</b></li>
  <li><b>ns3::TcpOptionUnknown</b></li>
  <li><b>ns3::TcpOptionWinScale</b></li>
  <li><b>ns3::TcpPrrRecovery</b></li>
  <li><b>ns3::TcpRateLinux</b></li>
  <li><b>ns3::TcpRateOps</b></li>
  <li><b>ns3::TcpRecoveryOps</b></li>
  <li><b>ns3::TcpRxBuffer</b></li>
  <li><b>ns3::TcpScalable</b></li>
  <li><b>ns3::TcpSocket</b></li>
  <li><b>ns3::TcpSocketBase</b></li>
  <li><b>ns3::TcpSocketFactory</b></li>
  <li><b>ns3::TcpSocketState</b></li>
  <li><b>ns3::TcpTxBuffer</b></li>
  <li><b>ns3::TcpVegas</b></li>
  <li><b>ns3::TcpVeno</b></li>
  <li><b>ns3::TcpWestwoodPlus</b></li>
  <li><b>ns3::TcpYeah</b></li>
  <li><b>ns3::ThreeGppChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppHttpClient</b></li>
  <li><b>ns3::ThreeGppHttpHeader</b></li>
  <li><b>ns3::ThreeGppHttpServer</b></li>
  <li><b>ns3::ThreeGppHttpVariables</b></li>
  <li><b>ns3::ThreeGppIndoorMixedOfficeChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppIndoorOfficePropagationLossModel</b></li>
  <li><b>ns3::ThreeGppIndoorOpenOfficeChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppPropagationLossModel</b></li>
  <li><b>ns3::ThreeGppRmaChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppRmaPropagationLossModel</b></li>
  <li><b>ns3::ThreeGppUmaChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppUmaPropagationLossModel</b></li>
  <li><b>ns3::ThreeGppUmiStreetCanyonChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppUmiStreetCanyonPropagationLossModel</b></li>
  <li><b>ns3::ThreeGppV2vHighwayChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppV2vHighwayPropagationLossModel</b></li>
  <li><b>ns3::ThreeGppV2vUrbanChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppV2vUrbanPropagationLossModel</b></li>
  <li><b>ns3::ThreeLogDistancePropagationLossModel</b></li>
  <li><b>ns3::TimeProbe</b></li>
  <li><b>ns3::TimeSeriesAdaptor</b></li>
  <li><b>ns3::TimestampTag</b></li>
  <li><b>ns3::TrafficControlLayer</b></li>
  <li><b>ns3::Trailer</b></li>
  <li><b>ns3::TriangularRandomVariable</b></li>
  <li><b>ns3::TwoRayGroundPropagationLossModel</b></li>
  <li><b>ns3::UdpClient</b></li>
  <li><b>ns3::UdpEchoClient</b></li>
  <li><b>ns3::UdpEchoServer</b></li>
  <li><b>ns3::UdpHeader</b></li>
  <li><b>ns3::UdpL4Protocol</b></li>
  <li><b>ns3::UdpServer</b></li>
  <li><b>ns3::UdpSocket</b></li>
  <li><b>ns3::UdpSocketFactory</b></li>
  <li><b>ns3::UdpSocketImpl</b></li>
  <li><b>ns3::UdpTraceClient</b></li>
  <li><b>ns3::Uinteger16Probe</b></li>
  <li><b>ns3::Uinteger32Probe</b></li>
  <li><b>ns3::Uinteger8Probe</b></li>
  <li><b>ns3::UniformDiscPositionAllocator</b></li>
  <li><b>ns3::UniformRandomVariable</b></li>
  <li><b>ns3::WallClockSynchronizer</b></li>
  <li><b>ns3::WaypointMobilityModel</b></li>
  <li><b>ns3::WeibullRandomVariable</b></li>
  <li><b>ns3::ZetaRandomVariable</b></li>
  <li><b>ns3::ZipfRandomVariable</b></li>
</ul>
*/

/*!
\page AttributeList All Attributes

This is a list of all \ref attributes classes.  For more information see the \ref attributes section of this API documentation and the Attributes sections in the Tutorial and Manual.

<b>ns3::AdrComponent</b><br>
<ul>
<li><b>ChangeTransmissionPower</b>: Whether to toggle the transmission power or not</li>
<li><b>HistoryRange</b>: Number of packets to use for averaging</li>
<li><b>MultipleGwCombiningMethod</b>: Whether to average the received power of gateways or to use the maximum</li>
<li><b>MultiplePacketsCombiningMethod</b>: Whether to average SNRs from multiple packets or to use the maximum</li>
</ul>
<b>ns3::Application</b><br>
<ul>
<li><b>StartTime</b>: Time at which the application will start</li>
<li><b>StopTime</b>: Time at which the application will stop</li>
</ul>
<b>ns3::ArpCache</b><br>
<ul>
<li><b>AliveTimeout</b>: When this timeout expires, the matching cache entry needs refreshing</li>
<li><b>DeadTimeout</b>: When this timeout expires, a new attempt to resolve the matching entry is made</li>
<li><b>MaxRetries</b>: Number of retransmissions of ArpRequest before marking dead</li>
<li><b>PendingQueueSize</b>: The size of the queue for packets pending an arp reply.</li>
<li><b>WaitReplyTimeout</b>: When this timeout expires, the cache entries will be scanned and entries in WaitReply state will resend ArpRequest unless MaxRetries has been exceeded, in which case the entry is marked dead</li>
</ul>
<b>ns3::ArpL3Protocol</b><br>
<ul>
<li><b>CacheList</b>: The list of ARP caches</li>
<li><b>RequestJitter</b>: The jitter in ms a node is allowed to wait before sending an ARP request.  Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and RequestJitter</li>
</ul>
<b>ns3::BasicEnergyHarvester</b><br>
<ul>
<li><b>HarvestablePower</b>: The harvestable power [Watts] that the energy harvester is allowed to harvest. By default, the model will allow to harvest an amount of power defined by a uniformly distributed random variable in 0 and 2.0 Watts</li>
<li><b>PeriodicHarvestedPowerUpdateInterval</b>: Time between two consecutive periodic updates of the harvested power. By default, the value is updated every 1 s</li>
</ul>
<b>ns3::BasicEnergySource</b><br>
<ul>
<li><b>BasicEnergyHighBatteryThreshold</b>: High battery threshold for basic energy source.</li>
<li><b>BasicEnergyLowBatteryThreshold</b>: Low battery threshold for basic energy source.</li>
<li><b>BasicEnergySourceInitialEnergyJ</b>: Initial energy stored in basic energy source.</li>
<li><b>BasicEnergySupplyVoltageV</b>: Initial supply voltage for basic energy source.</li>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.</li>
</ul>
<b>ns3::BernoulliRandomVariable</b><br>
<ul>
<li><b>Probability</b>: The probability of the random variable returning a value of 1.</li>
</ul>
<b>ns3::BinomialRandomVariable</b><br>
<ul>
<li><b>Probability</b>: The probability of success in each trial.</li>
<li><b>Trials</b>: The number of trials.</li>
</ul>
<b>ns3::BridgeNetDevice</b><br>
<ul>
<li><b>EnableLearning</b>: Enable the learning mode of the Learning Bridge</li>
<li><b>ExpirationTime</b>: Time it takes for learned MAC state entry to expire.</li>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
</ul>
<b>ns3::Building</b><br>
<ul>
<li><b>Boundaries</b>: The boundaries of this Building as a value of type ns3::Box</li>
<li><b>ExternalWallsType</b>: The type of material of which the external walls are made</li>
<li><b>Id</b>: The id (unique integer) of this Building.</li>
<li><b>NFloors</b>: The number of floors of this building.</li>
<li><b>NRoomsX</b>: The number of rooms in the X axis.</li>
<li><b>NRoomsY</b>: The number of rooms in the Y axis.</li>
<li><b>Type</b>: The type of building</li>
</ul>
<b>ns3::BuildingListPriv</b><br>
<ul>
<li><b>BuildingList</b>: The list of all buildings created during the simulation.</li>
</ul>
<b>ns3::BuildingsPropagationLossModel</b><br>
<ul>
<li><b>InternalWallLoss</b>: Additional loss for each internal wall [dB]</li>
<li><b>ShadowSigmaExtWalls</b>: Standard deviation of the normal distribution used to calculate the shadowing due to ext walls</li>
<li><b>ShadowSigmaIndoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for indoor nodes</li>
<li><b>ShadowSigmaOutdoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for outdoor nodes</li>
</ul>
<b>ns3::BulkSendApplication</b><br>
<ul>
<li><b>EnableSeqTsSizeHeader</b>: Add SeqTsSizeHeader to each packet</li>
<li><b>Local</b>: The Address on which to bind the socket. If not set, it is generated automatically.</li>
<li><b>MaxBytes</b>: The total number of bytes to send. Once these bytes are sent, no data  is sent again. The value zero means that there is no limit.</li>
<li><b>Protocol</b>: The type of protocol to use.</li>
<li><b>Remote</b>: The address of the destination</li>
<li><b>SendSize</b>: The amount of data to send each time.</li>
</ul>
<b>ns3::BurstErrorModel</b><br>
<ul>
<li><b>BurstSize</b>: The number of packets being corrupted at one drop.</li>
<li><b>BurstStart</b>: The decision variable attached to this error model.</li>
<li><b>ErrorRate</b>: The burst error event.</li>
</ul>
<b>ns3::CalendarScheduler</b><br>
<ul>
<li><b>Reverse</b>: Store events in reverse chronological order</li>
</ul>
<b>ns3::Channel</b><br>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.</li>
</ul>
<b>ns3::ChannelListPriv</b><br>
<ul>
<li><b>ChannelList</b>: The list of all channels created during the simulation.</li>
</ul>
<b>ns3::CobaltQueueDisc</b><br>
<ul>
<li><b>BlueThreshold</b>: The Threshold after which Blue is enabled</li>
<li><b>CeThreshold</b>: The CoDel CE threshold for marking packets</li>
<li><b>Decrement</b>: Pdrop decrement Value</li>
<li><b>Increment</b>: Pdrop increment value</li>
<li><b>Interval</b>: The Cobalt algorithm interval</li>
<li><b>MaxSize</b>: The maximum number of packets/bytes accepted by this queue disc.</li>
<li><b>Pdrop</b>: Marking Probability</li>
<li><b>Target</b>: The Cobalt algorithm target queue delay</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)</li>
</ul>
<b>ns3::CoDelQueueDisc</b><br>
<ul>
<li><b>CeThreshold</b>: The CoDel CE threshold for marking packets</li>
<li><b>Interval</b>: The CoDel algorithm interval</li>
<li><b>MaxSize</b>: The maximum number of packets/bytes accepted by this queue disc.</li>
<li><b>MinBytes</b>: The CoDel algorithm minbytes parameter.</li>
<li><b>Target</b>: The CoDel algorithm target queue delay</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)</li>
</ul>
<b>ns3::ConstantLoraTxCurrentModel</b><br>
<ul>
<li><b>TxCurrent</b>: The radio Tx current in Ampere.</li>
</ul>
<b>ns3::ConstantRandomVariable</b><br>
<ul>
<li><b>Constant</b>: The constant value returned by this RNG stream.</li>
</ul>
<b>ns3::ConstantSpeedPropagationDelayModel</b><br>
<ul>
<li><b>Speed</b>: The propagation speed (m/s) in the propagation medium being considered. The default value is the propagation speed of light in the vacuum.</li>
</ul>
<b>ns3::CorrelatedShwodingPropagationLossModel</b><br>
<ul>
<li><b>CorrelationDistance</b>: The distance at which the computed shadowing becomesuncorrelated</li>
</ul>
<b>ns3::Cost231PropagationLossModel</b><br>
<ul>
<li><b>BSAntennaHeight</b>: BS Antenna Height (default is 50m).</li>
<li><b>Frequency</b>: The Frequency  (default is 2.3 GHz).</li>
<li><b>Lambda</b>: The wavelength  (default is 2.3 GHz at 300 000 km/s).</li>
<li><b>MinDistance</b>: The distance under which the propagation model refuses to give results (m).</li>
<li><b>SSAntennaHeight</b>: SS Antenna Height (default is 3m).</li>
</ul>
<b>ns3::DataCollectionObject</b><br>
<ul>
<li><b>Enabled</b>: Object's enabled status</li>
<li><b>Name</b>: Object's name</li>
</ul>
<b>ns3::DropTailQueue<Packet></b><br>
<ul>
<li><b>MaxSize</b>: The max queue size</li>
</ul>
<b>ns3::DropTailQueue<QueueDiscItem></b><br>
<ul>
<li><b>MaxSize</b>: The max queue size</li>
</ul>
<b>ns3::DynamicQueueLimits</b><br>
<ul>
<li><b>HoldTime</b>: The DQL algorithm hold time</li>
<li><b>MaxLimit</b>: Maximum limit</li>
<li><b>MinLimit</b>: Minimum limit</li>
</ul>
<b>ns3::EmpiricalRandomVariable</b><br>
<ul>
<li><b>Interpolate</b>: Treat the CDF as a smooth distribution and interpolate, default is to treat the CDF as a histogram and sample.</li>
</ul>
<b>ns3::EndDeviceLorawanMac</b><br>
<ul>
<li><b>DRControl</b>: Whether to request the NS to control this device's Data Rate</li>
<li><b>DataRate</b>: Data Rate currently employed by this end device</li>
<li><b>EnableEDDataRateAdaptation</b>: Whether the End Device should up its Data Rate in case it doesn't get a reply from the NS.</li>
<li><b>MType</b>: Specify type of message will be sent by this ED.</li>
<li><b>MaxTransmissions</b>: Maximum number of transmissions for a packet</li>
</ul>
<b>ns3::ErlangRandomVariable</b><br>
<ul>
<li><b>K</b>: The k value for the Erlang distribution returned by this RNG stream.</li>
<li><b>Lambda</b>: The lambda value for the Erlang distribution returned by this RNG stream.</li>
</ul>
<b>ns3::ErrorModel</b><br>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.</li>
</ul>
<b>ns3::ExponentialRandomVariable</b><br>
<ul>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream.</li>
<li><b>Mean</b>: The mean of the values returned by this RNG stream.</li>
</ul>
<b>ns3::FifoQueueDisc</b><br>
<ul>
<li><b>MaxSize</b>: The max queue size</li>
</ul>
<b>ns3::FixedRssLossModel</b><br>
<ul>
<li><b>Rss</b>: The fixed receiver Rss.</li>
</ul>
<b>ns3::FqCobaltQueueDisc</b><br>
<ul>
<li><b>BlueThreshold</b>: The Threshold after which Blue is enabled</li>
<li><b>CeThreshold</b>: The FqCobalt CE threshold for marking packets</li>
<li><b>Decrement</b>: Pdrop decrement Value</li>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow</li>
<li><b>EnableSetAssociativeHash</b>: Enable/Disable Set Associative Hash</li>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified</li>
<li><b>Increment</b>: Pdrop increment value</li>
<li><b>Interval</b>: The CoDel algorithm interval for each FqCobalt queue</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>Pdrop</b>: Marking Probability</li>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets</li>
<li><b>SetWays</b>: The size of a set of queues (used by set associative hash)</li>
<li><b>Target</b>: The CoDel algorithm target queue delay for each FqCobalt queue</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)</li>
</ul>
<b>ns3::FqCoDelQueueDisc</b><br>
<ul>
<li><b>CeThreshold</b>: The FqCoDel CE threshold for marking packets</li>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow</li>
<li><b>EnableSetAssociativeHash</b>: Enable/Disable Set Associative Hash</li>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified</li>
<li><b>Interval</b>: The CoDel algorithm interval for each FQCoDel queue</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets</li>
<li><b>SetWays</b>: The size of a set of queues (used by set associative hash)</li>
<li><b>Target</b>: The CoDel algorithm target queue delay for each FQCoDel queue</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)</li>
</ul>
<b>ns3::FqPieQueueDisc</b><br>
<ul>
<li><b>A</b>: Value of alpha</li>
<li><b>B</b>: Value of beta</li>
<li><b>CeThreshold</b>: The FqPie CE threshold for marking packets</li>
<li><b>DequeueThreshold</b>: Minimum queue size in bytes before dequeue rate is measured</li>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow</li>
<li><b>EnableSetAssociativeHash</b>: Enable/Disable Set Associative Hash</li>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified</li>
<li><b>MarkEcnThreshold</b>: ECN marking threshold (RFC 8033 suggests 0.1 (i.e., 10%) default)</li>
<li><b>MaxBurstAllowance</b>: Current max burst allowance before random drop</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>MeanPktSize</b>: Average of packet size</li>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets</li>
<li><b>QueueDelayReference</b>: Desired queue delay</li>
<li><b>SetWays</b>: The size of a set of queues (used by set associative hash)</li>
<li><b>Supdate</b>: Start time of the update timer</li>
<li><b>Tupdate</b>: Time period to calculate drop probability</li>
<li><b>UseCapDropAdjustment</b>: Enable/Disable Cap Drop Adjustment feature mentioned in RFC 8033</li>
<li><b>UseDequeueRateEstimator</b>: Enable/Disable usage of Dequeue Rate Estimator</li>
<li><b>UseDerandomization</b>: Enable/Disable Derandomization feature mentioned in RFC 8033</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)</li>
</ul>
<b>ns3::FriisPropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The carrier frequency (in Hz) at which propagation occurs (default is 5.15 GHz).</li>
<li><b>MinLoss</b>: The minimum value (dB) of the total loss, used at short ranges.</li>
<li><b>SystemLoss</b>: The system loss</li>
</ul>
<b>ns3::GammaRandomVariable</b><br>
<ul>
<li><b>Alpha</b>: The alpha value for the gamma distribution returned by this RNG stream.</li>
<li><b>Beta</b>: The beta value for the gamma distribution returned by this RNG stream.</li>
</ul>
<b>ns3::GaussMarkovMobilityModel</b><br>
<ul>
<li><b>Alpha</b>: A constant representing the tunable parameter in the Gauss-Markov model.</li>
<li><b>Bounds</b>: Bounds of the area to cruise.</li>
<li><b>MeanDirection</b>: A random variable used to assign the average direction.</li>
<li><b>MeanPitch</b>: A random variable used to assign the average pitch.</li>
<li><b>MeanVelocity</b>: A random variable used to assign the average velocity.</li>
<li><b>NormalDirection</b>: A gaussian random variable used to calculate the next direction value.</li>
<li><b>NormalPitch</b>: A gaussian random variable used to calculate the next pitch value.</li>
<li><b>NormalVelocity</b>: A gaussian random variable used to calculate the next velocity value.</li>
<li><b>TimeStep</b>: Change current direction and speed after moving for this time.</li>
</ul>
<b>ns3::GenericBatteryModel</b><br>
<ul>
<li><b>BatteryType</b>: Indicates the battery type used by the model</li>
<li><b>CutoffVoltage</b>: The voltage where the battery is considered depleted (V).</li>
<li><b>ExponentialCapacity</b>: (Q_exp) Cell Capacity at the end of the exponential zone (Ah).</li>
<li><b>ExponentialVoltage</b>: (V_exp) Cell voltage at the end of the exponential zone (V).</li>
<li><b>FullVoltage</b>: (Q_full) The voltage of the cell when fully charged (V).</li>
<li><b>InternalResistance</b>: (R) Internal resistance of the cell (Ohms)</li>
<li><b>LowBatteryThreshold</b>: Low battery threshold for generic battery model.</li>
<li><b>MaxCapacity</b>: (Q) The maximum capacity of the cell (Ah).</li>
<li><b>NominalCapacity</b>: (Q_nom) Cell capacity at the end of the nominal zone (Ah)</li>
<li><b>NominalVoltage</b>: (V_nom) Nominal voltage of the cell (V).</li>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.</li>
<li><b>TypicalDischargeCurrent</b>: Typical discharge current used in manufacters datasheets (A)</li>
</ul>
<b>ns3::GridBuildingAllocator</b><br>
<ul>
<li><b>DeltaX</b>: The x space between buildings.</li>
<li><b>DeltaY</b>: The y space between buildings.</li>
<li><b>GridWidth</b>: The number of objects laid out on a line.</li>
<li><b>Height</b>: The height of the building (roof level)</li>
<li><b>LayoutType</b>: The type of layout.</li>
<li><b>LengthX</b>: The length of the wall of each building along the X axis.</li>
<li><b>LengthY</b>: The length of the wall of each building along the X axis.</li>
<li><b>MinX</b>: The x coordinate where the grid starts.</li>
<li><b>MinY</b>: The y coordinate where the grid starts.</li>
</ul>
<b>ns3::GridPositionAllocator</b><br>
<ul>
<li><b>DeltaX</b>: The x space between objects.</li>
<li><b>DeltaY</b>: The y space between objects.</li>
<li><b>GridWidth</b>: The number of objects laid out on a line.</li>
<li><b>LayoutType</b>: The type of layout.</li>
<li><b>MinX</b>: The x coordinate where the grid starts.</li>
<li><b>MinY</b>: The y coordinate where the grid starts.</li>
<li><b>Z</b>: The z coordinate of all the positions allocated.</li>
</ul>
<b>ns3::HexGridPositionAllocator</b><br>
<ul>
<li><b>Radius</b>: The radius of a single hexagon</li>
</ul>
<b>ns3::HierarchicalMobilityModel</b><br>
<ul>
<li><b>Child</b>: The child mobility model.</li>
<li><b>Parent</b>: The parent mobility model.</li>
</ul>
<b>ns3::HybridBuildingsPropagationLossModel</b><br>
<ul>
<li><b>CitySize</b>: Dimension of the city</li>
<li><b>Environment</b>: Environment Scenario</li>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).</li>
<li><b>Los2NlosThr</b>:  Threshold from LoS to NLoS in ITU 1411 [m].</li>
<li><b>RooftopLevel</b>: The height of the rooftop level in meters</li>
</ul>
<b>ns3::Icmpv6L4Protocol</b><br>
<ul>
<li><b>DAD</b>: Always do DAD check.</li>
<li><b>DadTimeout</b>: Duplicate Address Detection (DAD) timeout</li>
<li><b>DelayFirstProbe</b>: Neighbor Discovery node constants: delay for the first probe.</li>
<li><b>MaxMulticastSolicit</b>: Neighbor Discovery node constants: max multicast solicitations.</li>
<li><b>MaxUnicastSolicit</b>: Neighbor Discovery node constants: max unicast solicitations.</li>
<li><b>ReachableTime</b>: Neighbor Discovery node constants: reachable time.</li>
<li><b>RetransmissionTime</b>: Neighbor Discovery node constants: retransmission timer.</li>
<li><b>RsInitialRetransmissionTime</b>: Multicast RS initial retransmission time.</li>
<li><b>RsMaxRetransmissionCount</b>: Multicast RS maximum retransmission count (0 means unbound). Note: RFC 7559 suggest a zero value (infinite). The default is 4 to avoid non-terminating simulations.</li>
<li><b>RsMaxRetransmissionDuration</b>: Multicast RS maximum retransmission duration (0 means unbound).</li>
<li><b>RsMaxRetransmissionTime</b>: Multicast RS maximum retransmission time (0 means unbound).</li>
<li><b>RsRetransmissionJitter</b>: Multicast RS retransmission randomization quantity</li>
<li><b>SolicitationJitter</b>: The jitter in ms a node is allowed to wait before sending any solicitation. Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and SolicitationJitter</li>
</ul>
<b>ns3::IpL4Protocol</b><br>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.</li>
</ul>
<b>ns3::Ipv4</b><br>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future Ipv4 devices.</li>
<li><b>StrongEndSystemModel</b>: Reject packets for an address not configured on the interface they're coming from (RFC1122, section 3.3.4.2).</li>
<li><b>WeakEsModel</b>: RFC1122 term for whether host accepts datagram with a dest. address on another interface</li>
</ul>
<b>ns3::Ipv4GlobalRouting</b><br>
<ul>
<li><b>RandomEcmpRouting</b>: Set to true if packets are randomly routed among ECMP; set to false for using only one route consistently</li>
<li><b>RespondToInterfaceEvents</b>: Set to true if you want to dynamically recompute the global routes upon Interface notification events (up/down, or add/remove address)</li>
</ul>
<b>ns3::Ipv4Interface</b><br>
<ul>
<li><b>ArpCache</b>: The arp cache for this ipv4 interface</li>
</ul>
<b>ns3::Ipv4L3Protocol</b><br>
<ul>
<li><b>DefaultTtl</b>: The TTL value set by default on all outgoing packets generated on this node.</li>
<li><b>DuplicateExpire</b>: Expiration delay for duplicate cache entries</li>
<li><b>EnableDuplicatePacketDetection</b>: Enable multicast duplicate packet detection based on RFC 6621</li>
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.</li>
<li><b>InterfaceList</b>: The set of Ipv4 interfaces associated to this Ipv4 stack.</li>
<li><b>PurgeExpiredPeriod</b>: Time between purges of expired duplicate packet entries, 0 means never purge</li>
</ul>
<b>ns3::Ipv4RawSocketImpl</b><br>
<ul>
<li><b>IcmpFilter</b>: Any icmp header whose type field matches a bit in this filter is dropped. Type must be less than 32.</li>
<li><b>IpHeaderInclude</b>: Include IP Header information (a.k.a setsockopt (IP_HDRINCL)).</li>
<li><b>Protocol</b>: Protocol number to match.</li>
</ul>
<b>ns3::Ipv6</b><br>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future IPv6 devices.</li>
<li><b>MtuDiscover</b>: If disabled, every interface will have its MTU set to 1280 bytes.</li>
<li><b>StrongEndSystemModel</b>: Reject packets for an address not configured on the interface they're coming from (RFC1122, section 3.3.4.2).</li>
</ul>
<b>ns3::Ipv6Extension</b><br>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.</li>
</ul>
<b>ns3::Ipv6ExtensionDemux</b><br>
<ul>
<li><b>Extensions</b>: The set of IPv6 extensions registered with this demux.</li>
</ul>
<b>ns3::Ipv6ExtensionFragment</b><br>
<ul>
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.</li>
</ul>
<b>ns3::Ipv6ExtensionRoutingDemux</b><br>
<ul>
<li><b>RoutingExtensions</b>: The set of IPv6 Routing extensions registered with this demux.</li>
</ul>
<b>ns3::Ipv6L3Protocol</b><br>
<ul>
<li><b>DefaultTclass</b>: The TCLASS value set by default on all outgoing packets generated on this node.</li>
<li><b>DefaultTtl</b>: The TTL value set by default on all outgoing packets generated on this node.</li>
<li><b>InterfaceList</b>: The set of IPv6 interfaces associated to this IPv6 stack.</li>
<li><b>SendIcmpv6Redirect</b>: Send the ICMPv6 Redirect when appropriate.</li>
</ul>
<b>ns3::Ipv6Option</b><br>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.</li>
</ul>
<b>ns3::Ipv6OptionDemux</b><br>
<ul>
<li><b>Options</b>: The set of IPv6 options registered with this demux.</li>
</ul>
<b>ns3::Ipv6PmtuCache</b><br>
<ul>
<li><b>CacheExpiryTime</b>: Validity time for a Path MTU entry. Default is 10 minutes, minimum is 5 minutes.</li>
</ul>
<b>ns3::Ipv6RawSocketImpl</b><br>
<ul>
<li><b>Protocol</b>: Protocol number to match.</li>
</ul>
<b>ns3::ItuR1238PropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).</li>
</ul>
<b>ns3::ItuR1411LosPropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The propagation frequency in Hz</li>
</ul>
<b>ns3::ItuR1411NlosOverRooftopPropagationLossModel</b><br>
<ul>
<li><b>BuildingSeparation</b>: The separation between buildings</li>
<li><b>BuildingsExtend</b>: The distance over which the buildings extend</li>
<li><b>CitySize</b>: Dimension of the city</li>
<li><b>Environment</b>: Environment Scenario</li>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).</li>
<li><b>RooftopLevel</b>: The height of the rooftop level in meters</li>
<li><b>StreetsOrientation</b>: The orientation of streets in degrees [0,90] with respect to the direction of propagation</li>
<li><b>StreetsWidth</b>: The width of streets</li>
</ul>
<b>ns3::JakesProcess</b><br>
<ul>
<li><b>DopplerFrequencyHz</b>: Corresponding doppler frequency[Hz]</li>
<li><b>NumberOfOscillators</b>: The number of oscillators</li>
</ul>
<b>ns3::LiIonEnergySource</b><br>
<ul>
<li><b>ExpCapacity</b>: Cell Capacity at the end of the exponential zone.</li>
<li><b>ExpCellVoltage</b>: Cell voltage at the end of the exponential zone.</li>
<li><b>InitialCellVoltage</b>: Initial (maximum) voltage of the cell (fully charged).</li>
<li><b>InternalResistance</b>: Internal resistance of the cell</li>
<li><b>LiIonEnergyLowBatteryThreshold</b>: Low battery threshold for LiIon energy source.</li>
<li><b>LiIonEnergySourceInitialEnergyJ</b>: Initial energy stored in basic energy source.</li>
<li><b>NomCapacity</b>: Cell capacity at the end of the nominal zone.</li>
<li><b>NominalCellVoltage</b>: Nominal voltage of the cell.</li>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.</li>
<li><b>RatedCapacity</b>: Rated capacity of the cell.</li>
<li><b>ThresholdVoltage</b>: Minimum threshold voltage to consider the battery depleted.</li>
<li><b>TypCurrent</b>: Typical discharge current used to fit the curves</li>
</ul>
<b>ns3::LinearLoraTxCurrentModel</b><br>
<ul>
<li><b>Eta</b>: The efficiency of the power amplifier.</li>
<li><b>StandbyCurrent</b>: The current in the STANDBY state (in Watts).</li>
<li><b>Voltage</b>: The supply voltage (in Volts).</li>
</ul>
<b>ns3::LogDistancePropagationLossModel</b><br>
<ul>
<li><b>Exponent</b>: The exponent of the Path Loss propagation model</li>
<li><b>ReferenceDistance</b>: The distance at which the reference loss is calculated (m)</li>
<li><b>ReferenceLoss</b>: The reference loss at reference distance (dB). (Default is Friis at 1m with 5.15 GHz)</li>
</ul>
<b>ns3::LogNormalRandomVariable</b><br>
<ul>
<li><b>Mu</b>: The mu value for the log-normal distribution returned by this RNG stream.</li>
<li><b>Sigma</b>: The sigma value for the log-normal distribution returned by this RNG stream.</li>
</ul>
<b>ns3::LoraChannel</b><br>
<ul>
<li><b>PropagationDelayModel</b>: A pointer to the propagation delay model attached to this channel.</li>
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.</li>
</ul>
<b>ns3::LoraNetDevice</b><br>
<ul>
<li><b>Channel</b>: The channel attached to this device</li>
<li><b>Mac</b>: The MAC layer attached to this device.</li>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
</ul>
<b>ns3::LoraRadioEnergyModel</b><br>
<ul>
<li><b>RxCurrentA</b>: The radio Rx current in Ampere.</li>
<li><b>SleepCurrentA</b>: The radio Sleep current in Ampere.</li>
<li><b>StandbyCurrentA</b>: The default radio Standby current in Ampere.</li>
<li><b>TxCurrentA</b>: The radio Tx current in Ampere.</li>
<li><b>TxCurrentModel</b>: A pointer to the attached tx current model.</li>
</ul>
<b>ns3::MatrixPropagationLossModel</b><br>
<ul>
<li><b>DefaultLoss</b>: The default value for propagation loss, dB.</li>
</ul>
<b>ns3::MobilityModel</b><br>
<ul>
<li><b>Position</b>: The current position of the mobility model.</li>
<li><b>Velocity</b>: The current velocity of the mobility model.</li>
</ul>
<b>ns3::NakagamiPropagationLossModel</b><br>
<ul>
<li><b>Distance1</b>: Beginning of the second distance field. Default is 80m.</li>
<li><b>Distance2</b>: Beginning of the third distance field. Default is 200m.</li>
<li><b>ErlangRv</b>: Access to the underlying ErlangRandomVariable</li>
<li><b>GammaRv</b>: Access to the underlying GammaRandomVariable</li>
<li><b>m0</b>: m0 for distances smaller than Distance1. Default is 1.5.</li>
<li><b>m1</b>: m1 for distances smaller than Distance2. Default is 0.75.</li>
<li><b>m2</b>: m2 for distances greater than Distance2. Default is 0.75.</li>
</ul>
<b>ns3::NdiscCache</b><br>
<ul>
<li><b>UnresolvedQueueSize</b>: Size of the queue for packets pending an NA reply.</li>
</ul>
<b>ns3::NetDeviceQueueInterface</b><br>
<ul>
<li><b>NTxQueues</b>: The number of device transmission queues</li>
<li><b>TxQueuesType</b>: The type of transmission queues to be used</li>
</ul>
<b>ns3::Node</b><br>
<ul>
<li><b>ApplicationList</b>: The list of applications associated to this Node.</li>
<li><b>DeviceList</b>: The list of devices associated to this Node.</li>
<li><b>Id</b>: The id (unique integer) of this Node.</li>
<li><b>SystemId</b>: The systemId of this node: a unique integer used for parallel simulations.</li>
</ul>
<b>ns3::NodeListPriv</b><br>
<ul>
<li><b>NodeList</b>: The list of all nodes created during the simulation.</li>
</ul>
<b>ns3::NormalRandomVariable</b><br>
<ul>
<li><b>Bound</b>: The bound on the values returned by this RNG stream.</li>
<li><b>Mean</b>: The mean value for the normal distribution returned by this RNG stream.</li>
<li><b>Variance</b>: The variance value for the normal distribution returned by this RNG stream.</li>
</ul>
<b>ns3::OkumuraHataPropagationLossModel</b><br>
<ul>
<li><b>CitySize</b>: Dimension of the city</li>
<li><b>Environment</b>: Environment Scenario</li>
<li><b>Frequency</b>: The propagation frequency in Hz</li>
</ul>
<b>ns3::OnOffApplication</b><br>
<ul>
<li><b>DataRate</b>: The data rate in on state.</li>
<li><b>EnableSeqTsSizeHeader</b>: Enable use of SeqTsSizeHeader for sequence number and timestamp</li>
<li><b>Local</b>: The Address on which to bind the socket. If not set, it is generated automatically.</li>
<li><b>MaxBytes</b>: The total number of bytes to send. Once these bytes are sent, no packet is sent again, even in on state. The value zero means that there is no limit.</li>
<li><b>OffTime</b>: A RandomVariableStream used to pick the duration of the 'Off' state.</li>
<li><b>OnTime</b>: A RandomVariableStream used to pick the duration of the 'On' state.</li>
<li><b>PacketSize</b>: The size of packets sent in on state</li>
<li><b>Protocol</b>: The type of protocol to use. This should be a subclass of ns3::SocketFactory</li>
<li><b>Remote</b>: The address of the destination</li>
</ul>
<b>ns3::OutdoorPositionAllocator</b><br>
<ul>
<li><b>MaxAttempts</b>: Maximum number of attempts for the rejection sampling before giving up.</li>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random box.</li>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random box.</li>
<li><b>Z</b>: A random variable which represents the z coordinate of a position in a random box.</li>
</ul>
<b>ns3::PacketSink</b><br>
<ul>
<li><b>EnableSeqTsSizeHeader</b>: Enable optional header tracing of SeqTsSizeHeader</li>
<li><b>Local</b>: The Address on which to Bind the rx socket.</li>
<li><b>Protocol</b>: The type id of the protocol to use for the rx socket.</li>
</ul>
<b>ns3::PacketSocket</b><br>
<ul>
<li><b>RcvBufSize</b>: PacketSocket maximum receive buffer size (bytes)</li>
</ul>
<b>ns3::PacketSocketClient</b><br>
<ul>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)</li>
<li><b>PacketSize</b>: Size of packets generated (bytes).</li>
<li><b>Priority</b>: Priority assigned to the packets generated.</li>
</ul>
<b>ns3::ParetoRandomVariable</b><br>
<ul>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream (if non-zero).</li>
<li><b>Scale</b>: The scale parameter for the Pareto distribution returned by this RNG stream.</li>
<li><b>Shape</b>: The shape parameter for the Pareto distribution returned by this RNG stream.</li>
</ul>
<b>ns3::PcapFileWrapper</b><br>
<ul>
<li><b>CaptureSize</b>: Maximum length of captured packets (cf. pcap snaplen)</li>
<li><b>NanosecMode</b>: Whether packet timestamps in the PCAP file are nanoseconds or microseconds(default).</li>
</ul>
<b>ns3::PeriodicSender</b><br>
<ul>
<li><b>Interval</b>: The interval between packet sends of this app</li>
</ul>
<b>ns3::PfifoFastQueueDisc</b><br>
<ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc.</li>
</ul>
<b>ns3::PieQueueDisc</b><br>
<ul>
<li><b>A</b>: Value of alpha</li>
<li><b>ActiveThreshold</b>: Threshold for activating PIE (disabled by default)</li>
<li><b>B</b>: Value of beta</li>
<li><b>CeThreshold</b>: The FqPie CE threshold for marking packets</li>
<li><b>DequeueThreshold</b>: Minimum queue size in bytes before dequeue rate is measured</li>
<li><b>MarkEcnThreshold</b>: ECN marking threshold (RFC 8033 suggests 0.1 (i.e., 10%) default)</li>
<li><b>MaxBurstAllowance</b>: Current max burst allowance before random drop</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>MeanPktSize</b>: Average of packet size</li>
<li><b>QueueDelayReference</b>: Desired queue delay</li>
<li><b>Supdate</b>: Start time of the update timer</li>
<li><b>Tupdate</b>: Time period to calculate drop probability</li>
<li><b>UseCapDropAdjustment</b>: Enable/Disable Cap Drop Adjustment feature mentioned in RFC 8033</li>
<li><b>UseDequeueRateEstimator</b>: Enable/Disable usage of Dequeue Rate Estimator</li>
<li><b>UseDerandomization</b>: Enable/Disable Derandomization feature mentioned in RFC 8033</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)</li>
</ul>
<b>ns3::PointToPointChannel</b><br>
<ul>
<li><b>Delay</b>: Propagation delay through the channel</li>
</ul>
<b>ns3::PointToPointNetDevice</b><br>
<ul>
<li><b>Address</b>: The MAC address of this device.</li>
<li><b>DataRate</b>: The default data rate for point to point links</li>
<li><b>InterframeGap</b>: The time to wait between packet (frame) transmissions</li>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss</li>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.</li>
</ul>
<b>ns3::PrioQueueDisc</b><br>
<ul>
<li><b>Priomap</b>: The priority to band mapping.</li>
</ul>
<b>ns3::ProbabilisticV2vHighwayChannelConditionModel</b><br>
<ul>
<li><b>Density</b>: Specifies the density of the vehicles in the scenario.It can be set to Low, Medium or High.</li>
</ul>
<b>ns3::ProbabilisticV2vUrbanChannelConditionModel</b><br>
<ul>
<li><b>Density</b>: Specifies the density of the vehicles in the scenario.It can be set to Low, Medium or High.</li>
</ul>
<b>ns3::Probe</b><br>
<ul>
<li><b>Start</b>: Time data collection starts</li>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute</li>
</ul>
<b>ns3::QueueDisc</b><br>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.</li>
<li><b>PacketFilterList</b>: The list of packet filters.</li>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.</li>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run</li>
</ul>
<b>ns3::QueueDiscClass</b><br>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class</li>
</ul>
<b>ns3::RandomBoxPositionAllocator</b><br>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random box.</li>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random box.</li>
<li><b>Z</b>: A random variable which represents the z coordinate of a position in a random box.</li>
</ul>
<b>ns3::RandomBuildingPositionAllocator</b><br>
<ul>
<li><b>WithReplacement</b>: If true, the building will be randomly selected with replacement. If false, no replacement will occur, until the list of buildings to select becomes empty, at which point it will be filled again with the list of all buildings.</li>
</ul>
<b>ns3::RandomDirection2dMobilityModel</b><br>
<ul>
<li><b>Bounds</b>: The 2d bounding area</li>
<li><b>Pause</b>: A random variable to control the pause (s).</li>
<li><b>Speed</b>: A random variable to control the speed (m/s).</li>
</ul>
<b>ns3::RandomDiscPositionAllocator</b><br>
<ul>
<li><b>Rho</b>: A random variable which represents the radius of a position in a random disc.</li>
<li><b>Theta</b>: A random variable which represents the angle (gradients) of a position in a random disc.</li>
<li><b>X</b>: The x coordinate of the center of the random position disc.</li>
<li><b>Y</b>: The y coordinate of the center of the random position disc.</li>
<li><b>Z</b>: The z coordinate of all the positions in the disc.</li>
</ul>
<b>ns3::RandomPropagationDelayModel</b><br>
<ul>
<li><b>Variable</b>: The random variable which generates random delays (s).</li>
</ul>
<b>ns3::RandomPropagationLossModel</b><br>
<ul>
<li><b>Variable</b>: The random variable used to pick a loss every time CalcRxPower is invoked.</li>
</ul>
<b>ns3::RandomRectanglePositionAllocator</b><br>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random rectangle.</li>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random rectangle.</li>
<li><b>Z</b>: The z coordinate of all the positions allocated.</li>
</ul>
<b>ns3::RandomVariableStream</b><br>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values</li>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.</li>
</ul>
<b>ns3::RandomWalk2dMobilityModel</b><br>
<ul>
<li><b>Bounds</b>: Bounds of the area to cruise.</li>
<li><b>Direction</b>: A random variable used to pick the direction (radians).</li>
<li><b>Distance</b>: Change current direction and speed after moving for this distance.</li>
<li><b>Mode</b>: The mode indicates the condition used to change the current speed and direction</li>
<li><b>Speed</b>: A random variable used to pick the speed (m/s).</li>
<li><b>Time</b>: Change current direction and speed after moving for this delay.</li>
</ul>
<b>ns3::RandomWalk2dOutdoorMobilityModel</b><br>
<ul>
<li><b>Bounds</b>: Bounds of the area to cruise.</li>
<li><b>Direction</b>: A random variable used to pick the direction (radians).</li>
<li><b>Distance</b>: Change current direction and speed after moving for this distance.</li>
<li><b>MaxIterations</b>: Maximum number of attempts to find an alternative next positionif the original one is inside a building.</li>
<li><b>Mode</b>: The mode indicates the condition used to change the current speed and direction</li>
<li><b>Speed</b>: A random variable used to pick the speed (m/s).The default value is taken from Figure 1 of the paperHenderson, L.F., 1971. The statistics of crowd fluids. nature, 229(5284), p.381.</li>
<li><b>Time</b>: Change current direction and speed after moving for this delay.</li>
<li><b>Tolerance</b>: Tolerance for the intersection point with buildings (m).It represents a small distance from where the building limitis actually placed, for example to represent a sidewalk.</li>
</ul>
<b>ns3::RandomWaypointMobilityModel</b><br>
<ul>
<li><b>Pause</b>: A random variable used to pick the pause of a random waypoint model.</li>
<li><b>PositionAllocator</b>: The position model used to pick a destination point.</li>
<li><b>Speed</b>: A random variable used to pick the speed of a random waypoint model.</li>
</ul>
<b>ns3::RangePropagationLossModel</b><br>
<ul>
<li><b>MaxRange</b>: Maximum Transmission Range (meters)</li>
</ul>
<b>ns3::RateErrorModel</b><br>
<ul>
<li><b>ErrorRate</b>: The error rate.</li>
<li><b>ErrorUnit</b>: The error unit</li>
<li><b>RanVar</b>: The decision variable attached to this error model.</li>
</ul>
<b>ns3::RealtimeSimulatorImpl</b><br>
<ul>
<li><b>HardLimit</b>: Maximum acceptable real-time jitter (used in conjunction with SynchronizationMode=HardLimit)</li>
<li><b>SynchronizationMode</b>: What to do if the simulation cannot keep up with real time.</li>
</ul>
<b>ns3::RedQueueDisc</b><br>
<ul>
<li><b>ARED</b>: True to enable ARED</li>
<li><b>AdaptMaxP</b>: True to adapt m_curMaxP</li>
<li><b>Alpha</b>: Increment parameter for m_curMaxP in ARED</li>
<li><b>Beta</b>: Decrement parameter for m_curMaxP in ARED</li>
<li><b>Bottom</b>: Lower bound for m_curMaxP in ARED</li>
<li><b>FengAdaptive</b>: True to enable Feng's Adaptive RED</li>
<li><b>FengAlpha</b>: Decrement parameter for m_curMaxP in Feng's Adaptive RED</li>
<li><b>FengBeta</b>: Increment parameter for m_curMaxP in Feng's Adaptive RED</li>
<li><b>Gentle</b>: True to increases dropping probability slowly when average queue exceeds maxthresh</li>
<li><b>IdlePktSize</b>: Average packet size used during idle times. Used when m_cautions = 3</li>
<li><b>Interval</b>: Time interval to update m_curMaxP</li>
<li><b>LInterm</b>: The maximum probability of dropping a packet</li>
<li><b>LastSet</b>: Store the last time m_curMaxP was updated</li>
<li><b>LinkBandwidth</b>: The RED link bandwidth</li>
<li><b>LinkDelay</b>: The RED link delay</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>MaxTh</b>: Maximum average length threshold in packets/bytes</li>
<li><b>MeanPktSize</b>: Average of packet size</li>
<li><b>MinTh</b>: Minimum average length threshold in packets/bytes</li>
<li><b>NLRED</b>: True to enable Nonlinear RED</li>
<li><b>Ns1Compat</b>: NS-1 compatibility</li>
<li><b>QW</b>: Queue weight related to the exponential weighted moving average (EWMA)</li>
<li><b>Rtt</b>: Round Trip Time to be considered while automatically setting m_bottom</li>
<li><b>TargetDelay</b>: Target average queuing delay in ARED</li>
<li><b>Top</b>: Upper bound for m_curMaxP in ARED</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseHardDrop</b>: True to always drop packets above max threshold</li>
<li><b>Wait</b>: True for waiting between dropped packets</li>
</ul>
<b>ns3::Rip</b><br>
<ul>
<li><b>GarbageCollectionDelay</b>: The delay to delete an expired route.</li>
<li><b>LinkDownValue</b>: Value for link down in count to infinity.</li>
<li><b>MaxTriggeredCooldown</b>: Max cooldown delay after a Triggered Update.</li>
<li><b>MinTriggeredCooldown</b>: Min cooldown delay after a Triggered Update.</li>
<li><b>SplitHorizon</b>: Split Horizon strategy.</li>
<li><b>StartupDelay</b>: Maximum random delay for protocol startup (send route requests).</li>
<li><b>TimeoutDelay</b>: The delay to invalidate a route.</li>
<li><b>UnsolicitedRoutingUpdate</b>: The time between two Unsolicited Routing Updates.</li>
</ul>
<b>ns3::RipNg</b><br>
<ul>
<li><b>GarbageCollectionDelay</b>: The delay to delete an expired route.</li>
<li><b>LinkDownValue</b>: Value for link down in count to infinity.</li>
<li><b>MaxTriggeredCooldown</b>: Max cooldown delay after a Triggered Update.</li>
<li><b>MinTriggeredCooldown</b>: Min cooldown delay after a Triggered Update.</li>
<li><b>SplitHorizon</b>: Split Horizon strategy.</li>
<li><b>StartupDelay</b>: Maximum random delay for protocol startup (send route requests).</li>
<li><b>TimeoutDelay</b>: The delay to invalidate a route.</li>
<li><b>UnsolicitedRoutingUpdate</b>: The time between two Unsolicited Routing Updates.</li>
</ul>
<b>ns3::RttEstimator</b><br>
<ul>
<li><b>InitialEstimation</b>: Initial RTT estimate</li>
</ul>
<b>ns3::RttMeanDeviation</b><br>
<ul>
<li><b>Alpha</b>: Gain used in estimating the RTT, must be 0 <= alpha <= 1</li>
<li><b>Beta</b>: Gain used in estimating the RTT variation, must be 0 <= beta <= 1</li>
</ul>
<b>ns3::RvBatteryModel</b><br>
<ul>
<li><b>RvBatteryModelAlphaValue</b>: RV battery model alpha value.</li>
<li><b>RvBatteryModelBetaValue</b>: RV battery model beta value.</li>
<li><b>RvBatteryModelCutoffVoltage</b>: RV battery model cutoff voltage.</li>
<li><b>RvBatteryModelLowBatteryThreshold</b>: Low battery threshold.</li>
<li><b>RvBatteryModelNumOfTerms</b>: The number of terms of the infinite sum for estimating battery level.</li>
<li><b>RvBatteryModelOpenCircuitVoltage</b>: RV battery model open circuit voltage.</li>
<li><b>RvBatteryModelPeriodicEnergyUpdateInterval</b>: RV battery model sampling interval.</li>
</ul>
<b>ns3::SequentialRandomVariable</b><br>
<ul>
<li><b>Consecutive</b>: The number of times each member of the sequence is repeated.</li>
<li><b>Increment</b>: The sequence random variable increment.</li>
<li><b>Max</b>: One more than the last value of the sequence.</li>
<li><b>Min</b>: The first value of the sequence.</li>
</ul>
<b>ns3::SimpleChannel</b><br>
<ul>
<li><b>Delay</b>: Transmission delay through the channel</li>
</ul>
<b>ns3::SimpleNetDevice</b><br>
<ul>
<li><b>DataRate</b>: The default data rate for point to point links. Zero means infinite</li>
<li><b>PointToPointMode</b>: The device is configured in Point to Point mode</li>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss</li>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.</li>
</ul>
<b>ns3::SteadyStateRandomWaypointMobilityModel</b><br>
<ul>
<li><b>MaxPause</b>: Maximum pause value, [s]</li>
<li><b>MaxSpeed</b>: Maximum speed value, [m/s]</li>
<li><b>MaxX</b>: Maximum X value of traveling region, [m]</li>
<li><b>MaxY</b>: Maximum Y value of traveling region, [m]</li>
<li><b>MinPause</b>: Minimum pause value, [s]</li>
<li><b>MinSpeed</b>: Minimum speed value, [m/s]</li>
<li><b>MinX</b>: Minimum X value of traveling region, [m]</li>
<li><b>MinY</b>: Minimum Y value of traveling region, [m]</li>
<li><b>Z</b>: Z value of traveling region (fixed), [m]</li>
</ul>
<b>ns3::TbfQueueDisc</b><br>
<ul>
<li><b>Burst</b>: Size of the first bucket in bytes</li>
<li><b>MaxSize</b>: The max queue size</li>
<li><b>Mtu</b>: Size of the second bucket in bytes. If null, it is initialized to the MTU of the receiving NetDevice (if any)</li>
<li><b>PeakRate</b>: Rate at which tokens enter the second bucket in bps or Bps.If null, there is no second bucket</li>
<li><b>Rate</b>: Rate at which tokens enter the first bucket in bps or Bps.</li>
</ul>
<b>ns3::TcpBbr</b><br>
<ul>
<li><b>AckEpochAckedResetThresh</b>: Max allowed val for m_ackEpochAcked, after which sampling epoch is reset</li>
<li><b>BwWindowLength</b>: Length of bandwidth windowed filter</li>
<li><b>ExtraAckedRttWindowLength</b>: Window length of extra acked window</li>
<li><b>HighGain</b>: Value of high gain</li>
<li><b>ProbeRttDuration</b>: Time to be spent in PROBE_RTT phase</li>
<li><b>RttWindowLength</b>: Length of RTT windowed filter</li>
<li><b>Stream</b>: Random number stream (default is set to 4 to align with Linux results)</li>
</ul>
<b>ns3::TcpBic</b><br>
<ul>
<li><b>Beta</b>: Beta for multiplicative decrease</li>
<li><b>BinarySearchCoefficient</b>: Inverse of the coefficient for the binary search. Default 4, as in Linux</li>
<li><b>FastConvergence</b>: Turn on/off fast convergence.</li>
<li><b>LowWnd</b>: Threshold window size (in segments) for engaging BIC response</li>
<li><b>MaxIncr</b>: Limit on increment allowed during binary search</li>
<li><b>SmoothPart</b>: Number of RTT needed to approach cWnd_max from cWnd_max-BinarySearchCoefficient. It can be viewed as the gradient of the slow start AIM phase: less this value is, more steep the increment will be.</li>
</ul>
<b>ns3::TcpCubic</b><br>
<ul>
<li><b>Beta</b>: Beta for multiplicative decrease</li>
<li><b>C</b>: Cubic Scaling factor</li>
<li><b>CntClamp</b>: Counter value when no losses are detected (counter is used when incrementing cWnd in congestion avoidance, to avoid floating point arithmetic). It is the modulo of the (avoided) division</li>
<li><b>CubicDelta</b>: Delta Time to wait after fast recovery before adjusting param</li>
<li><b>FastConvergence</b>: Enable (true) or disable (false) fast convergence</li>
<li><b>HyStart</b>: Enable (true) or disable (false) hybrid slow start algorithm</li>
<li><b>HyStartAckDelta</b>: Spacing between ack's indicating train</li>
<li><b>HyStartDelayMax</b>: Maximum time for hystart algorithm</li>
<li><b>HyStartDelayMin</b>: Minimum time for hystart algorithm</li>
<li><b>HyStartDetect</b>: Hybrid Slow Start detection mechanisms:packet train, delay, both</li>
<li><b>HyStartLowWindow</b>: Lower bound cWnd for hybrid slow start (segments)</li>
<li><b>HyStartMinSamples</b>: Number of delay samples for detecting the increase of delay</li>
<li><b>TcpFriendliness</b>: Enable (true) or disable (false) TCP friendliness</li>
</ul>
<b>ns3::TcpDctcp</b><br>
<ul>
<li><b>DctcpAlphaOnInit</b>: Initial alpha value</li>
<li><b>DctcpShiftG</b>: Parameter G for updating dctcp_alpha</li>
<li><b>UseEct0</b>: Use ECT(0) for ECN codepoint, if false use ECT(1)</li>
</ul>
<b>ns3::TcpHtcp</b><br>
<ul>
<li><b>DefaultBackoff</b>: The default AIMD backoff factor</li>
<li><b>DeltaL</b>: Delta_L parameter in increase function</li>
<li><b>ThroughputRatio</b>: Threshold value for updating beta</li>
</ul>
<b>ns3::TcpHybla</b><br>
<ul>
<li><b>RRTT</b>: Reference RTT</li>
</ul>
<b>ns3::TcpIllinois</b><br>
<ul>
<li><b>AlphaBase</b>: Alpha base threshold</li>
<li><b>AlphaMax</b>: Maximum alpha threshold</li>
<li><b>AlphaMin</b>: Minimum alpha threshold</li>
<li><b>BetaBase</b>: Beta base threshold</li>
<li><b>BetaMax</b>: Maximum beta threshold</li>
<li><b>BetaMin</b>: Minimum beta threshold</li>
<li><b>Theta</b>: Theta threshold</li>
<li><b>WinThresh</b>: Window threshold</li>
</ul>
<b>ns3::TcpL4Protocol</b><br>
<ul>
<li><b>RecoveryType</b>: Recovery type of TCP objects.</li>
<li><b>RttEstimatorType</b>: Type of RttEstimator objects.</li>
<li><b>SocketList</b>: A container of sockets associated to this protocol. The underlying type is an unordered map, the attribute name is kept for backward compatibility.</li>
<li><b>SocketType</b>: Socket type of TCP objects.</li>
</ul>
<b>ns3::TcpLedbat</b><br>
<ul>
<li><b>BaseHistoryLen</b>: Number of Base delay samples</li>
<li><b>Gain</b>: Offset Gain</li>
<li><b>MinCwnd</b>: Minimum cWnd for Ledbat</li>
<li><b>NoiseFilterLen</b>: Number of Current delay samples</li>
<li><b>SSParam</b>: Possibility of Slow Start</li>
<li><b>TargetDelay</b>: Targeted Queue Delay</li>
</ul>
<b>ns3::TcpPrrRecovery</b><br>
<ul>
<li><b>ReductionBound</b>: Type of Reduction Bound</li>
</ul>
<b>ns3::TcpScalable</b><br>
<ul>
<li><b>AIFactor</b>: Additive Increase Factor</li>
<li><b>MDFactor</b>: Multiplicative Decrease Factor</li>
</ul>
<b>ns3::TcpSocket</b><br>
<ul>
<li><b>ConnCount</b>: Number of connection attempts (SYN retransmissions) before returning failure</li>
<li><b>ConnTimeout</b>: TCP retransmission timeout when opening connection (seconds)</li>
<li><b>DataRetries</b>: Number of data retransmission attempts</li>
<li><b>DelAckCount</b>: Number of packets to wait before sending a TCP ack</li>
<li><b>DelAckTimeout</b>: Timeout value for TCP delayed acks, in seconds</li>
<li><b>InitialCwnd</b>: TCP initial congestion window size (segments)</li>
<li><b>InitialSlowStartThreshold</b>: TCP initial slow start threshold (bytes)</li>
<li><b>PersistTimeout</b>: Persist timeout to probe for rx window</li>
<li><b>RcvBufSize</b>: TcpSocket maximum receive buffer size (bytes)</li>
<li><b>SegmentSize</b>: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)</li>
<li><b>SndBufSize</b>: TcpSocket maximum transmit buffer size (bytes)</li>
<li><b>TcpNoDelay</b>: Set to true to disable Nagle's algorithm</li>
</ul>
<b>ns3::TcpSocketBase</b><br>
<ul>
<li><b>ClockGranularity</b>: Clock Granularity used in RTO calculations</li>
<li><b>CongestionOps</b>: Pointer to TcpCongestionOps object</li>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.</li>
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.</li>
<li><b>LimitedTransmit</b>: Enable limited transmit</li>
<li><b>MaxSegLifetime</b>: Maximum segment lifetime in seconds, use for TIME_WAIT state transition to CLOSED state</li>
<li><b>MaxWindowSize</b>: Max size of advertised window</li>
<li><b>MinRto</b>: Minimum retransmit timeout value</li>
<li><b>ReTxThreshold</b>: Threshold for fast retransmit</li>
<li><b>RxBuffer</b>: TCP Rx buffer</li>
<li><b>Sack</b>: Enable or disable Sack option</li>
<li><b>Timestamp</b>: Enable or disable Timestamp option</li>
<li><b>TxBuffer</b>: TCP Tx buffer</li>
<li><b>UseEcn</b>: Parameter to set ECN functionality</li>
<li><b>WindowScaling</b>: Enable or disable Window Scaling option</li>
</ul>
<b>ns3::TcpSocketState</b><br>
<ul>
<li><b>EnablePacing</b>: Enable Pacing</li>
<li><b>MaxPacingRate</b>: Set Max Pacing Rate</li>
<li><b>PaceInitialWindow</b>: Perform pacing for initial window of data</li>
<li><b>PacingCaRatio</b>: Percent pacing rate increase for congestion avoidance conditions</li>
<li><b>PacingSsRatio</b>: Percent pacing rate increase for slow start conditions</li>
</ul>
<b>ns3::TcpVegas</b><br>
<ul>
<li><b>Alpha</b>: Lower bound of packets in network</li>
<li><b>Beta</b>: Upper bound of packets in network</li>
<li><b>Gamma</b>: Limit on increase</li>
</ul>
<b>ns3::TcpVeno</b><br>
<ul>
<li><b>Beta</b>: Threshold for congestion detection</li>
</ul>
<b>ns3::TcpWestwoodPlus</b><br>
<ul>
<li><b>FilterType</b>: Use this to choose no filter or Tustin's approximation filter</li>
</ul>
<b>ns3::TcpYeah</b><br>
<ul>
<li><b>Alpha</b>: Maximum backlog allowed at the bottleneck queue</li>
<li><b>Delta</b>: Log minimum fraction of cwnd to be removed on loss</li>
<li><b>Epsilon</b>: Log maximum fraction to be removed on early decongestion</li>
<li><b>Gamma</b>: Fraction of queue to be removed per RTT</li>
<li><b>Phy</b>: Maximum delta from base</li>
<li><b>Rho</b>: Minimum # of consecutive RTT to consider competition on loss</li>
<li><b>StcpAiFactor</b>: STCP additive increase factor</li>
<li><b>Zeta</b>: Minimum # of state switches to reset m_renoCount</li>
</ul>
<b>ns3::ThreeGppChannelConditionModel</b><br>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.</li>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low</li>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.</li>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.</li>
</ul>
<b>ns3::ThreeGppHttpClient</b><br>
<ul>
<li><b>RemoteServerAddress</b>: The address of the destination server.</li>
<li><b>RemoteServerPort</b>: The destination port of the outbound packets.</li>
<li><b>Variables</b>: Variable collection, which is used to control e.g. timing and HTTP request size.</li>
</ul>
<b>ns3::ThreeGppHttpServer</b><br>
<ul>
<li><b>LocalAddress</b>: The local address of the server, i.e., the address on which to bind the Rx socket.</li>
<li><b>LocalPort</b>: Port on which the application listen for incoming packets.</li>
<li><b>Mtu</b>: Maximum transmission unit (in bytes) of the TCP sockets used in this application, excluding the compulsory 40 bytes TCP header. Typical values are 1460 and 536 bytes. The attribute is read-only because the value is randomly determined.</li>
<li><b>Variables</b>: Variable collection, which is used to control e.g. processing and object generation delays.</li>
</ul>
<b>ns3::ThreeGppHttpVariables</b><br>
<ul>
<li><b>EmbeddedObjectGenerationDelay</b>: The constant time needed by HTTP server to generate an embedded object as a response.</li>
<li><b>EmbeddedObjectSizeMax</b>: The maximum value of embedded object sizes (in bytes).</li>
<li><b>EmbeddedObjectSizeMean</b>: The mean of embedded object sizes (in bytes).</li>
<li><b>EmbeddedObjectSizeMin</b>: The minimum value of embedded object sizes (in bytes).</li>
<li><b>EmbeddedObjectSizeStdDev</b>: The standard deviation of embedded object sizes (in bytes).</li>
<li><b>HighMtuProbability</b>: The probability that higher MTU size is used.</li>
<li><b>HighMtuSize</b>: The higher MTU size.</li>
<li><b>LowMtuSize</b>: The lower MTU size.</li>
<li><b>MainObjectGenerationDelay</b>: The constant time needed by HTTP server to generate a main object as a response.</li>
<li><b>MainObjectSizeMax</b>: The maximum value of main object sizes (in bytes).</li>
<li><b>MainObjectSizeMean</b>: The mean of main object sizes (in bytes).</li>
<li><b>MainObjectSizeMin</b>: The minimum value of main object sizes (in bytes).</li>
<li><b>MainObjectSizeStdDev</b>: The standard deviation of main object sizes (in bytes).</li>
<li><b>NumOfEmbeddedObjectsMax</b>: The upper bound parameter of Pareto distribution for the number of embedded objects per web page. The actual maximum value is this value subtracted by the scale parameter.</li>
<li><b>NumOfEmbeddedObjectsScale</b>: The scale parameter of Pareto distribution for the number of embedded objects per web page.</li>
<li><b>NumOfEmbeddedObjectsShape</b>: The shape parameter of Pareto distribution for the number of embedded objects per web page.</li>
<li><b>ParsingTimeMean</b>: The mean of parsing time.</li>
<li><b>ReadingTimeMean</b>: The mean of reading time.</li>
<li><b>RequestSize</b>: The constant size of HTTP request packet (in bytes).</li>
</ul>
<b>ns3::ThreeGppPropagationLossModel</b><br>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.</li>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.</li>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges</li>
<li><b>Frequency</b>: The centre frequency in Hz.</li>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.</li>
</ul>
<b>ns3::ThreeGppRmaPropagationLossModel</b><br>
<ul>
<li><b>AvgBuildingHeight</b>: The average building height in meters.</li>
<li><b>AvgStreetWidth</b>: The average street width in meters.</li>
</ul>
<b>ns3::ThreeGppV2vUrbanPropagationLossModel</b><br>
<ul>
<li><b>PercType3Vehicles</b>: The percentage of vehicles of type 3 (i.e., trucks) in the scenario</li>
</ul>
<b>ns3::ThreeLogDistancePropagationLossModel</b><br>
<ul>
<li><b>Distance0</b>: Beginning of the first (near) distance field</li>
<li><b>Distance1</b>: Beginning of the second (middle) distance field.</li>
<li><b>Distance2</b>: Beginning of the third (far) distance field.</li>
<li><b>Exponent0</b>: The exponent for the first field.</li>
<li><b>Exponent1</b>: The exponent for the second field.</li>
<li><b>Exponent2</b>: The exponent for the third field.</li>
<li><b>ReferenceLoss</b>: The reference loss at distance d0 (dB). (Default is Friis at 1m with 5.15 GHz)</li>
</ul>
<b>ns3::TrafficControlLayer</b><br>
<ul>
<li><b>RootQueueDiscList</b>: The list of root queue discs associated to this Traffic Control layer.</li>
</ul>
<b>ns3::TriangularRandomVariable</b><br>
<ul>
<li><b>Max</b>: The upper bound on the values returned by this RNG stream.</li>
<li><b>Mean</b>: The mean value for the triangular distribution returned by this RNG stream.</li>
<li><b>Min</b>: The lower bound on the values returned by this RNG stream.</li>
</ul>
<b>ns3::TwoRayGroundPropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The carrier frequency (in Hz) at which propagation occurs  (default is 5.15 GHz).</li>
<li><b>HeightAboveZ</b>: The height of the antenna (m) above the node's Z coordinate</li>
<li><b>MinDistance</b>: The distance under which the propagation model refuses to give results (m)</li>
<li><b>SystemLoss</b>: The system loss</li>
</ul>
<b>ns3::UdpClient</b><br>
<ul>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)</li>
<li><b>PacketSize</b>: Size of packets generated. The minimum packet size is 12 bytes which is the size of the header carrying the sequence number and the time stamp.</li>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets</li>
<li><b>RemotePort</b>: The destination port of the outbound packets</li>
</ul>
<b>ns3::UdpEchoClient</b><br>
<ul>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)</li>
<li><b>PacketSize</b>: Size of echo data in outbound packets</li>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets</li>
<li><b>RemotePort</b>: The destination port of the outbound packets</li>
</ul>
<b>ns3::UdpEchoServer</b><br>
<ul>
<li><b>Port</b>: Port on which we listen for incoming packets.</li>
</ul>
<b>ns3::UdpL4Protocol</b><br>
<ul>
<li><b>SocketList</b>: A container of sockets associated to this protocol. The underlying type is an unordered map, the attribute name is kept for backward compatibility.</li>
</ul>
<b>ns3::UdpServer</b><br>
<ul>
<li><b>PacketWindowSize</b>: The size of the window used to compute the packet loss. This value should be a multiple of 8.</li>
<li><b>Port</b>: Port on which we listen for incoming packets.</li>
</ul>
<b>ns3::UdpSocket</b><br>
<ul>
<li><b>IpMulticastIf</b>: interface index for outgoing multicast on this socket; -1 indicates to use default interface</li>
<li><b>IpMulticastLoop</b>: whether outgoing multicast sent also to loopback interface</li>
<li><b>IpMulticastTtl</b>: socket-specific TTL for multicast IP packets (if non-zero)</li>
<li><b>IpTtl</b>: socket-specific TTL for unicast IP packets (if non-zero)</li>
<li><b>MtuDiscover</b>: If enabled, every outgoing ip packet will have the DF flag set.</li>
<li><b>RcvBufSize</b>: UdpSocket maximum receive buffer size (bytes)</li>
</ul>
<b>ns3::UdpSocketImpl</b><br>
<ul>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.</li>
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.</li>
</ul>
<b>ns3::UdpTraceClient</b><br>
<ul>
<li><b>MaxPacketSize</b>: The maximum size of a packet (including the SeqTsHeader, 12 bytes).</li>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets</li>
<li><b>RemotePort</b>: The destination port of the outbound packets</li>
<li><b>TraceFilename</b>: Name of file to load a trace from. By default, uses a hardcoded trace.</li>
<li><b>TraceLoop</b>: Loops through the trace file, starting again once it is over.</li>
</ul>
<b>ns3::UniformDiscPositionAllocator</b><br>
<ul>
<li><b>X</b>: The x coordinate of the center of the  disc.</li>
<li><b>Y</b>: The y coordinate of the center of the  disc.</li>
<li><b>Z</b>: The z coordinate of all the positions in the disc.</li>
<li><b>rho</b>: The radius of the disc</li>
</ul>
<b>ns3::UniformRandomVariable</b><br>
<ul>
<li><b>Max</b>: The upper bound on the values returned by this RNG stream.</li>
<li><b>Min</b>: The lower bound on the values returned by this RNG stream.</li>
</ul>
<b>ns3::WaypointMobilityModel</b><br>
<ul>
<li><b>InitialPositionIsWaypoint</b>: Calling SetPosition with no waypoints creates a waypoint.</li>
<li><b>LazyNotify</b>: Only call NotifyCourseChange when position is calculated.</li>
<li><b>NextWaypoint</b>: The next waypoint used to determine position.</li>
<li><b>WaypointsLeft</b>: The number of waypoints remaining.</li>
</ul>
<b>ns3::WeibullRandomVariable</b><br>
<ul>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream.</li>
<li><b>Scale</b>: The scale parameter for the Weibull distribution returned by this RNG stream.</li>
<li><b>Shape</b>: The shape parameter for the Weibull distribution returned by this RNG stream.</li>
</ul>
<b>ns3::ZetaRandomVariable</b><br>
<ul>
<li><b>Alpha</b>: The alpha value for the zeta distribution returned by this RNG stream.</li>
</ul>
<b>ns3::ZipfRandomVariable</b><br>
<ul>
<li><b>Alpha</b>: The alpha value for the Zipf distribution returned by this RNG stream.</li>
<li><b>N</b>: The n value for the Zipf distribution returned by this RNG stream.</li>
</ul>
*/

/*!
\page GlobalValueList All GlobalValues

This is a list of all \ref ns3::GlobalValue instances.
See ns3::GlobalValue for how to set these.
<ul>
  <li><b>[SimulatorImplementationType](\ref GlobalValueSimulatorImplementationType)</b>: The object class to use as the simulator implementation.  Default value: ns3::DefaultSimulatorImpl.</li>
  <li><b>[SchedulerType](\ref GlobalValueSchedulerType)</b>: The object class to use as the scheduler implementation.  Default value: ns3::MapScheduler.</li>
  <li><b>[RngSeed](\ref GlobalValueRngSeed)</b>: The global seed of all rng streams.  Default value: 1.</li>
  <li><b>[RngRun](\ref GlobalValueRngRun)</b>: The substream index used for all streams.  Default value: 1.</li>
  <li><b>[ChecksumEnabled](\ref GlobalValueChecksumEnabled)</b>: A global switch to enable all checksums for all protocols.  Default value: false.</li>
</ul>
*/

/*!
\page LogComponentList All LogComponents

This is a list of all \ref ns3::LogComponent instances.

| Log Component                               | File                                                                                              |
| :------------------------------------------ | :------------------------------------------------------------------------------------------------ |
| PrintIntrospectedDoxygen                    | /__w/lorawan/lorawan/utils/print-introspected-doxygen.cc                                          |
| LoraPhyHelper                               | /__w/lorawan/lorawan/src/lorawan/helper/lora-phy-helper.cc                                        |
| HexGridPositionAllocator                    | /__w/lorawan/lorawan/src/lorawan/model/hex-grid-position-allocator.cc                             |
| AdrComponent                                | /__w/lorawan/lorawan/src/lorawan/model/adr-component.cc                                           |
| LoraTxCurrentModel                          | /__w/lorawan/lorawan/src/lorawan/model/lora-tx-current-model.cc                                   |
| GatewayStatus                               | /__w/lorawan/lorawan/src/lorawan/model/gateway-status.cc                                          |
| EndDeviceStatus                             | /__w/lorawan/lorawan/src/lorawan/model/end-device-status.cc                                       |
| NetworkScheduler                            | /__w/lorawan/lorawan/src/lorawan/model/network-scheduler.cc                                       |
| NetworkStatus                               | /__w/lorawan/lorawan/src/lorawan/model/network-status.cc                                          |
| LoraDeviceAddressGenerator                  | /__w/lorawan/lorawan/src/lorawan/model/lora-device-address-generator.cc                           |
| LorawanMacHeader                            | /__w/lorawan/lorawan/src/lorawan/model/lorawan-mac-header.cc                                      |
| Forwarder                                   | /__w/lorawan/lorawan/src/lorawan/model/forwarder.cc                                               |
| OneShotSender                               | /__w/lorawan/lorawan/src/lorawan/model/one-shot-sender.cc                                         |
| PeriodicSender                              | /__w/lorawan/lorawan/src/lorawan/model/periodic-sender.cc                                         |
| LogicalLoraChannelHelper                    | /__w/lorawan/lorawan/src/lorawan/model/logical-lora-channel-helper.cc                             |
| EndDeviceLoraPhy                            | /__w/lorawan/lorawan/src/lorawan/model/end-device-lora-phy.cc                                     |
| ClassAEndDeviceLorawanMac                   | /__w/lorawan/lorawan/src/lorawan/model/class-a-end-device-lorawan-mac.cc                          |
| GatewayLorawanMac                           | /__w/lorawan/lorawan/src/lorawan/model/gateway-lorawan-mac.cc                                     |
| OneShotSenderHelper                         | /__w/lorawan/lorawan/src/lorawan/helper/one-shot-sender-helper.cc                                 |
| LoraPhy                                     | /__w/lorawan/lorawan/src/lorawan/model/lora-phy.cc                                                |
| LoraNetDevice                               | /__w/lorawan/lorawan/src/lorawan/model/lora-net-device.cc                                         |
| LorawanMacHelper                            | /__w/lorawan/lorawan/src/lorawan/helper/lorawan-mac-helper.cc                                     |
| UdpServer                                   | /__w/lorawan/lorawan/src/applications/model/udp-server.cc                                         |
| ThreeGppHttpHeader                          | /__w/lorawan/lorawan/src/applications/model/three-gpp-http-header.cc                              |
| ThreeGppHttpClient                          | /__w/lorawan/lorawan/src/applications/model/three-gpp-http-client.cc                              |
| SeqTsSizeHeader                             | /__w/lorawan/lorawan/src/applications/model/seq-ts-size-header.cc                                 |
| SeqTsHeader                                 | /__w/lorawan/lorawan/src/applications/model/seq-ts-header.cc                                      |
| CorrelatedShadowingPropagationLossModel     | /__w/lorawan/lorawan/src/lorawan/model/correlated-shadowing-propagation-loss-model.cc             |
| SeqTsEchoHeader                             | /__w/lorawan/lorawan/src/applications/model/seq-ts-echo-header.cc                                 |
| BulkSendApplication                         | /__w/lorawan/lorawan/src/applications/model/bulk-send-application.cc                              |
| ApplicationPacketProbe                      | /__w/lorawan/lorawan/src/applications/model/application-packet-probe.cc                           |
| SimpleDeviceEnergyModel                     | /__w/lorawan/lorawan/src/energy/model/simple-device-energy-model.cc                               |
| RvBatteryModel                              | /__w/lorawan/lorawan/src/energy/model/rv-battery-model.cc                                         |
| GenericBatteryModel                         | /__w/lorawan/lorawan/src/energy/model/generic-battery-model.cc                                    |
| EnergyHarvester                             | /__w/lorawan/lorawan/src/energy/model/energy-harvester.cc                                         |
| DeviceEnergyModel                           | /__w/lorawan/lorawan/src/energy/model/device-energy-model.cc                                      |
| DeviceEnergyModelContainer                  | /__w/lorawan/lorawan/src/energy/model/device-energy-model-container.cc                            |
| BasicEnergySource                           | /__w/lorawan/lorawan/src/energy/model/basic-energy-source.cc                                      |
| LoraRadioEnergyModel                        | /__w/lorawan/lorawan/src/lorawan/model/lora-radio-energy-model.cc                                 |
| PacketLossCounter                           | /__w/lorawan/lorawan/src/applications/model/packet-loss-counter.cc                                |
| BasicEnergyHarvester                        | /__w/lorawan/lorawan/src/energy/model/basic-energy-harvester.cc                                   |
| PppHeader                                   | /__w/lorawan/lorawan/src/point-to-point/model/ppp-header.cc                                       |
| UdpEchoClientApplication                    | /__w/lorawan/lorawan/src/applications/model/udp-echo-client.cc                                    |
| PointToPointNetDevice                       | /__w/lorawan/lorawan/src/point-to-point/model/point-to-point-net-device.cc                        |
| ThreeGppV2vChannelConditionModel            | /__w/lorawan/lorawan/src/buildings/model/three-gpp-v2v-channel-condition-model.cc                 |
| LoraDeviceAddress                           | /__w/lorawan/lorawan/src/lorawan/model/lora-device-address.cc                                     |
| RandomWalk2dOutdoor                         | /__w/lorawan/lorawan/src/buildings/model/random-walk-2d-outdoor-mobility-model.cc                 |
| OhBuildingsPropagationLossModel             | /__w/lorawan/lorawan/src/buildings/model/oh-buildings-propagation-loss-model.cc                   |
| ItuR1238PropagationLossModel                | /__w/lorawan/lorawan/src/buildings/model/itu-r-1238-propagation-loss-model.cc                     |
| BuildingsChannelConditionModel              | /__w/lorawan/lorawan/src/buildings/model/buildings-channel-condition-model.cc                     |
| BuildingAllocator                           | /__w/lorawan/lorawan/src/buildings/helper/building-allocator.cc                                   |
| MobilityBuildingInfo                        | /__w/lorawan/lorawan/src/buildings/model/mobility-building-info.cc                                |
| PropagationLossModel                        | /__w/lorawan/lorawan/src/propagation/model/propagation-loss-model.cc                              |
| ProbabilisticV2vChannelConditionModel       | /__w/lorawan/lorawan/src/propagation/model/probabilistic-v2v-channel-condition-model.cc           |
| OkumuraHataPropagationLossModel             | /__w/lorawan/lorawan/src/propagation/model/okumura-hata-propagation-loss-model.cc                 |
| HybridBuildingsPropagationLossModel         | /__w/lorawan/lorawan/src/buildings/model/hybrid-buildings-propagation-loss-model.cc               |
| BuildingList                                | /__w/lorawan/lorawan/src/buildings/model/building-list.cc                                         |
| Jakes                                       | /__w/lorawan/lorawan/src/propagation/model/jakes-propagation-loss-model.cc                        |
| ItuR1411LosPropagationLossModel             | /__w/lorawan/lorawan/src/propagation/model/itu-r-1411-los-propagation-loss-model.cc               |
| Cost231PropagationLossModel                 | /__w/lorawan/lorawan/src/propagation/model/cost231-propagation-loss-model.cc                      |
| ChannelConditionModel                       | /__w/lorawan/lorawan/src/propagation/model/channel-condition-model.cc                             |
| RandomDirection2dMobilityModel              | /__w/lorawan/lorawan/src/mobility/model/random-direction-2d-mobility-model.cc                     |
| HierarchicalMobilityModel                   | /__w/lorawan/lorawan/src/mobility/model/hierarchical-mobility-model.cc                            |
| GeographicPositions                         | /__w/lorawan/lorawan/src/mobility/model/geographic-positions.cc                                   |
| ConstantVelocityHelper                      | /__w/lorawan/lorawan/src/mobility/model/constant-velocity-helper.cc                               |
| Ns2MobilityHelper                           | /__w/lorawan/lorawan/src/mobility/helper/ns2-mobility-helper.cc                                   |
| MobilityHelper                              | /__w/lorawan/lorawan/src/mobility/helper/mobility-helper.cc                                       |
| UdpSocketImpl                               | /__w/lorawan/lorawan/src/internet/model/udp-socket-impl.cc                                        |
| UdpL4Protocol                               | /__w/lorawan/lorawan/src/internet/model/udp-l4-protocol.cc                                        |
| TcpYeah                                     | /__w/lorawan/lorawan/src/internet/model/tcp-yeah.cc                                               |
| TcpWestwoodPlus                             | /__w/lorawan/lorawan/src/internet/model/tcp-westwood-plus.cc                                      |
| TcpVegas                                    | /__w/lorawan/lorawan/src/internet/model/tcp-vegas.cc                                              |
| TcpTxBuffer                                 | /__w/lorawan/lorawan/src/internet/model/tcp-tx-buffer.cc                                          |
| PacketBurst                                 | /__w/lorawan/lorawan/src/network/utils/packet-burst.cc                                            |
| Mac48Address                                | /__w/lorawan/lorawan/src/network/utils/mac48-address.cc                                           |
| TcpL4Protocol                               | /__w/lorawan/lorawan/src/internet/model/tcp-l4-protocol.cc                                        |
| NetworkServer                               | /__w/lorawan/lorawan/src/lorawan/model/network-server.cc                                          |
| Ipv6Address                                 | /__w/lorawan/lorawan/src/network/utils/ipv6-address.cc                                            |
| Config                                      | /__w/lorawan/lorawan/src/core/model/config.cc                                                     |
| OutputStreamWrapper                         | /__w/lorawan/lorawan/src/network/utils/output-stream-wrapper.cc                                   |
| Hash-Murmur3                                | /__w/lorawan/lorawan/src/core/model/hash-murmur3.cc                                               |
| EthernetTrailer                             | /__w/lorawan/lorawan/src/network/utils/ethernet-trailer.cc                                        |
| TcpCubic                                    | /__w/lorawan/lorawan/src/internet/model/tcp-cubic.cc                                              |
| int64x64                                    | /__w/lorawan/lorawan/src/core/model/int64x64.cc                                                   |
| QueueSize                                   | /__w/lorawan/lorawan/src/network/utils/queue-size.cc                                              |
| ErrorChannel                                | /__w/lorawan/lorawan/src/network/utils/error-channel.cc                                           |
| EventId                                     | /__w/lorawan/lorawan/src/core/model/event-id.cc                                                   |
| DropTailQueue                               | /__w/lorawan/lorawan/src/network/utils/drop-tail-queue.cc                                         |
| DataRate                                    | /__w/lorawan/lorawan/src/network/utils/data-rate.cc                                               |
| Boolean                                     | /__w/lorawan/lorawan/src/core/model/boolean.cc                                                    |
| RipNg                                       | /__w/lorawan/lorawan/src/internet/model/ripng.cc                                                  |
| Ipv6EndPointDemux                           | /__w/lorawan/lorawan/src/internet/model/ipv6-end-point-demux.cc                                   |
| NetworkControllerComponent                  | /__w/lorawan/lorawan/src/lorawan/model/network-controller-components.cc                           |
| AddressUtils                                | /__w/lorawan/lorawan/src/network/utils/address-utils.cc                                           |
| IpL4Protocol                                | /__w/lorawan/lorawan/src/internet/model/ip-l4-protocol.cc                                         |
| UdpTraceClient                              | /__w/lorawan/lorawan/src/applications/model/udp-trace-client.cc                                   |
| Trailer                                     | /__w/lorawan/lorawan/src/network/model/trailer.cc                                                 |
| Ipv6PacketFilter                            | /__w/lorawan/lorawan/src/internet/model/ipv6-packet-filter.cc                                     |
| PacketProbe                                 | /__w/lorawan/lorawan/src/network/utils/packet-probe.cc                                            |
| TagBuffer                                   | /__w/lorawan/lorawan/src/network/model/tag-buffer.cc                                              |
| ThreeGppHttpServer                          | /__w/lorawan/lorawan/src/applications/model/three-gpp-http-server.cc                              |
| SocketFactory                               | /__w/lorawan/lorawan/src/network/model/socket-factory.cc                                          |
| PacketTagList                               | /__w/lorawan/lorawan/src/network/model/packet-tag-list.cc                                         |
| NetworkServerHelper                         | /__w/lorawan/lorawan/src/lorawan/helper/network-server-helper.cc                                  |
| PacketFilter                                | /__w/lorawan/lorawan/src/traffic-control/model/packet-filter.cc                                   |
| Node                                        | /__w/lorawan/lorawan/src/network/model/node.cc                                                    |
| Mac16Address                                | /__w/lorawan/lorawan/src/network/utils/mac16-address.cc                                           |
| Header                                      | /__w/lorawan/lorawan/src/network/model/header.cc                                                  |
| FileHelper                                  | /__w/lorawan/lorawan/src/stats/helper/file-helper.cc                                              |
| TcpHighSpeed                                | /__w/lorawan/lorawan/src/internet/model/tcp-highspeed.cc                                          |
| NetworkController                           | /__w/lorawan/lorawan/src/lorawan/model/network-controller.cc                                      |
| Ipv4PacketFilter                            | /__w/lorawan/lorawan/src/internet/model/ipv4-packet-filter.cc                                     |
| ChannelList                                 | /__w/lorawan/lorawan/src/network/model/channel-list.cc                                            |
| FqPieQueueDisc                              | /__w/lorawan/lorawan/src/traffic-control/model/fq-pie-queue-disc.cc                               |
| Uinteger                                    | /__w/lorawan/lorawan/src/core/model/uinteger.cc                                                   |
| FifoQueueDisc                               | /__w/lorawan/lorawan/src/traffic-control/model/fifo-queue-disc.cc                                 |
| Ipv4Header                                  | /__w/lorawan/lorawan/src/internet/model/ipv4-header.cc                                            |
| Buffer                                      | /__w/lorawan/lorawan/src/network/model/buffer.cc                                                  |
| QueueLimits                                 | /__w/lorawan/lorawan/src/network/utils/queue-limits.cc                                            |
| Ipv6L3Protocol                              | /__w/lorawan/lorawan/src/internet/model/ipv6-l3-protocol.cc                                       |
| Address                                     | /__w/lorawan/lorawan/src/network/model/address.cc                                                 |
| Socket                                      | /__w/lorawan/lorawan/src/network/model/socket.cc                                                  |
| PeriodicSenderHelper                        | /__w/lorawan/lorawan/src/lorawan/helper/periodic-sender-helper.cc                                 |
| FlowIdTag                                   | /__w/lorawan/lorawan/src/network/utils/flow-id-tag.cc                                             |
| SimpleNetDevice                             | /__w/lorawan/lorawan/src/network/utils/simple-net-device.cc                                       |
| SimpleNetDeviceHelper                       | /__w/lorawan/lorawan/src/network/helper/simple-net-device-helper.cc                               |
| ApplicationContainer                        | /__w/lorawan/lorawan/src/network/helper/application-container.cc                                  |
| ErrorModel                                  | /__w/lorawan/lorawan/src/network/utils/error-model.cc                                             |
| OmnetDataOutput                             | /__w/lorawan/lorawan/src/stats/model/omnet-data-output.cc                                         |
| Ipv6Header                                  | /__w/lorawan/lorawan/src/internet/model/ipv6-header.cc                                            |
| Uinteger8Probe                              | /__w/lorawan/lorawan/src/stats/model/uinteger-8-probe.cc                                          |
| NixVector                                   | /__w/lorawan/lorawan/src/network/model/nix-vector.cc                                              |
| Uinteger16Probe                             | /__w/lorawan/lorawan/src/stats/model/uinteger-16-probe.cc                                         |
| PcapFile                                    | /__w/lorawan/lorawan/src/network/utils/pcap-file.cc                                               |
| LoraChannel                                 | /__w/lorawan/lorawan/src/lorawan/model/lora-channel.cc                                            |
| TcpPrrRecovery                              | /__w/lorawan/lorawan/src/internet/model/tcp-prr-recovery.cc                                       |
| Histogram                                   | /__w/lorawan/lorawan/src/stats/model/histogram.cc                                                 |
| TcpRxBuffer                                 | /__w/lorawan/lorawan/src/internet/model/tcp-rx-buffer.cc                                          |
| PacketDataCalculators                       | /__w/lorawan/lorawan/src/network/utils/packet-data-calculators.cc                                 |
| TimeSeriesAdaptor                           | /__w/lorawan/lorawan/src/stats/model/time-series-adaptor.cc                                       |
| EnergyHarvesterContainer                    | /__w/lorawan/lorawan/src/energy/helper/energy-harvester-container.cc                              |
| DoubleProbe                                 | /__w/lorawan/lorawan/src/stats/model/double-probe.cc                                              |
| TcpCongestionOps                            | /__w/lorawan/lorawan/src/internet/model/tcp-congestion-ops.cc                                     |
| Mac64Address                                | /__w/lorawan/lorawan/src/network/utils/mac64-address.cc                                           |
| DataCollectionObject                        | /__w/lorawan/lorawan/src/stats/model/data-collection-object.cc                                    |
| BooleanProbe                                | /__w/lorawan/lorawan/src/stats/model/boolean-probe.cc                                             |
| RandomWalk2d                                | /__w/lorawan/lorawan/src/mobility/model/random-walk-2d-mobility-model.cc                          |
| Ipv4                                        | /__w/lorawan/lorawan/src/internet/model/ipv4.cc                                                   |
| Rip                                         | /__w/lorawan/lorawan/src/internet/model/rip.cc                                                    |
| InetSocketAddress                           | /__w/lorawan/lorawan/src/network/utils/inet-socket-address.cc                                     |
| int64x64-128                                | /__w/lorawan/lorawan/src/core/model/int64x64-128.cc                                               |
| DataCollector                               | /__w/lorawan/lorawan/src/stats/model/data-collector.cc                                            |
| SQLiteOutput                                | /__w/lorawan/lorawan/src/stats/model/sqlite-output.cc                                             |
| SqliteDataOutput                            | /__w/lorawan/lorawan/src/stats/model/sqlite-data-output.cc                                        |
| LoraPacketTracker                           | /__w/lorawan/lorawan/src/lorawan/helper/lora-packet-tracker.cc                                    |
| MacCommand                                  | /__w/lorawan/lorawan/src/lorawan/model/mac-command.cc                                             |
| Ipv4L3Protocol                              | /__w/lorawan/lorawan/src/internet/model/ipv4-l3-protocol.cc                                       |
| Ipv4StaticRouting                           | /__w/lorawan/lorawan/src/internet/model/ipv4-static-routing.cc                                    |
| LoraFrameHeader                             | /__w/lorawan/lorawan/src/lorawan/model/lora-frame-header.cc                                       |
| LlcSnalHeader                               | /__w/lorawan/lorawan/src/network/utils/llc-snap-header.cc                                         |
| WallClockSynchronizer                       | /__w/lorawan/lorawan/src/core/model/wall-clock-synchronizer.cc                                    |
| WaypointMobilityModel                       | /__w/lorawan/lorawan/src/mobility/model/waypoint-mobility-model.cc                                |
| InternetTraceHelper                         | /__w/lorawan/lorawan/src/internet/helper/internet-trace-helper.cc                                 |
| Object                                      | /__w/lorawan/lorawan/src/core/model/object.cc                                                     |
| Packet                                      | /__w/lorawan/lorawan/src/network/model/packet.cc                                                  |
| TcpOptionTS                                 | /__w/lorawan/lorawan/src/internet/model/tcp-option-ts.cc                                          |
| FqCoDelQueueDisc                            | /__w/lorawan/lorawan/src/traffic-control/model/fq-codel-queue-disc.cc                             |
| Synchronizer                                | /__w/lorawan/lorawan/src/core/model/synchronizer.cc                                               |
| Time                                        | /__w/lorawan/lorawan/src/core/model/time.cc                                                       |
| LorawanMac                                  | /__w/lorawan/lorawan/src/lorawan/model/lorawan-mac.cc                                             |
| NeighborCacheHelper                         | /__w/lorawan/lorawan/src/internet/helper/neighbor-cache-helper.cc                                 |
| Ipv6OptionHeader                            | /__w/lorawan/lorawan/src/internet/model/ipv6-option-header.cc                                     |
| Vector                                      | /__w/lorawan/lorawan/src/core/model/vector.cc                                                     |
| ByteTagList                                 | /__w/lorawan/lorawan/src/network/model/byte-tag-list.cc                                           |
| MapScheduler                                | /__w/lorawan/lorawan/src/core/model/map-scheduler.cc                                              |
| SubBand                                     | /__w/lorawan/lorawan/src/lorawan/model/sub-band.cc                                                |
| HashFunction                                | /__w/lorawan/lorawan/src/core/model/hash-function.cc                                              |
| DefaultSimulatorImpl                        | /__w/lorawan/lorawan/src/core/model/default-simulator-impl.cc                                     |
| Ipv6Option                                  | /__w/lorawan/lorawan/src/internet/model/ipv6-option.cc                                            |
| SimulatorImpl                               | /__w/lorawan/lorawan/src/core/model/simulator-impl.cc                                             |
| Ipv4InterfaceAddress                        | /__w/lorawan/lorawan/src/internet/model/ipv4-interface-address.cc                                 |
| GatewayLoraPhy                              | /__w/lorawan/lorawan/src/lorawan/model/gateway-lora-phy.cc                                        |
| NetDeviceQueueInterface                     | /__w/lorawan/lorawan/src/network/utils/net-device-queue-interface.cc                              |
| ForwarderHelper                             | /__w/lorawan/lorawan/src/lorawan/helper/forwarder-helper.cc                                       |
| EnergySource                                | /__w/lorawan/lorawan/src/energy/model/energy-source.cc                                            |
| ObjectBase                                  | /__w/lorawan/lorawan/src/core/model/object-base.cc                                                |
| LoraHelper                                  | /__w/lorawan/lorawan/src/lorawan/helper/lora-helper.cc                                            |
| Simulator                                   | /__w/lorawan/lorawan/src/core/model/simulator.cc                                                  |
| Kun2600MhzPropagationLossModel              | /__w/lorawan/lorawan/src/propagation/model/kun-2600-mhz-propagation-loss-model.cc                 |
| RngSeedManager                              | /__w/lorawan/lorawan/src/core/model/rng-seed-manager.cc                                           |
| TraceHelper                                 | /__w/lorawan/lorawan/src/network/helper/trace-helper.cc                                           |
| CsvReader                                   | /__w/lorawan/lorawan/src/core/helper/csv-reader.cc                                                |
| TraceSourceAccessor                         | /__w/lorawan/lorawan/src/core/model/trace-source-accessor.cc                                      |
| RandomVariableStreamHelper                  | /__w/lorawan/lorawan/src/core/helper/random-variable-stream-helper.cc                             |
| Application                                 | /__w/lorawan/lorawan/src/network/model/application.cc                                             |
| Building                                    | /__w/lorawan/lorawan/src/buildings/model/building.cc                                              |
| TimeProbe                                   | /__w/lorawan/lorawan/src/stats/model/time-probe.cc                                                |
| EventImpl                                   | /__w/lorawan/lorawan/src/core/model/event-impl.cc                                                 |
| FdReader                                    | /__w/lorawan/lorawan/src/core/model/unix-fd-reader.cc                                             |
| Ipv4Address                                 | /__w/lorawan/lorawan/src/network/utils/ipv4-address.cc                                            |
| TcpSocketBase                               | /__w/lorawan/lorawan/src/internet/model/tcp-socket-base.cc                                        |
| Pointer                                     | /__w/lorawan/lorawan/src/core/model/pointer.cc                                                    |
| MakeEvent                                   | /__w/lorawan/lorawan/src/core/model/make-event.cc                                                 |
| PriorityQueueScheduler                      | /__w/lorawan/lorawan/src/core/model/priority-queue-scheduler.cc                                   |
| RedQueueDisc                                | /__w/lorawan/lorawan/src/traffic-control/model/red-queue-disc.cc                                  |
| RandomVariableStream                        | /__w/lorawan/lorawan/src/core/model/random-variable-stream.cc                                     |
| OnOffApplication                            | /__w/lorawan/lorawan/src/applications/model/onoff-application.cc                                  |
| GroupMobilityHelper                         | /__w/lorawan/lorawan/src/mobility/helper/group-mobility-helper.cc                                 |
| SystemWallClockMs                           | /__w/lorawan/lorawan/src/core/model/system-wall-clock-ms.cc                                       |
| TypeId                                      | /__w/lorawan/lorawan/src/core/model/type-id.cc                                                    |
| Integer                                     | /__w/lorawan/lorawan/src/core/model/integer.cc                                                    |
| AttributeValue                              | /__w/lorawan/lorawan/src/core/model/attribute.cc                                                  |
| Ipv6AddressHelper                           | /__w/lorawan/lorawan/src/internet/helper/ipv6-address-helper.cc                                   |
| BridgeChannel                               | /__w/lorawan/lorawan/src/bridge/model/bridge-channel.cc                                           |
| Channel                                     | /__w/lorawan/lorawan/src/network/model/channel.cc                                                 |
| ObjectPtrContainer                          | /__w/lorawan/lorawan/src/core/model/object-ptr-container.cc                                       |
| RngStream                                   | /__w/lorawan/lorawan/src/core/model/rng-stream.cc                                                 |
| DataCalculator                              | /__w/lorawan/lorawan/src/stats/model/data-calculator.cc                                           |
| PacketSink                                  | /__w/lorawan/lorawan/src/applications/model/packet-sink.cc                                        |
| Scheduler                                   | /__w/lorawan/lorawan/src/core/model/scheduler.cc                                                  |
| Names                                       | /__w/lorawan/lorawan/src/core/model/names.cc                                                      |
| PacketMetadata                              | /__w/lorawan/lorawan/src/network/model/packet-metadata.cc                                         |
| TrickleTimer                                | /__w/lorawan/lorawan/src/core/model/trickle-timer.cc                                              |
| UdpClient                                   | /__w/lorawan/lorawan/src/applications/model/udp-client.cc                                         |
| Test                                        | /__w/lorawan/lorawan/src/core/model/test.cc                                                       |
| BuildingPenetrationLoss                     | /__w/lorawan/lorawan/src/lorawan/model/building-penetration-loss.cc                               |
| TrafficControlLayer                         | /__w/lorawan/lorawan/src/traffic-control/model/traffic-control-layer.cc                           |
| Ipv4QueueDiscItem                           | /__w/lorawan/lorawan/src/internet/model/ipv4-queue-disc-item.cc                                   |
| SimpleEndDeviceLoraPhy                      | /__w/lorawan/lorawan/src/lorawan/model/simple-end-device-lora-phy.cc                              |
| ShowProgress                                | /__w/lorawan/lorawan/src/core/model/show-progress.cc                                              |
| Probe                                       | /__w/lorawan/lorawan/src/stats/model/probe.cc                                                     |
| GlobalRouter                                | /__w/lorawan/lorawan/src/internet/model/global-router-interface.cc                                |
| ListScheduler                               | /__w/lorawan/lorawan/src/core/model/list-scheduler.cc                                             |
| InternetStackHelper                         | /__w/lorawan/lorawan/src/internet/helper/internet-stack-helper.cc                                 |
| Ipv4RawSocketImpl                           | /__w/lorawan/lorawan/src/internet/model/ipv4-raw-socket-impl.cc                                   |
| Hash-Fnv                                    | /__w/lorawan/lorawan/src/core/model/hash-fnv.cc                                                   |
| GlobalValue                                 | /__w/lorawan/lorawan/src/core/model/global-value.cc                                               |
| ThreeGppHttpVariables                       | /__w/lorawan/lorawan/src/applications/model/three-gpp-http-variables.cc                           |
| GnuplotHelper                               | /__w/lorawan/lorawan/src/stats/helper/gnuplot-helper.cc                                           |
| CalendarScheduler                           | /__w/lorawan/lorawan/src/core/model/calendar-scheduler.cc                                         |
| Ipv6QueueDiscItem                           | /__w/lorawan/lorawan/src/internet/model/ipv6-queue-disc-item.cc                                   |
| Callback                                    | /__w/lorawan/lorawan/src/core/model/callback.cc                                                   |
| HeapScheduler                               | /__w/lorawan/lorawan/src/core/model/heap-scheduler.cc                                             |
| GnuplotAggregator                           | /__w/lorawan/lorawan/src/stats/model/gnuplot-aggregator.cc                                        |
| Ipv6PacketProbe                             | /__w/lorawan/lorawan/src/internet/model/ipv6-packet-probe.cc                                      |
| ObjectFactory                               | /__w/lorawan/lorawan/src/core/model/object-factory.cc                                             |
| AttributeConstructionList                   | /__w/lorawan/lorawan/src/core/model/attribute-construction-list.cc                                |
| QueueItem                                   | /__w/lorawan/lorawan/src/network/utils/queue-item.cc                                              |
| PointToPointHelper                          | /__w/lorawan/lorawan/src/point-to-point/helper/point-to-point-helper.cc                           |
| TbfQueueDisc                                | /__w/lorawan/lorawan/src/traffic-control/model/tbf-queue-disc.cc                                  |
| RealtimeSimulatorImpl                       | /__w/lorawan/lorawan/src/core/model/realtime-simulator-impl.cc                                    |
| DynamicQueueLimits                          | /__w/lorawan/lorawan/src/network/utils/dynamic-queue-limits.cc                                    |
| Breakpoint                                  | /__w/lorawan/lorawan/src/core/model/breakpoint.cc                                                 |
| BridgeNetDevice                             | /__w/lorawan/lorawan/src/bridge/model/bridge-net-device.cc                                        |
| ThreeGppPropagationLossModel                | /__w/lorawan/lorawan/src/propagation/model/three-gpp-propagation-loss-model.cc                    |
| Double                                      | /__w/lorawan/lorawan/src/core/model/double.cc                                                     |
| Ipv4ListRouting                             | /__w/lorawan/lorawan/src/internet/model/ipv4-list-routing.cc                                      |
| TimeDataCalculators                         | /__w/lorawan/lorawan/src/stats/model/time-data-calculators.cc                                     |
| GlobalRouteManagerImpl                      | /__w/lorawan/lorawan/src/internet/model/global-route-manager-impl.cc                              |
| Uinteger32Probe                             | /__w/lorawan/lorawan/src/stats/model/uinteger-32-probe.cc                                         |
| ArpCache                                    | /__w/lorawan/lorawan/src/internet/model/arp-cache.cc                                              |
| TcpOptionSackPermitted                      | /__w/lorawan/lorawan/src/internet/model/tcp-option-sack-permitted.cc                              |
| Hash                                        | /__w/lorawan/lorawan/src/core/model/hash.cc                                                       |
| CoDelQueueDisc                              | /__w/lorawan/lorawan/src/traffic-control/model/codel-queue-disc.cc                                |
| Watchdog                                    | /__w/lorawan/lorawan/src/core/model/watchdog.cc                                                   |
| LoraInterferenceHelper                      | /__w/lorawan/lorawan/src/lorawan/model/lora-interference-helper.cc                                |
| ThreeGppV2vPropagationLossModel             | /__w/lorawan/lorawan/src/propagation/model/three-gpp-v2v-propagation-loss-model.cc                |
| JakesProcess                                | /__w/lorawan/lorawan/src/propagation/model/jakes-process.cc                                       |
| TcpRecoveryOps                              | /__w/lorawan/lorawan/src/internet/model/tcp-recovery-ops.cc                                       |
| TimePrinter                                 | /__w/lorawan/lorawan/src/core/model/time-printer.cc                                               |
| Length                                      | /__w/lorawan/lorawan/src/core/model/length.cc                                                     |
| BridgeHelper                                | /__w/lorawan/lorawan/src/bridge/helper/bridge-helper.cc                                           |
| Icmpv4Header                                | /__w/lorawan/lorawan/src/internet/model/icmpv4.cc                                                 |
| PacketSocketFactory                         | /__w/lorawan/lorawan/src/network/utils/packet-socket-factory.cc                                   |
| TcpIllinois                                 | /__w/lorawan/lorawan/src/internet/model/tcp-illinois.cc                                           |
| Icmpv4L4Protocol                            | /__w/lorawan/lorawan/src/internet/model/icmpv4-l4-protocol.cc                                     |
| Icmpv6L4Protocol                            | /__w/lorawan/lorawan/src/internet/model/icmpv6-l4-protocol.cc                                     |
| PacketSocketServer                          | /__w/lorawan/lorawan/src/network/utils/packet-socket-server.cc                                    |
| GlobalRoutingHelper                         | /__w/lorawan/lorawan/src/internet/helper/ipv4-global-routing-helper.cc                            |
| SystemPath                                  | /__w/lorawan/lorawan/src/core/model/system-path.cc                                                |
| PacketBB                                    | /__w/lorawan/lorawan/src/network/utils/packetbb.cc                                                |
| RadiotapHeader                              | /__w/lorawan/lorawan/src/network/utils/radiotap-header.cc                                         |
| BuildingsPropagationLossModel               | /__w/lorawan/lorawan/src/buildings/model/buildings-propagation-loss-model.cc                      |
| TcpBbr                                      | /__w/lorawan/lorawan/src/internet/model/tcp-bbr.cc                                                |
| Ipv4GlobalRouting                           | /__w/lorawan/lorawan/src/internet/model/ipv4-global-routing.cc                                    |
| Mac8Address                                 | /__w/lorawan/lorawan/src/network/utils/mac8-address.cc                                            |
| Ipv4RoutingProtocol                         | /__w/lorawan/lorawan/src/internet/model/ipv4-routing-protocol.cc                                  |
| SimpleChannel                               | /__w/lorawan/lorawan/src/network/utils/simple-channel.cc                                          |
| TrafficControlHelper                        | /__w/lorawan/lorawan/src/traffic-control/helper/traffic-control-helper.cc                         |
| CobaltQueueDisc                             | /__w/lorawan/lorawan/src/traffic-control/model/cobalt-queue-disc.cc                               |
| FqCobaltQueueDisc                           | /__w/lorawan/lorawan/src/traffic-control/model/fq-cobalt-queue-disc.cc                            |
| NetDevice                                   | /__w/lorawan/lorawan/src/network/model/net-device.cc                                              |
| NodePrinter                                 | /__w/lorawan/lorawan/src/core/model/node-printer.cc                                               |
| MqQueueDisc                                 | /__w/lorawan/lorawan/src/traffic-control/model/mq-queue-disc.cc                                   |
| PacketSocketAddress                         | /__w/lorawan/lorawan/src/network/utils/packet-socket-address.cc                                   |
| PfifoFastQueueDisc                          | /__w/lorawan/lorawan/src/traffic-control/model/pfifo-fast-queue-disc.cc                           |
| PieQueueDisc                                | /__w/lorawan/lorawan/src/traffic-control/model/pie-queue-disc.cc                                  |
| ItuR1411NlosOverRooftopPropagationLossModel | /__w/lorawan/lorawan/src/propagation/model/itu-r-1411-nlos-over-rooftop-propagation-loss-model.cc |
| DataOutputInterface                         | /__w/lorawan/lorawan/src/stats/model/data-output-interface.cc                                     |
| PrioQueueDisc                               | /__w/lorawan/lorawan/src/traffic-control/model/prio-queue-disc.cc                                 |
| Ipv6AddressGenerator                        | /__w/lorawan/lorawan/src/internet/model/ipv6-address-generator.cc                                 |
| PcapFileWrapper                             | /__w/lorawan/lorawan/src/network/utils/pcap-file-wrapper.cc                                       |
| QueueDisc                                   | /__w/lorawan/lorawan/src/traffic-control/model/queue-disc.cc                                      |
| BitDeserializer                             | /__w/lorawan/lorawan/src/network/utils/bit-deserializer.cc                                        |
| Ipv4Route                                   | /__w/lorawan/lorawan/src/internet/model/ipv4-route.cc                                             |
| Ipv4AddressHelper                           | /__w/lorawan/lorawan/src/internet/helper/ipv4-address-helper.cc                                   |
| Ipv4StaticRoutingHelper                     | /__w/lorawan/lorawan/src/internet/helper/ipv4-static-routing-helper.cc                            |
| FatalImpl                                   | /__w/lorawan/lorawan/src/core/model/fatal-impl.cc                                                 |
| TcpHeader                                   | /__w/lorawan/lorawan/src/internet/model/tcp-header.cc                                             |
| Ipv6StaticRoutingHelper                     | /__w/lorawan/lorawan/src/internet/helper/ipv6-static-routing-helper.cc                            |
| ArpHeader                                   | /__w/lorawan/lorawan/src/internet/model/arp-header.cc                                             |
| ArpL3Protocol                               | /__w/lorawan/lorawan/src/internet/model/arp-l3-protocol.cc                                        |
| CommandLine                                 | /__w/lorawan/lorawan/src/core/model/command-line.cc                                               |
| ArpQueueDiscItem                            | /__w/lorawan/lorawan/src/internet/model/arp-queue-disc-item.cc                                    |
| CandidateQueue                              | /__w/lorawan/lorawan/src/internet/model/candidate-queue.cc                                        |
| GlobalRouteManager                          | /__w/lorawan/lorawan/src/internet/model/global-route-manager.cc                                   |
| UdpEchoServerApplication                    | /__w/lorawan/lorawan/src/applications/model/udp-echo-server.cc                                    |
| Icmpv6Header                                | /__w/lorawan/lorawan/src/internet/model/icmpv6-header.cc                                          |
| Ipv4AddressGenerator                        | /__w/lorawan/lorawan/src/internet/model/ipv4-address-generator.cc                                 |
| BuildingPositionAllocator                   | /__w/lorawan/lorawan/src/buildings/helper/building-position-allocator.cc                          |
| Ipv4PacketProbe                             | /__w/lorawan/lorawan/src/internet/model/ipv4-packet-probe.cc                                      |
| Ipv4EndPointDemux                           | /__w/lorawan/lorawan/src/internet/model/ipv4-end-point-demux.cc                                   |
| Ipv4EndPoint                                | /__w/lorawan/lorawan/src/internet/model/ipv4-end-point.cc                                         |
| Ipv6AutoconfiguredPrefix                    | /__w/lorawan/lorawan/src/internet/model/ipv6-autoconfigured-prefix.cc                             |
| PacketSocket                                | /__w/lorawan/lorawan/src/network/utils/packet-socket.cc                                           |
| RttEstimator                                | /__w/lorawan/lorawan/src/internet/model/rtt-estimator.cc                                          |
| Queue                                       | /__w/lorawan/lorawan/src/network/utils/queue.cc                                                   |
| Ipv4PacketInfoTag                           | /__w/lorawan/lorawan/src/internet/model/ipv4-packet-info-tag.cc                                   |
| BitSerializer                               | /__w/lorawan/lorawan/src/network/utils/bit-serializer.cc                                          |
| Ipv6ListRouting                             | /__w/lorawan/lorawan/src/internet/model/ipv6-list-routing.cc                                      |
| Ipv4RawSocketFactoryImpl                    | /__w/lorawan/lorawan/src/internet/model/ipv4-raw-socket-factory-impl.cc                           |
| TcpRateOps                                  | /__w/lorawan/lorawan/src/internet/model/tcp-rate-ops.cc                                           |
| Ipv4RawSocketFactory                        | /__w/lorawan/lorawan/src/internet/model/ipv4-raw-socket-factory.cc                                |
| Ipv6Extension                               | /__w/lorawan/lorawan/src/internet/model/ipv6-extension.cc                                         |
| Ipv6EndPoint                                | /__w/lorawan/lorawan/src/internet/model/ipv6-end-point.cc                                         |
| NodeList                                    | /__w/lorawan/lorawan/src/network/model/node-list.cc                                               |
| Ipv6ExtensionHeader                         | /__w/lorawan/lorawan/src/internet/model/ipv6-extension-header.cc                                  |
| Ipv6InterfaceAddress                        | /__w/lorawan/lorawan/src/internet/model/ipv6-interface-address.cc                                 |
| Ipv6Interface                               | /__w/lorawan/lorawan/src/internet/model/ipv6-interface.cc                                         |
| Ipv4RoutingTableEntry                       | /__w/lorawan/lorawan/src/internet/model/ipv4-routing-table-entry.cc                               |
| Timer                                       | /__w/lorawan/lorawan/src/core/model/timer.cc                                                      |
| Ipv6PmtuCache                               | /__w/lorawan/lorawan/src/internet/model/ipv6-pmtu-cache.cc                                        |
| Ipv6RawSocketImpl                           | /__w/lorawan/lorawan/src/internet/model/ipv6-raw-socket-impl.cc                                   |
| TcpLp                                       | /__w/lorawan/lorawan/src/internet/model/tcp-lp.cc                                                 |
| TcpVeno                                     | /__w/lorawan/lorawan/src/internet/model/tcp-veno.cc                                               |
| EthernetHeader                              | /__w/lorawan/lorawan/src/network/utils/ethernet-header.cc                                         |
| FileAggregator                              | /__w/lorawan/lorawan/src/stats/model/file-aggregator.cc                                           |
| Ipv6StaticRouting                           | /__w/lorawan/lorawan/src/internet/model/ipv6-static-routing.cc                                    |
| UdpSocket                                   | /__w/lorawan/lorawan/src/internet/model/udp-socket.cc                                             |
| LoopbackNetDevice                           | /__w/lorawan/lorawan/src/internet/model/loopback-net-device.cc                                    |
| LiIonEnergySource                           | /__w/lorawan/lorawan/src/energy/model/li-ion-energy-source.cc                                     |
| TcpHtcp                                     | /__w/lorawan/lorawan/src/internet/model/tcp-htcp.cc                                               |
| LogicalLoraChannel                          | /__w/lorawan/lorawan/src/lorawan/model/logical-lora-channel.cc                                    |
| NdiscCache                                  | /__w/lorawan/lorawan/src/internet/model/ndisc-cache.cc                                            |
| SimpleGatewayLoraPhy                        | /__w/lorawan/lorawan/src/lorawan/model/simple-gateway-lora-phy.cc                                 |
| TcpOption                                   | /__w/lorawan/lorawan/src/internet/model/tcp-option.cc                                             |
| PositionAllocator                           | /__w/lorawan/lorawan/src/mobility/model/position-allocator.cc                                     |
| RipNgHeader                                 | /__w/lorawan/lorawan/src/internet/model/ripng-header.cc                                           |
| TcpBic                                      | /__w/lorawan/lorawan/src/internet/model/tcp-bic.cc                                                |
| SllHeader                                   | /__w/lorawan/lorawan/src/network/utils/sll-header.cc                                              |
| TcpDctcp                                    | /__w/lorawan/lorawan/src/internet/model/tcp-dctcp.cc                                              |
| EndDeviceLorawanMac                         | /__w/lorawan/lorawan/src/lorawan/model/end-device-lorawan-mac.cc                                  |
| PacketSocketClient                          | /__w/lorawan/lorawan/src/network/utils/packet-socket-client.cc                                    |
| RipHeader                                   | /__w/lorawan/lorawan/src/internet/model/rip-header.cc                                             |
| TcpHybla                                    | /__w/lorawan/lorawan/src/internet/model/tcp-hybla.cc                                              |
| ExampleAsTestCase                           | /__w/lorawan/lorawan/src/core/model/example-as-test.cc                                            |
| TcpLedbat                                   | /__w/lorawan/lorawan/src/internet/model/tcp-ledbat.cc                                             |
| TcpLinuxReno                                | /__w/lorawan/lorawan/src/internet/model/tcp-linux-reno.cc                                         |
| TcpOptionRfc793                             | /__w/lorawan/lorawan/src/internet/model/tcp-option-rfc793.cc                                      |
| PointToPointChannel                         | /__w/lorawan/lorawan/src/point-to-point/model/point-to-point-channel.cc                           |
| Inet6SocketAddress                          | /__w/lorawan/lorawan/src/network/utils/inet6-socket-address.cc                                    |
| TcpOptionSack                               | /__w/lorawan/lorawan/src/internet/model/tcp-option-sack.cc                                        |
| BuildingsHelper                             | /__w/lorawan/lorawan/src/buildings/helper/buildings-helper.cc                                     |
| TcpOptionWinScale                           | /__w/lorawan/lorawan/src/internet/model/tcp-option-winscale.cc                                    |
| TcpScalable                                 | /__w/lorawan/lorawan/src/internet/model/tcp-scalable.cc                                           |
| Ipv4Interface                               | /__w/lorawan/lorawan/src/internet/model/ipv4-interface.cc                                         |
| TcpSocket                                   | /__w/lorawan/lorawan/src/internet/model/tcp-socket.cc                                             |

*/

/*!
\page TraceSourceList All TraceSources

This is a list of all \ref tracing sources.  For more information see the  \ref tracing section of this API documentation and the Tracing sections in the Tutorial and Manual.

<b>ns3::ApplicationPacketProbe</b><br>
<ul>
<li><b>Output</b>: The packet plus its socket address that serve as the output for this probe</li>
<li><b>OutputBytes</b>: The number of bytes in the packet</li>
</ul>
<b>ns3::ArpCache</b><br>
<ul>
<li><b>Drop</b>: Packet dropped due to ArpCache entry in WaitReply expiring.</li>
</ul>
<b>ns3::ArpL3Protocol</b><br>
<ul>
<li><b>Drop</b>: Packet dropped because not enough room in pending queue for a specific cache entry.</li>
</ul>
<b>ns3::BasicEnergyHarvester</b><br>
<ul>
<li><b>HarvestedPower</b>: Harvested power by the BasicEnergyHarvester.</li>
<li><b>TotalEnergyHarvested</b>: Total energy harvested by the harvester.</li>
</ul>
<b>ns3::BasicEnergySource</b><br>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy at BasicEnergySource.</li>
</ul>
<b>ns3::BooleanProbe</b><br>
<ul>
<li><b>Output</b>: The bool that serves as output for this probe</li>
</ul>
<b>ns3::BulkSendApplication</b><br>
<ul>
<li><b>Tx</b>: A new packet is sent</li>
<li><b>TxWithSeqTsSize</b>: A new packet is created with SeqTsSizeHeader</li>
</ul>
<b>ns3::CobaltQueueDisc</b><br>
<ul>
<li><b>Count</b>: Cobalt count</li>
<li><b>DropNext</b>: Time until next packet drop</li>
<li><b>DropState</b>: Dropping state</li>
</ul>
<b>ns3::CoDelQueueDisc</b><br>
<ul>
<li><b>Count</b>: CoDel count</li>
<li><b>DropNext</b>: Time until next packet drop</li>
<li><b>DropState</b>: Dropping state</li>
<li><b>LastCount</b>: CoDel lastcount</li>
</ul>
<b>ns3::DoubleProbe</b><br>
<ul>
<li><b>Output</b>: The double that serves as output for this probe</li>
</ul>
<b>ns3::DynamicQueueLimits</b><br>
<ul>
<li><b>Limit</b>: Limit value calculated by DQL</li>
</ul>
<b>ns3::EndDeviceLoraPhy</b><br>
<ul>
<li><b>EndDeviceState</b>: The current state of the device</li>
<li><b>LostPacketBecauseWrongFrequency</b>: Trace source indicating a packet could not be correctly decoded becausethe ED was listening on a different frequency</li>
<li><b>LostPacketBecauseWrongSpreadingFactor</b>: Trace source indicating a packet could not be correctly decoded becausethe ED was listening for a different Spreading Factor</li>
</ul>
<b>ns3::EndDeviceLorawanMac</b><br>
<ul>
<li><b>AggregatedDutyCycle</b>: Aggregate duty cycle, in fraction form, this end device must respect</li>
<li><b>DataRate</b>: Data Rate currently employed by this end device</li>
<li><b>LastKnownGatewayCount</b>: Last known number of gateways able to listen to this end device</li>
<li><b>LastKnownLinkMargin</b>: Last known demodulation margin in communications between this end device and a gateway</li>
<li><b>RequiredTransmissions</b>: Total number of transmissions required to deliver this packet</li>
<li><b>TxPower</b>: Transmission power currently employed by this end device</li>
</ul>
<b>ns3::GatewayLoraPhy</b><br>
<ul>
<li><b>LostPacketBecauseNoMoreReceivers</b>: Trace source indicating a packet could not be correctly received becausethere are no more demodulators available</li>
<li><b>NoReceptionBecauseTransmitting</b>: Trace source indicating a packet could not be correctly received becausethe GW is in transmission mode</li>
<li><b>OccupiedReceptionPaths</b>: Number of currently occupied reception paths</li>
</ul>
<b>ns3::GenericBatteryModel</b><br>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy of generic battery</li>
</ul>
<b>ns3::Ipv4L3Protocol</b><br>
<ul>
<li><b>Drop</b>: Drop ipv4 packet</li>
<li><b>LocalDeliver</b>: An IPv4 packet was received by/for this node, and it is being forward up the stack</li>
<li><b>MulticastForward</b>: A multicast IPv4 packet was received by this node and is being forwarded to another node</li>
<li><b>Rx</b>: Receive ipv4 packet from incoming interface.</li>
<li><b>SendOutgoing</b>: A newly-generated packet by this node is about to be queued for transmission</li>
<li><b>Tx</b>: Send ipv4 packet to outgoing interface.</li>
<li><b>UnicastForward</b>: A unicast IPv4 packet was received by this node and is being forwarded to another node</li>
</ul>
<b>ns3::Ipv4PacketProbe</b><br>
<ul>
<li><b>Output</b>: The packet plus its IPv4 object and interface that serve as the output for this probe</li>
<li><b>OutputBytes</b>: The number of bytes in the packet</li>
</ul>
<b>ns3::Ipv6L3Protocol</b><br>
<ul>
<li><b>Drop</b>: Drop IPv6 packet</li>
<li><b>LocalDeliver</b>: An IPv6 packet was received by/for this node, and it is being forward up the stack</li>
<li><b>Rx</b>: Receive IPv6 packet from incoming interface.</li>
<li><b>SendOutgoing</b>: A newly-generated packet by this node is about to be queued for transmission</li>
<li><b>Tx</b>: Send IPv6 packet to outgoing interface.</li>
<li><b>UnicastForward</b>: A unicast IPv6 packet was received by this node and is being forwarded to another node</li>
</ul>
<b>ns3::Ipv6PacketProbe</b><br>
<ul>
<li><b>Output</b>: The packet plus its IPv6 object and interface that serve as the output for this probe</li>
<li><b>OutputBytes</b>: The number of bytes in the packet</li>
</ul>
<b>ns3::LiIonEnergySource</b><br>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy at BasicEnergySource.</li>
</ul>
<b>ns3::LoraChannel</b><br>
<ul>
<li><b>PacketSent</b>: Trace source fired whenever a packet goes out on the channel</li>
</ul>
<b>ns3::LoraPhy</b><br>
<ul>
<li><b>LostPacketBecauseInterference</b>: Trace source indicating a packet could not be correctly decoded because of interferingsignals</li>
<li><b>LostPacketBecauseUnderSensitivity</b>: Trace source indicating a packet could not be correctly received becauseits received power is below the sensitivity of the receiver</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet is now being received from the channel medium by the device</li>
<li><b>PhyRxEnd</b>: Trace source indicating the PHY has finished the reception process for a packet</li>
<li><b>ReceivedPacket</b>: Trace source indicating a packet was correctly received</li>
<li><b>StartSending</b>: Trace source indicating the PHY layerhas begun the sending process for a packet</li>
</ul>
<b>ns3::LoraRadioEnergyModel</b><br>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the radio device.</li>
</ul>
<b>ns3::LorawanMac</b><br>
<ul>
<li><b>CannotSendBecauseDutyCycle</b>: Trace source indicating a packet could not be sent immediately because of duty cycle limitations</li>
<li><b>ReceivedPacket</b>: Trace source indicating a packet was correctly received at the MAC layer</li>
<li><b>SentNewPacket</b>: Trace source indicating a new packet arrived at the MAC layer</li>
</ul>
<b>ns3::MobilityModel</b><br>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed</li>
</ul>
<b>ns3::NetworkScheduler</b><br>
<ul>
<li><b>ReceiveWindowOpened</b>: Trace source that is fired when a receive window opportunity happens.</li>
</ul>
<b>ns3::NetworkServer</b><br>
<ul>
<li><b>ReceivedPacket</b>: Trace source that is fired when a packet arrives at the Network Server</li>
</ul>
<b>ns3::OnOffApplication</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent</li>
<li><b>TxWithSeqTsSize</b>: A new packet is created with SeqTsSizeHeader</li>
</ul>
<b>ns3::PacketProbe</b><br>
<ul>
<li><b>Output</b>: The packet that serve as the output for this probe</li>
<li><b>OutputBytes</b>: The number of bytes in the packet</li>
</ul>
<b>ns3::PacketSink</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
<li><b>RxWithSeqTsSize</b>: A packet with SeqTsSize header has been received</li>
</ul>
<b>ns3::PacketSocket</b><br>
<ul>
<li><b>Drop</b>: Drop packet due to receive buffer overflow</li>
</ul>
<b>ns3::PacketSocketClient</b><br>
<ul>
<li><b>Tx</b>: A packet has been sent</li>
</ul>
<b>ns3::PacketSocketServer</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
</ul>
<b>ns3::PointToPointChannel</b><br>
<ul>
<li><b>TxRxPointToPoint</b>: Trace source indicating transmission of packet from the PointToPointChannel, used by the Animation interface.</li>
</ul>
<b>ns3::PointToPointNetDevice</b><br>
<ul>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received by the device</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device</li>
</ul>
<b>ns3::Queue<Packet></b><br>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.</li>
</ul>
<b>ns3::Queue<QueueDiscItem></b><br>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.</li>
</ul>
<b>ns3::QueueBase</b><br>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue</li>
</ul>
<b>ns3::QueueDisc</b><br>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc</li>
</ul>
<b>ns3::RvBatteryModel</b><br>
<ul>
<li><b>RvBatteryModelBatteryLevel</b>: RV battery model battery level.</li>
<li><b>RvBatteryModelBatteryLifetime</b>: RV battery model battery lifetime.</li>
</ul>
<b>ns3::SimpleDeviceEnergyModel</b><br>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the radio device.</li>
</ul>
<b>ns3::SimpleNetDevice</b><br>
<ul>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
</ul>
<b>ns3::TbfQueueDisc</b><br>
<ul>
<li><b>TokensInFirstBucket</b>: Number of First Bucket Tokens in bytes</li>
<li><b>TokensInSecondBucket</b>: Number of Second Bucket Tokens in bytes</li>
</ul>
<b>ns3::TcpDctcp</b><br>
<ul>
<li><b>CongestionEstimate</b>: Update sender-side congestion estimate state</li>
</ul>
<b>ns3::TcpHybla</b><br>
<ul>
<li><b>Rho</b>: Rho parameter of Hybla</li>
</ul>
<b>ns3::TcpRateLinux</b><br>
<ul>
<li><b>TcpRateSampleUpdated</b>: Tcp rate sample has been updated</li>
<li><b>TcpRateUpdated</b>: Tcp rate information has been updated</li>
</ul>
<b>ns3::TcpRxBuffer</b><br>
<ul>
<li><b>NextRxSequence</b>: Next sequence number expected (RCV.NXT)</li>
</ul>
<b>ns3::TcpSocketBase</b><br>
<ul>
<li><b>AdvWND</b>: Advertised Window Size</li>
<li><b>BytesInFlight</b>: Socket estimation of bytes in flight</li>
<li><b>CongState</b>: TCP Congestion machine state</li>
<li><b>CongestionWindow</b>: The TCP connection's congestion window</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's congestion window inflates as in older RFC</li>
<li><b>EcnCeSeq</b>: Sequence of last received CE</li>
<li><b>EcnCwrSeq</b>: Sequence of last received CWR</li>
<li><b>EcnEchoSeq</b>: Sequence of last received ECN Echo</li>
<li><b>EcnState</b>: Trace ECN state change of socket</li>
<li><b>HighestRxAck</b>: Highest ack received from peer</li>
<li><b>HighestRxSequence</b>: Highest sequence number received from peer</li>
<li><b>HighestSequence</b>: Highest sequence number ever sent in socket's life time</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)</li>
<li><b>PacingRate</b>: The current TCP pacing rate</li>
<li><b>RTO</b>: Retransmission timeout</li>
<li><b>RTT</b>: Last RTT sample</li>
<li><b>RWND</b>: Remote side's flow control window</li>
<li><b>Rx</b>: Receive tcp packet from IP protocol</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)</li>
<li><b>State</b>: TCP state</li>
<li><b>Tx</b>: Send tcp packet to IP protocol</li>
</ul>
<b>ns3::TcpSocketState</b><br>
<ul>
<li><b>BytesInFlight</b>: The TCP connection's congestion window</li>
<li><b>CongState</b>: TCP Congestion machine state</li>
<li><b>CongestionWindow</b>: The TCP connection's congestion window</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's inflated congestion window</li>
<li><b>EcnState</b>: Trace ECN state change of socket</li>
<li><b>HighestSequence</b>: Highest sequence number received from peer</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)</li>
<li><b>PacingRate</b>: The current TCP pacing rate</li>
<li><b>RTT</b>: Last RTT sample</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)</li>
</ul>
<b>ns3::TcpTxBuffer</b><br>
<ul>
<li><b>UnackSequence</b>: First unacknowledged sequence number (SND.UNA)</li>
</ul>
<b>ns3::TcpWestwoodPlus</b><br>
<ul>
<li><b>EstimatedBW</b>: The estimated bandwidth</li>
</ul>
<b>ns3::ThreeGppHttpClient</b><br>
<ul>
<li><b>ConnectionClosed</b>: Connection to the destination web server is closed.</li>
<li><b>ConnectionEstablished</b>: Connection to the destination web server has been established.</li>
<li><b>Rx</b>: General trace for receiving a packet of any kind.</li>
<li><b>RxDelay</b>: General trace of delay for receiving a complete object.</li>
<li><b>RxEmbeddedObject</b>: Received a whole embedded object. Header is included.</li>
<li><b>RxEmbeddedObjectPacket</b>: A packet of embedded object has been received.</li>
<li><b>RxMainObject</b>: Received a whole main object. Header is included.</li>
<li><b>RxMainObjectPacket</b>: A packet of main object has been received.</li>
<li><b>RxPage</b>: A page has been received.</li>
<li><b>RxRtt</b>: General trace of round trip delay time for receiving a complete object.</li>
<li><b>StateTransition</b>: Trace fired upon every HTTP client state transition.</li>
<li><b>Tx</b>: General trace for sending a packet of any kind.</li>
<li><b>TxEmbeddedObjectRequest</b>: Sent a request for an embedded object.</li>
<li><b>TxMainObjectRequest</b>: Sent a request for a main object.</li>
</ul>
<b>ns3::ThreeGppHttpServer</b><br>
<ul>
<li><b>ConnectionEstablished</b>: Connection to a remote web client has been established.</li>
<li><b>EmbeddedObject</b>: An embedded object has been generated.</li>
<li><b>MainObject</b>: A main object has been generated.</li>
<li><b>Rx</b>: A packet has been received.</li>
<li><b>RxDelay</b>: A packet has been received with delay information.</li>
<li><b>StateTransition</b>: Trace fired upon every HTTP client state transition.</li>
<li><b>Tx</b>: A packet has been sent.</li>
</ul>
<b>ns3::TimeProbe</b><br>
<ul>
<li><b>Output</b>: The double valued (units of seconds) probe output</li>
</ul>
<b>ns3::TimeSeriesAdaptor</b><br>
<ul>
<li><b>Output</b>: The current simulation time versus the current value converted to a double</li>
</ul>
<b>ns3::TrafficControlLayer</b><br>
<ul>
<li><b>TcDrop</b>: Trace source indicating a packet has been dropped by the Traffic Control layer because no queue disc is installed on the device, the device supports flow control and the device queue is stopped</li>
</ul>
<b>ns3::UdpClient</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and sent</li>
<li><b>TxWithAddresses</b>: A new packet is created and sent</li>
</ul>
<b>ns3::UdpEchoClient</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
<li><b>Tx</b>: A new packet is created and is sent</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::UdpEchoServer</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
</ul>
<b>ns3::UdpServer</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
</ul>
<b>ns3::UdpSocketImpl</b><br>
<ul>
<li><b>Drop</b>: Drop UDP packet due to receive buffer overflow</li>
</ul>
<b>ns3::Uinteger16Probe</b><br>
<ul>
<li><b>Output</b>: The uint16_t that serves as output for this probe</li>
</ul>
<b>ns3::Uinteger32Probe</b><br>
<ul>
<li><b>Output</b>: The uint32_t that serves as output for this probe</li>
</ul>
<b>ns3::Uinteger8Probe</b><br>
<ul>
<li><b>Output</b>: The uint8_t that serves as output for this probe</li>
</ul>
*/

/*!
\ingroup attributes
\addtogroup attribute_Address Address Attribute
AttributeValue implementation for Address
\see ns3::Address
*/
/*!
\ingroup attribute_Address
\class  ns3::AddressValue "address.h"
AttributeValue implementation for Address.
\see AttributeValue
*/
/*!
\fn Address ns3::AddressValue::AddressValue(const Address & value)
Copy constructor.
\param [in] value The Address value to copy.
*/
/*!
\fn Address ns3::AddressValue::Get () const
\returns The Address value.
*/
/*!
\fn bool ns3::AddressValue::GetAccessor (T & value) const
Access the Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::AddressValue::Set (const Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Address ns3::AddressValue::m_value
The stored Address instance.
*/

/*!
\ingroup attribute_Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeAddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeAddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Address

\class  ns3::AddressChecker "address.h"
AttributeChecker implementation for AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeAddressChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Box Box Attribute
AttributeValue implementation for Box
\see ns3::Box
*/
/*!
\ingroup attribute_Box
\class  ns3::BoxValue "box.h"
AttributeValue implementation for Box.
\see AttributeValue
*/
/*!
\fn Box ns3::BoxValue::BoxValue(const Box & value)
Copy constructor.
\param [in] value The Box value to copy.
*/
/*!
\fn Box ns3::BoxValue::Get () const
\returns The Box value.
*/
/*!
\fn bool ns3::BoxValue::GetAccessor (T & value) const
Access the Box value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Box value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::BoxValue::Set (const Box & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Box ns3::BoxValue::m_value
The stored Box instance.
*/

/*!
\ingroup attribute_Box
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBoxAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Box
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBoxAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Box

\class  ns3::BoxChecker "box.h"
AttributeChecker implementation for BoxValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Box
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeBoxChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_DataRate DataRate Attribute
AttributeValue implementation for DataRate
\see ns3::DataRate
*/
/*!
\ingroup attribute_DataRate
\class  ns3::DataRateValue "data-rate.h"
AttributeValue implementation for DataRate.
\see AttributeValue
*/
/*!
\fn DataRate ns3::DataRateValue::DataRateValue(const DataRate & value)
Copy constructor.
\param [in] value The DataRate value to copy.
*/
/*!
\fn DataRate ns3::DataRateValue::Get () const
\returns The DataRate value.
*/
/*!
\fn bool ns3::DataRateValue::GetAccessor (T & value) const
Access the DataRate value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The DataRate value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::DataRateValue::Set (const DataRate & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var DataRate ns3::DataRateValue::m_value
The stored DataRate instance.
*/

/*!
\ingroup attribute_DataRate
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDataRateAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_DataRate
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDataRateAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_DataRate

\class  ns3::DataRateChecker "data-rate.h"
AttributeChecker implementation for DataRateValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_DataRate
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeDataRateChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Length Length Attribute
AttributeValue implementation for Length
\see ns3::Length
*/
/*!
\ingroup attribute_Length
\class  ns3::LengthValue "length.h"
AttributeValue implementation for Length.
\see AttributeValue
*/
/*!
\fn Length ns3::LengthValue::LengthValue(const Length & value)
Copy constructor.
\param [in] value The Length value to copy.
*/
/*!
\fn Length ns3::LengthValue::Get () const
\returns The Length value.
*/
/*!
\fn bool ns3::LengthValue::GetAccessor (T & value) const
Access the Length value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Length value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::LengthValue::Set (const Length & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Length ns3::LengthValue::m_value
The stored Length instance.
*/

/*!
\ingroup attribute_Length
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeLengthAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Length
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeLengthAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Length

\class  ns3::LengthChecker "length.h"
AttributeChecker implementation for LengthValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Length
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeLengthChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_IeMeshId IeMeshId Attribute
AttributeValue implementation for IeMeshId
\see ns3::dot11s::IeMeshId
*/
/*!
\ingroup attribute_IeMeshId
\class  ns3::IeMeshIdValue "ie-dot11s-id.h"
AttributeValue implementation for IeMeshId.
\see AttributeValue
*/
/*!
\fn IeMeshId ns3::IeMeshIdValue::IeMeshIdValue(const IeMeshId & value)
Copy constructor.
\param [in] value The IeMeshId value to copy.
*/
/*!
\fn IeMeshId ns3::IeMeshIdValue::Get () const
\returns The IeMeshId value.
*/
/*!
\fn bool ns3::IeMeshIdValue::GetAccessor (T & value) const
Access the IeMeshId value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The IeMeshId value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::IeMeshIdValue::Set (const IeMeshId & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var IeMeshId ns3::IeMeshIdValue::m_value
The stored IeMeshId instance.
*/

/*!
\ingroup attribute_IeMeshId
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIeMeshIdAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_IeMeshId
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIeMeshIdAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_IeMeshId

\class  ns3::IeMeshIdChecker "ie-dot11s-id.h"
AttributeChecker implementation for IeMeshIdValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_IeMeshId
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIeMeshIdChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Ipv4Address Ipv4Address Attribute
AttributeValue implementation for Ipv4Address
\see ns3::Ipv4Address
*/
/*!
\ingroup attribute_Ipv4Address
\class  ns3::Ipv4AddressValue "ipv4-address.h"
AttributeValue implementation for Ipv4Address.
\see AttributeValue
*/
/*!
\fn Ipv4Address ns3::Ipv4AddressValue::Ipv4AddressValue(const Ipv4Address & value)
Copy constructor.
\param [in] value The Ipv4Address value to copy.
*/
/*!
\fn Ipv4Address ns3::Ipv4AddressValue::Get () const
\returns The Ipv4Address value.
*/
/*!
\fn bool ns3::Ipv4AddressValue::GetAccessor (T & value) const
Access the Ipv4Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ipv4Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Ipv4AddressValue::Set (const Ipv4Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ipv4Address ns3::Ipv4AddressValue::m_value
The stored Ipv4Address instance.
*/

/*!
\ingroup attribute_Ipv4Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv4Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv4Address

\class  ns3::Ipv4AddressChecker "ipv4-address.h"
AttributeChecker implementation for Ipv4AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ipv4Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv4AddressChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Ipv4Mask Ipv4Mask Attribute
AttributeValue implementation for Ipv4Mask
\see ns3::Ipv4Mask
*/
/*!
\ingroup attribute_Ipv4Mask
\class  ns3::Ipv4MaskValue "ipv4-address.h"
AttributeValue implementation for Ipv4Mask.
\see AttributeValue
*/
/*!
\fn Ipv4Mask ns3::Ipv4MaskValue::Ipv4MaskValue(const Ipv4Mask & value)
Copy constructor.
\param [in] value The Ipv4Mask value to copy.
*/
/*!
\fn Ipv4Mask ns3::Ipv4MaskValue::Get () const
\returns The Ipv4Mask value.
*/
/*!
\fn bool ns3::Ipv4MaskValue::GetAccessor (T & value) const
Access the Ipv4Mask value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ipv4Mask value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Ipv4MaskValue::Set (const Ipv4Mask & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ipv4Mask ns3::Ipv4MaskValue::m_value
The stored Ipv4Mask instance.
*/

/*!
\ingroup attribute_Ipv4Mask
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4MaskAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv4Mask
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4MaskAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv4Mask

\class  ns3::Ipv4MaskChecker "ipv4-address.h"
AttributeChecker implementation for Ipv4MaskValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ipv4Mask
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv4MaskChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Ipv6Address Ipv6Address Attribute
AttributeValue implementation for Ipv6Address
\see ns3::Ipv6Address
*/
/*!
\ingroup attribute_Ipv6Address
\class  ns3::Ipv6AddressValue "ipv6-address.h"
AttributeValue implementation for Ipv6Address.
\see AttributeValue
*/
/*!
\fn Ipv6Address ns3::Ipv6AddressValue::Ipv6AddressValue(const Ipv6Address & value)
Copy constructor.
\param [in] value The Ipv6Address value to copy.
*/
/*!
\fn Ipv6Address ns3::Ipv6AddressValue::Get () const
\returns The Ipv6Address value.
*/
/*!
\fn bool ns3::Ipv6AddressValue::GetAccessor (T & value) const
Access the Ipv6Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ipv6Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Ipv6AddressValue::Set (const Ipv6Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ipv6Address ns3::Ipv6AddressValue::m_value
The stored Ipv6Address instance.
*/

/*!
\ingroup attribute_Ipv6Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv6Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv6Address

\class  ns3::Ipv6AddressChecker "ipv6-address.h"
AttributeChecker implementation for Ipv6AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ipv6Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv6AddressChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Ipv6Prefix Ipv6Prefix Attribute
AttributeValue implementation for Ipv6Prefix
\see ns3::Ipv6Prefix
*/
/*!
\ingroup attribute_Ipv6Prefix
\class  ns3::Ipv6PrefixValue "ipv6-address.h"
AttributeValue implementation for Ipv6Prefix.
\see AttributeValue
*/
/*!
\fn Ipv6Prefix ns3::Ipv6PrefixValue::Ipv6PrefixValue(const Ipv6Prefix & value)
Copy constructor.
\param [in] value The Ipv6Prefix value to copy.
*/
/*!
\fn Ipv6Prefix ns3::Ipv6PrefixValue::Get () const
\returns The Ipv6Prefix value.
*/
/*!
\fn bool ns3::Ipv6PrefixValue::GetAccessor (T & value) const
Access the Ipv6Prefix value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ipv6Prefix value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Ipv6PrefixValue::Set (const Ipv6Prefix & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ipv6Prefix ns3::Ipv6PrefixValue::m_value
The stored Ipv6Prefix instance.
*/

/*!
\ingroup attribute_Ipv6Prefix
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6PrefixAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv6Prefix
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6PrefixAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv6Prefix

\class  ns3::Ipv6PrefixChecker "ipv6-address.h"
AttributeChecker implementation for Ipv6PrefixValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ipv6Prefix
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv6PrefixChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Mac16Address Mac16Address Attribute
AttributeValue implementation for Mac16Address
\see ns3::Mac16Address
*/
/*!
\ingroup attribute_Mac16Address
\class  ns3::Mac16AddressValue "mac16-address.h"
AttributeValue implementation for Mac16Address.
\see AttributeValue
*/
/*!
\fn Mac16Address ns3::Mac16AddressValue::Mac16AddressValue(const Mac16Address & value)
Copy constructor.
\param [in] value The Mac16Address value to copy.
*/
/*!
\fn Mac16Address ns3::Mac16AddressValue::Get () const
\returns The Mac16Address value.
*/
/*!
\fn bool ns3::Mac16AddressValue::GetAccessor (T & value) const
Access the Mac16Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Mac16Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Mac16AddressValue::Set (const Mac16Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Mac16Address ns3::Mac16AddressValue::m_value
The stored Mac16Address instance.
*/

/*!
\ingroup attribute_Mac16Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac16AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac16Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac16AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac16Address

\class  ns3::Mac16AddressChecker "mac16-address.h"
AttributeChecker implementation for Mac16AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Mac16Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeMac16AddressChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Mac48Address Mac48Address Attribute
AttributeValue implementation for Mac48Address
\see ns3::Mac48Address
*/
/*!
\ingroup attribute_Mac48Address
\class  ns3::Mac48AddressValue "mac48-address.h"
AttributeValue implementation for Mac48Address.
\see AttributeValue
*/
/*!
\fn Mac48Address ns3::Mac48AddressValue::Mac48AddressValue(const Mac48Address & value)
Copy constructor.
\param [in] value The Mac48Address value to copy.
*/
/*!
\fn Mac48Address ns3::Mac48AddressValue::Get () const
\returns The Mac48Address value.
*/
/*!
\fn bool ns3::Mac48AddressValue::GetAccessor (T & value) const
Access the Mac48Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Mac48Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Mac48AddressValue::Set (const Mac48Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Mac48Address ns3::Mac48AddressValue::m_value
The stored Mac48Address instance.
*/

/*!
\ingroup attribute_Mac48Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac48AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac48Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac48AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac48Address

\class  ns3::Mac48AddressChecker "mac48-address.h"
AttributeChecker implementation for Mac48AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Mac48Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeMac48AddressChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Mac64Address Mac64Address Attribute
AttributeValue implementation for Mac64Address
\see ns3::Mac64Address
*/
/*!
\ingroup attribute_Mac64Address
\class  ns3::Mac64AddressValue "mac64-address.h"
AttributeValue implementation for Mac64Address.
\see AttributeValue
*/
/*!
\fn Mac64Address ns3::Mac64AddressValue::Mac64AddressValue(const Mac64Address & value)
Copy constructor.
\param [in] value The Mac64Address value to copy.
*/
/*!
\fn Mac64Address ns3::Mac64AddressValue::Get () const
\returns The Mac64Address value.
*/
/*!
\fn bool ns3::Mac64AddressValue::GetAccessor (T & value) const
Access the Mac64Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Mac64Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Mac64AddressValue::Set (const Mac64Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Mac64Address ns3::Mac64AddressValue::m_value
The stored Mac64Address instance.
*/

/*!
\ingroup attribute_Mac64Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac64AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac64Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac64AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac64Address

\class  ns3::Mac64AddressChecker "mac64-address.h"
AttributeChecker implementation for Mac64AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Mac64Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeMac64AddressChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_ObjectFactory ObjectFactory Attribute
AttributeValue implementation for ObjectFactory
\see ns3::ObjectFactory
*/
/*!
\ingroup attribute_ObjectFactory
\class  ns3::ObjectFactoryValue "object-factory.h"
AttributeValue implementation for ObjectFactory.
\see AttributeValue
*/
/*!
\fn ObjectFactory ns3::ObjectFactoryValue::ObjectFactoryValue(const ObjectFactory & value)
Copy constructor.
\param [in] value The ObjectFactory value to copy.
*/
/*!
\fn ObjectFactory ns3::ObjectFactoryValue::Get () const
\returns The ObjectFactory value.
*/
/*!
\fn bool ns3::ObjectFactoryValue::GetAccessor (T & value) const
Access the ObjectFactory value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The ObjectFactory value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::ObjectFactoryValue::Set (const ObjectFactory & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var ObjectFactory ns3::ObjectFactoryValue::m_value
The stored ObjectFactory instance.
*/

/*!
\ingroup attribute_ObjectFactory
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectFactoryAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectFactory
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectFactoryAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectFactory

\class  ns3::ObjectFactoryChecker "object-factory.h"
AttributeChecker implementation for ObjectFactoryValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ObjectFactory
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectFactoryChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_OrganizationIdentifier OrganizationIdentifier Attribute
AttributeValue implementation for OrganizationIdentifier
\see ns3::OrganizationIdentifier
*/
/*!
\ingroup attribute_OrganizationIdentifier
\class  ns3::OrganizationIdentifierValue "vendor-specific-action.h"
AttributeValue implementation for OrganizationIdentifier.
\see AttributeValue
*/
/*!
\fn OrganizationIdentifier ns3::OrganizationIdentifierValue::OrganizationIdentifierValue(const OrganizationIdentifier & value)
Copy constructor.
\param [in] value The OrganizationIdentifier value to copy.
*/
/*!
\fn OrganizationIdentifier ns3::OrganizationIdentifierValue::Get () const
\returns The OrganizationIdentifier value.
*/
/*!
\fn bool ns3::OrganizationIdentifierValue::GetAccessor (T & value) const
Access the OrganizationIdentifier value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The OrganizationIdentifier value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::OrganizationIdentifierValue::Set (const OrganizationIdentifier & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var OrganizationIdentifier ns3::OrganizationIdentifierValue::m_value
The stored OrganizationIdentifier instance.
*/

/*!
\ingroup attribute_OrganizationIdentifier
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeOrganizationIdentifierAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_OrganizationIdentifier
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeOrganizationIdentifierAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_OrganizationIdentifier

\class  ns3::OrganizationIdentifierChecker "vendor-specific-action.h"
AttributeChecker implementation for OrganizationIdentifierValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_OrganizationIdentifier
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeOrganizationIdentifierChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Priomap Priomap Attribute
AttributeValue implementation for Priomap
\see ns3::Priomap
*/
/*!
\ingroup attribute_Priomap
\class  ns3::PriomapValue "prio-queue-disc.h"
AttributeValue implementation for Priomap.
\see AttributeValue
*/
/*!
\fn Priomap ns3::PriomapValue::PriomapValue(const Priomap & value)
Copy constructor.
\param [in] value The Priomap value to copy.
*/
/*!
\fn Priomap ns3::PriomapValue::Get () const
\returns The Priomap value.
*/
/*!
\fn bool ns3::PriomapValue::GetAccessor (T & value) const
Access the Priomap value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Priomap value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::PriomapValue::Set (const Priomap & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Priomap ns3::PriomapValue::m_value
The stored Priomap instance.
*/

/*!
\ingroup attribute_Priomap
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakePriomapAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Priomap
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakePriomapAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Priomap

\class  ns3::PriomapChecker "prio-queue-disc.h"
AttributeChecker implementation for PriomapValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Priomap
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakePriomapChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_QueueSize QueueSize Attribute
AttributeValue implementation for QueueSize
\see ns3::QueueSize
*/
/*!
\ingroup attribute_QueueSize
\class  ns3::QueueSizeValue "queue-size.h"
AttributeValue implementation for QueueSize.
\see AttributeValue
*/
/*!
\fn QueueSize ns3::QueueSizeValue::QueueSizeValue(const QueueSize & value)
Copy constructor.
\param [in] value The QueueSize value to copy.
*/
/*!
\fn QueueSize ns3::QueueSizeValue::Get () const
\returns The QueueSize value.
*/
/*!
\fn bool ns3::QueueSizeValue::GetAccessor (T & value) const
Access the QueueSize value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The QueueSize value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::QueueSizeValue::Set (const QueueSize & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var QueueSize ns3::QueueSizeValue::m_value
The stored QueueSize instance.
*/

/*!
\ingroup attribute_QueueSize
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeQueueSizeAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_QueueSize
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeQueueSizeAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_QueueSize

\class  ns3::QueueSizeChecker "queue-size.h"
AttributeChecker implementation for QueueSizeValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_QueueSize
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeQueueSizeChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Rectangle Rectangle Attribute
AttributeValue implementation for Rectangle
\see ns3::Rectangle
*/
/*!
\ingroup attribute_Rectangle
\class  ns3::RectangleValue "rectangle.h"
AttributeValue implementation for Rectangle.
\see AttributeValue
*/
/*!
\fn Rectangle ns3::RectangleValue::RectangleValue(const Rectangle & value)
Copy constructor.
\param [in] value The Rectangle value to copy.
*/
/*!
\fn Rectangle ns3::RectangleValue::Get () const
\returns The Rectangle value.
*/
/*!
\fn bool ns3::RectangleValue::GetAccessor (T & value) const
Access the Rectangle value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Rectangle value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::RectangleValue::Set (const Rectangle & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Rectangle ns3::RectangleValue::m_value
The stored Rectangle instance.
*/

/*!
\ingroup attribute_Rectangle
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeRectangleAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Rectangle
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeRectangleAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Rectangle

\class  ns3::RectangleChecker "rectangle.h"
AttributeChecker implementation for RectangleValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Rectangle
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeRectangleChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Ssid Ssid Attribute
AttributeValue implementation for Ssid
\see ns3::Ssid
*/
/*!
\ingroup attribute_Ssid
\class  ns3::SsidValue "ssid.h"
AttributeValue implementation for Ssid.
\see AttributeValue
*/
/*!
\fn Ssid ns3::SsidValue::SsidValue(const Ssid & value)
Copy constructor.
\param [in] value The Ssid value to copy.
*/
/*!
\fn Ssid ns3::SsidValue::Get () const
\returns The Ssid value.
*/
/*!
\fn bool ns3::SsidValue::GetAccessor (T & value) const
Access the Ssid value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ssid value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::SsidValue::Set (const Ssid & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ssid ns3::SsidValue::m_value
The stored Ssid instance.
*/

/*!
\ingroup attribute_Ssid
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeSsidAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ssid
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeSsidAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ssid

\class  ns3::SsidChecker "ssid.h"
AttributeChecker implementation for SsidValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ssid
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeSsidChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_TypeId TypeId Attribute
AttributeValue implementation for TypeId
\see ns3::TypeId
*/
/*!
\ingroup attribute_TypeId
\class  ns3::TypeIdValue "type-id.h"
AttributeValue implementation for TypeId.
\see AttributeValue
*/
/*!
\fn TypeId ns3::TypeIdValue::TypeIdValue(const TypeId & value)
Copy constructor.
\param [in] value The TypeId value to copy.
*/
/*!
\fn TypeId ns3::TypeIdValue::Get () const
\returns The TypeId value.
*/
/*!
\fn bool ns3::TypeIdValue::GetAccessor (T & value) const
Access the TypeId value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The TypeId value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::TypeIdValue::Set (const TypeId & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var TypeId ns3::TypeIdValue::m_value
The stored TypeId instance.
*/

/*!
\ingroup attribute_TypeId
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTypeIdAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_TypeId
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTypeIdAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_TypeId

\class  ns3::TypeIdChecker "type-id.h"
AttributeChecker implementation for TypeIdValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_TypeId
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeTypeIdChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_UanModesList UanModesList Attribute
AttributeValue implementation for UanModesList
\see ns3::UanModesList
*/
/*!
\ingroup attribute_UanModesList
\class  ns3::UanModesListValue "uan-tx-mode.h"
AttributeValue implementation for UanModesList.
\see AttributeValue
*/
/*!
\fn UanModesList ns3::UanModesListValue::UanModesListValue(const UanModesList & value)
Copy constructor.
\param [in] value The UanModesList value to copy.
*/
/*!
\fn UanModesList ns3::UanModesListValue::Get () const
\returns The UanModesList value.
*/
/*!
\fn bool ns3::UanModesListValue::GetAccessor (T & value) const
Access the UanModesList value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The UanModesList value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::UanModesListValue::Set (const UanModesList & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var UanModesList ns3::UanModesListValue::m_value
The stored UanModesList instance.
*/

/*!
\ingroup attribute_UanModesList
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUanModesListAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_UanModesList
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUanModesListAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_UanModesList

\class  ns3::UanModesListChecker "uan-tx-mode.h"
AttributeChecker implementation for UanModesListValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_UanModesList
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeUanModesListChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_ValueClassTest ValueClassTest Attribute
AttributeValue implementation for ValueClassTest
*/
/*!
\ingroup attribute_ValueClassTest
\class  ns3::ValueClassTestValue "attribute-test-suite.cc"
AttributeValue implementation for ValueClassTest.
\see AttributeValue
*/
/*!
\fn ValueClassTest ns3::ValueClassTestValue::ValueClassTestValue(const ValueClassTest & value)
Copy constructor.
\param [in] value The ValueClassTest value to copy.
*/
/*!
\fn ValueClassTest ns3::ValueClassTestValue::Get () const
\returns The ValueClassTest value.
*/
/*!
\fn bool ns3::ValueClassTestValue::GetAccessor (T & value) const
Access the ValueClassTest value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The ValueClassTest value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::ValueClassTestValue::Set (const ValueClassTest & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var ValueClassTest ns3::ValueClassTestValue::m_value
The stored ValueClassTest instance.
*/

/*!
\ingroup attribute_ValueClassTest
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeValueClassTestAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ValueClassTest
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeValueClassTestAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ValueClassTest

\class  ns3::ValueClassTestChecker "attribute-test-suite.cc"
AttributeChecker implementation for ValueClassTestValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ValueClassTest
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeValueClassTestChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Vector Vector Attribute
AttributeValue implementation for Vector
\see ns3::Vector
*/
/*!
\ingroup attribute_Vector
\class  ns3::VectorValue "vector.h"
AttributeValue implementation for Vector.
\see AttributeValue
*/
/*!
\fn Vector ns3::VectorValue::VectorValue(const Vector & value)
Copy constructor.
\param [in] value The Vector value to copy.
*/
/*!
\fn Vector ns3::VectorValue::Get () const
\returns The Vector value.
*/
/*!
\fn bool ns3::VectorValue::GetAccessor (T & value) const
Access the Vector value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Vector value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::VectorValue::Set (const Vector & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Vector ns3::VectorValue::m_value
The stored Vector instance.
*/

/*!
\ingroup attribute_Vector
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVectorAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVectorAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector

\class  ns3::VectorChecker "vector.h"
AttributeChecker implementation for VectorValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Vector
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVectorChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Vector2D Vector2D Attribute
AttributeValue implementation for Vector2D
\see ns3::Vector2D
*/
/*!
\ingroup attribute_Vector2D
\class  ns3::Vector2DValue "vector.h"
AttributeValue implementation for Vector2D.
\see AttributeValue
*/
/*!
\fn Vector2D ns3::Vector2DValue::Vector2DValue(const Vector2D & value)
Copy constructor.
\param [in] value The Vector2D value to copy.
*/
/*!
\fn Vector2D ns3::Vector2DValue::Get () const
\returns The Vector2D value.
*/
/*!
\fn bool ns3::Vector2DValue::GetAccessor (T & value) const
Access the Vector2D value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Vector2D value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Vector2DValue::Set (const Vector2D & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Vector2D ns3::Vector2DValue::m_value
The stored Vector2D instance.
*/

/*!
\ingroup attribute_Vector2D
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector2DAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector2D
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector2DAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector2D

\class  ns3::Vector2DChecker "vector.h"
AttributeChecker implementation for Vector2DValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Vector2D
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVector2DChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Vector3D Vector3D Attribute
AttributeValue implementation for Vector3D
\see ns3::Vector3D
*/
/*!
\ingroup attribute_Vector3D
\class  ns3::Vector3DValue "vector.h"
AttributeValue implementation for Vector3D.
\see AttributeValue
*/
/*!
\fn Vector3D ns3::Vector3DValue::Vector3DValue(const Vector3D & value)
Copy constructor.
\param [in] value The Vector3D value to copy.
*/
/*!
\fn Vector3D ns3::Vector3DValue::Get () const
\returns The Vector3D value.
*/
/*!
\fn bool ns3::Vector3DValue::GetAccessor (T & value) const
Access the Vector3D value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Vector3D value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Vector3DValue::Set (const Vector3D & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Vector3D ns3::Vector3DValue::m_value
The stored Vector3D instance.
*/

/*!
\ingroup attribute_Vector3D
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector3DAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector3D
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector3DAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector3D

\class  ns3::Vector3DChecker "vector.h"
AttributeChecker implementation for Vector3DValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Vector3D
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVector3DChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Waypoint Waypoint Attribute
AttributeValue implementation for Waypoint
\see ns3::Waypoint
*/
/*!
\ingroup attribute_Waypoint
\class  ns3::WaypointValue "waypoint.h"
AttributeValue implementation for Waypoint.
\see AttributeValue
*/
/*!
\fn Waypoint ns3::WaypointValue::WaypointValue(const Waypoint & value)
Copy constructor.
\param [in] value The Waypoint value to copy.
*/
/*!
\fn Waypoint ns3::WaypointValue::Get () const
\returns The Waypoint value.
*/
/*!
\fn bool ns3::WaypointValue::GetAccessor (T & value) const
Access the Waypoint value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Waypoint value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::WaypointValue::Set (const Waypoint & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Waypoint ns3::WaypointValue::m_value
The stored Waypoint instance.
*/

/*!
\ingroup attribute_Waypoint
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWaypointAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Waypoint
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWaypointAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Waypoint

\class  ns3::WaypointChecker "waypoint.h"
AttributeChecker implementation for WaypointValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Waypoint
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeWaypointChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_WifiMode WifiMode Attribute
AttributeValue implementation for WifiMode
\see ns3::WifiMode
*/
/*!
\ingroup attribute_WifiMode
\class  ns3::WifiModeValue "wifi-mode.h"
AttributeValue implementation for WifiMode.
\see AttributeValue
*/
/*!
\fn WifiMode ns3::WifiModeValue::WifiModeValue(const WifiMode & value)
Copy constructor.
\param [in] value The WifiMode value to copy.
*/
/*!
\fn WifiMode ns3::WifiModeValue::Get () const
\returns The WifiMode value.
*/
/*!
\fn bool ns3::WifiModeValue::GetAccessor (T & value) const
Access the WifiMode value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The WifiMode value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::WifiModeValue::Set (const WifiMode & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var WifiMode ns3::WifiModeValue::m_value
The stored WifiMode instance.
*/

/*!
\ingroup attribute_WifiMode
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWifiModeAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_WifiMode
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWifiModeAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_WifiMode

\class  ns3::WifiModeChecker "wifi-mode.h"
AttributeChecker implementation for WifiModeValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_WifiMode
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeWifiModeChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Boolean Boolean Attribute
AttributeValue implementation for Boolean
*/
/*!
\ingroup attribute_Boolean
\class  ns3::BooleanValue "boolean.h"
AttributeValue implementation for Boolean.
\see AttributeValue
*/
/*!
\fn Boolean ns3::BooleanValue::BooleanValue(const bool & value)
Copy constructor.
\param [in] value The Boolean value to copy.
*/
/*!
\fn bool ns3::BooleanValue::Get () const
\returns The Boolean value.
*/
/*!
\fn bool ns3::BooleanValue::GetAccessor (T & value) const
Access the Boolean value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Boolean value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::BooleanValue::Set (const bool & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var bool ns3::BooleanValue::m_value
The stored Boolean instance.
*/

/*!
\ingroup attribute_Boolean
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBooleanAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Boolean
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBooleanAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Boolean

\class  ns3::BooleanChecker "boolean.h"
AttributeChecker implementation for BooleanValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Boolean
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeBooleanChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Callback Callback Attribute
AttributeValue implementation for Callback
\see ns3::Callback
*/
/*!
\ingroup attribute_Callback
\class  ns3::CallbackValue "callback.h"
AttributeValue implementation for Callback.
\see AttributeValue
*/
/*!
\fn Callback ns3::CallbackValue::CallbackValue(const Callback & value)
Copy constructor.
\param [in] value The Callback value to copy.
*/
/*!
\fn Callback ns3::CallbackValue::Get () const
\returns The Callback value.
*/
/*!
\fn bool ns3::CallbackValue::GetAccessor (T & value) const
Access the Callback value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Callback value, as type \p T.
\returns true.
*/
/*!
\var Callback ns3::CallbackValue::m_value
The stored Callback instance.
*/

/*!
\ingroup attribute_Callback
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeCallbackAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Callback
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeCallbackAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Callback

\class  ns3::CallbackChecker "callback.h"
AttributeChecker implementation for CallbackValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Callback
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeCallbackChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Double Double Attribute
AttributeValue implementation for Double
*/
/*!
\ingroup attribute_Double
\class  ns3::DoubleValue "double.h"
AttributeValue implementation for Double.
\see AttributeValue
*/
/*!
\fn Double ns3::DoubleValue::DoubleValue(const double & value)
Copy constructor.
\param [in] value The Double value to copy.
*/
/*!
\fn double ns3::DoubleValue::Get () const
\returns The Double value.
*/
/*!
\fn bool ns3::DoubleValue::GetAccessor (T & value) const
Access the Double value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Double value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::DoubleValue::Set (const double & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var double ns3::DoubleValue::m_value
The stored Double instance.
*/

/*!
\ingroup attribute_Double
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDoubleAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Double
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDoubleAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Double

\class  ns3::DoubleChecker "double.h"
AttributeChecker implementation for DoubleValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Double
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeDoubleChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Enum Enum Attribute
AttributeValue implementation for Enum
*/
/*!
\ingroup attribute_Enum
\class  ns3::EnumValue "enum.h"
AttributeValue implementation for Enum.
\see AttributeValue
*/
/*!
\fn Enum ns3::EnumValue::EnumValue(const int & value)
Copy constructor.
\param [in] value The Enum value to copy.
*/
/*!
\fn int ns3::EnumValue::Get () const
\returns The Enum value.
*/
/*!
\fn bool ns3::EnumValue::GetAccessor (T & value) const
Access the Enum value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Enum value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::EnumValue::Set (const int & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var int ns3::EnumValue::m_value
The stored Enum instance.
*/

/*!
\ingroup attribute_Enum
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeEnumAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Enum
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeEnumAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Enum

\class  ns3::EnumChecker "enum.h"
AttributeChecker implementation for EnumValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Enum
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeEnumChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Integer Integer Attribute
AttributeValue implementation for Integer
*/
/*!
\ingroup attribute_Integer
\class  ns3::IntegerValue "integer.h"
AttributeValue implementation for Integer.
\see AttributeValue
*/
/*!
\fn Integer ns3::IntegerValue::IntegerValue(const int64_t & value)
Copy constructor.
\param [in] value The Integer value to copy.
*/
/*!
\fn int64_t ns3::IntegerValue::Get () const
\returns The Integer value.
*/
/*!
\fn bool ns3::IntegerValue::GetAccessor (T & value) const
Access the Integer value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Integer value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::IntegerValue::Set (const int64_t & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var int64_t ns3::IntegerValue::m_value
The stored Integer instance.
*/

/*!
\ingroup attribute_Integer
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIntegerAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Integer
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIntegerAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Integer

\class  ns3::IntegerChecker "integer.h"
AttributeChecker implementation for IntegerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Integer
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIntegerChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Pointer Pointer Attribute
AttributeValue implementation for Pointer
*/
/*!
\ingroup attribute_Pointer
\class  ns3::PointerValue "pointer.h"
AttributeValue implementation for Pointer.
\see AttributeValue
*/
/*!
\fn Pointer ns3::PointerValue::PointerValue(const Pointer & value)
Copy constructor.
\param [in] value The Pointer value to copy.
*/
/*!
\fn Pointer ns3::PointerValue::Get () const
\returns The Pointer value.
*/
/*!
\fn bool ns3::PointerValue::GetAccessor (T & value) const
Access the Pointer value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Pointer value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::PointerValue::Set (const Pointer & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Pointer ns3::PointerValue::m_value
The stored Pointer instance.
*/

/*!
\ingroup attribute_Pointer
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakePointerAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Pointer
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakePointerAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Pointer

\class  ns3::PointerChecker "pointer.h"
AttributeChecker implementation for PointerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Pointer
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakePointerChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_String String Attribute
AttributeValue implementation for String
*/
/*!
\ingroup attribute_String
\class  ns3::StringValue "string.h"
AttributeValue implementation for String.
\see AttributeValue
*/
/*!
\fn String ns3::StringValue::StringValue(const std::string & value)
Copy constructor.
\param [in] value The String value to copy.
*/
/*!
\fn std::string ns3::StringValue::Get () const
\returns The String value.
*/
/*!
\fn bool ns3::StringValue::GetAccessor (T & value) const
Access the String value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The String value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::StringValue::Set (const std::string & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var std::string ns3::StringValue::m_value
The stored String instance.
*/

/*!
\ingroup attribute_String
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeStringAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_String
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeStringAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_String

\class  ns3::StringChecker "string.h"
AttributeChecker implementation for StringValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_String
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeStringChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Time Time Attribute
AttributeValue implementation for Time
\see ns3::Time
*/
/*!
\ingroup attribute_Time
\class  ns3::TimeValue "nstime.h"
AttributeValue implementation for Time.
\see AttributeValue
*/
/*!
\fn Time ns3::TimeValue::TimeValue(const Time & value)
Copy constructor.
\param [in] value The Time value to copy.
*/
/*!
\fn Time ns3::TimeValue::Get () const
\returns The Time value.
*/
/*!
\fn bool ns3::TimeValue::GetAccessor (T & value) const
Access the Time value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Time value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::TimeValue::Set (const Time & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Time ns3::TimeValue::m_value
The stored Time instance.
*/

/*!
\ingroup attribute_Time
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTimeAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Time
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTimeAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Time

\class  ns3::TimeChecker "nstime.h"
AttributeChecker implementation for TimeValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Time
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeTimeChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Uinteger Uinteger Attribute
AttributeValue implementation for Uinteger
*/
/*!
\ingroup attribute_Uinteger
\class  ns3::UintegerValue "uinteger.h"
AttributeValue implementation for Uinteger.
\see AttributeValue
*/
/*!
\fn Uinteger ns3::UintegerValue::UintegerValue(const uint64_t & value)
Copy constructor.
\param [in] value The Uinteger value to copy.
*/
/*!
\fn uint64_t ns3::UintegerValue::Get () const
\returns The Uinteger value.
*/
/*!
\fn bool ns3::UintegerValue::GetAccessor (T & value) const
Access the Uinteger value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Uinteger value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::UintegerValue::Set (const uint64_t & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var uint64_t ns3::UintegerValue::m_value
The stored Uinteger instance.
*/

/*!
\ingroup attribute_Uinteger
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUintegerAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Uinteger
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUintegerAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Uinteger

\class  ns3::UintegerChecker "uinteger.h"
AttributeChecker implementation for UintegerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Uinteger
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeUintegerChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_EmptyAttribute EmptyAttribute Attribute
AttributeValue implementation for EmptyAttribute
*/
/*!
\ingroup attribute_EmptyAttribute
\class  ns3::EmptyAttributeValue "attribute.h"
AttributeValue implementation for EmptyAttribute.
\see AttributeValue
*/
/*!
\fn EmptyAttribute ns3::EmptyAttributeValue::EmptyAttributeValue()
*/
/*!
\fn EmptyAttribute ns3::EmptyAttributeValue::Get () const
\returns The EmptyAttribute value.
*/
/*!
\fn bool ns3::EmptyAttributeValue::GetAccessor (T & value) const
Access the EmptyAttribute value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The EmptyAttribute value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::EmptyAttributeValue::Set (const EmptyAttribute & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var EmptyAttribute ns3::EmptyAttributeValue::m_value
The stored EmptyAttribute instance.
*/

/*!
\ingroup attributes
\addtogroup attribute_ObjectPtrContainer ObjectPtrContainer Attribute
AttributeValue implementation for ObjectPtrContainer
*/
/*!
\ingroup attribute_ObjectPtrContainer
\class  ns3::ObjectPtrContainerValue "object-ptr-container.h"
AttributeValue implementation for ObjectPtrContainer.
\see AttributeValue
*/
/*!
\fn ObjectPtrContainer ns3::ObjectPtrContainerValue::ObjectPtrContainerValue()
*/
/*!
\fn ObjectPtrContainer ns3::ObjectPtrContainerValue::Get () const
\returns The ObjectPtrContainer value.
*/
/*!
\fn bool ns3::ObjectPtrContainerValue::GetAccessor (T & value) const
Access the ObjectPtrContainer value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The ObjectPtrContainer value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::ObjectPtrContainerValue::Set (const ObjectPtrContainer & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var ObjectPtrContainer ns3::ObjectPtrContainerValue::m_value
The stored ObjectPtrContainer instance.
*/

/*!
\ingroup attribute_ObjectPtrContainer

\class  ns3::ObjectPtrContainerChecker "object-ptr-container.h"
AttributeChecker implementation for ObjectPtrContainerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ObjectPtrContainer
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectPtrContainerChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_ObjectVector ObjectVector Attribute
AttributeValue implementation for ObjectVector
*/
/*!
\ingroup attribute_ObjectVector
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectVectorAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectVector
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectVectorAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectVector

\class  ns3::ObjectVectorChecker "object-vector.h"
AttributeChecker implementation for ObjectVectorValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ObjectVector
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectVectorChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_ObjectMap ObjectMap Attribute
AttributeValue implementation for ObjectMap
*/
/*!
\ingroup attribute_ObjectMap
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectMapAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectMap
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectMapAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectMap

\class  ns3::ObjectMapChecker "object-map.h"
AttributeChecker implementation for ObjectMapValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ObjectMap
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectMapChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Pair Pair Attribute
AttributeValue implementation for Pair
*/
/*!
\ingroup attribute_Pair
\class  ns3::PairValue "pair.h"
AttributeValue implementation for Pair.
\see AttributeValue
*/
/*!
\fn Pair ns3::PairValue::PairValue(const std::pair<A, B> & value)
Copy constructor.
\param [in] value The Pair value to copy.
*/
/*!
\fn std::pair<A, B> ns3::PairValue::Get () const
\returns The Pair value.
*/
/*!
\fn bool ns3::PairValue::GetAccessor (T & value) const
Access the Pair value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Pair value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::PairValue::Set (const std::pair<A, B> & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var std::pair<A, B> ns3::PairValue::m_value
The stored Pair instance.
*/

/*!
\ingroup attribute_Pair

\class  ns3::PairChecker "pair.h"
AttributeChecker implementation for PairValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Pair
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakePairChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Tuple Tuple Attribute
AttributeValue implementation for Tuple
*/
/*!
\ingroup attribute_Tuple
\class  ns3::TupleValue "tuple.h"
AttributeValue implementation for Tuple.
\see AttributeValue
*/
/*!
\fn Tuple ns3::TupleValue::TupleValue(const std::tuple<Args...> & value)
Copy constructor.
\param [in] value The Tuple value to copy.
*/
/*!
\fn std::tuple<Args...> ns3::TupleValue::Get () const
\returns The Tuple value.
*/
/*!
\fn bool ns3::TupleValue::GetAccessor (T & value) const
Access the Tuple value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Tuple value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::TupleValue::Set (const std::tuple<Args...> & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var std::tuple<Args...> ns3::TupleValue::m_value
The stored Tuple instance.
*/

/*!
\ingroup attribute_Tuple

\class  ns3::TupleChecker "tuple.h"
AttributeChecker implementation for TupleValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Tuple
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeTupleChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute_AttributeContainer

\class  ns3::AttributeContainerChecker "attribute-container.h"
AttributeChecker implementation for AttributeContainerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_AttributeContainer
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeAttributeContainerChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
